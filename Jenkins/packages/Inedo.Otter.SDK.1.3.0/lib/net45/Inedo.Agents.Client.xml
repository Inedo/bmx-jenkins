<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inedo.Agents.Client</name>
    </assembly>
    <members>
        <member name="T:Inedo.Agents.AgentExtensionInfo">
            <summary>
            Represents information about an extension on an agent server.
            </summary>
        </member>
        <member name="M:Inedo.Agents.AgentExtensionInfo.#ctor(System.String,System.Int64,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Agents.AgentExtensionInfo"/> class.
            </summary>
            <param name="name">The file name of the extension.</param>
            <param name="size">The size of the extension file.</param>
            <param name="modifiedTime">The timestamp of the extension file.</param>
        </member>
        <member name="P:Inedo.Agents.AgentExtensionInfo.Name">
            <summary>
            Gets the file name of the extension.
            </summary>
        </member>
        <member name="P:Inedo.Agents.AgentExtensionInfo.Size">
            <summary>
            Gets the size of the extension file.
            </summary>
        </member>
        <member name="P:Inedo.Agents.AgentExtensionInfo.ModifiedTime">
            <summary>
            Gets the timestamp of the extension file.
            </summary>
        </member>
        <member name="T:Inedo.Agents.HostedAgentStatus">
            <summary>
            Represents the current status of a hosted agent.
            </summary>
        </member>
        <member name="P:Inedo.Agents.HostedAgentStatus.Assemblies">
            <summary>
            Gets the agent assemblies.
            </summary>
        </member>
        <member name="P:Inedo.Agents.HostedAgentStatus.Extensions">
            <summary>
            Gets the agent extensions.
            </summary>
        </member>
        <member name="T:Inedo.Agents.LocalJobExecuter">
            <summary>
            Standard implementation of <see cref="T:Inedo.Agents.IRemoteJobExecuter"/> for local agents.
            </summary>
        </member>
        <member name="T:Inedo.Agents.FileOperationsExecuter">
            <summary>
            Contains extension methods for <see cref="T:Inedo.Agents.IFileOperationsExecuter"/>.
            </summary>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.CombinePath(Inedo.Agents.IFileOperationsExecuter,System.String[])">
            <summary>
            Combines multiple path components into one string.
            </summary>
            <param name="agent">The agent.</param>
            <param name="paths">The path components to combine.</param>
            <returns>Combined path string.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.CanonicalizePath(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Returns a path that has some common issues fixed, such as extra directory separator
            characters or incorrect directory separator characters.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path to be made canonical.</param>
            <returns>Canonical path.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.CopyFile(Inedo.Agents.IFileOperationsExecuter,System.String,System.String,System.Boolean)">
            <summary>
            Copies the file from <paramref name="sourcePath"/> to <paramref name="targetPath"/>.
            </summary>
            <param name="agent">The agent.</param>
            <param name="sourcePath">Full path of the source file.</param>
            <param name="targetPath">Full path of the target file.</param>
            <param name="overwrite">Value indicating whether a file at <paramref name="targetPath"/> may be overwritten if necessary.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.GetDirectoryInfo(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Returns information about the directory at the specified path.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path of the directory.</param>
            <returns>Information about the specified directory.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.GetFileSystemInfos(Inedo.Agents.IFileOperationsExecuter,System.String,Inedo.IO.MaskingContext)">
            <summary>
            Returns files and directories which match the specified mask.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path to search in.</param>
            <param name="mask">The mask.</param>
            <returns>Matching files and directories.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.GetFileInfo(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Returns information about the file at the specified path.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path of the file.</param>
            <returns>Information about the specified file.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.FileExists(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Returns a value indicating whether a file exists at the specified path.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path of the file.</param>
            <returns>True if the file exists; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.DirectoryExists(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Returns a value indicating whether a directory exists at the specified path.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path of the directory.</param>
            <returns>True if the directory exists; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.CreateDirectory(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Ensures that the directory with the specified path exists.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The full path of the directory.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.DeleteFiles(Inedo.Agents.IFileOperationsExecuter,System.String[])">
            <summary>
            Deletes all of the specified files if they exist.
            </summary>
            <param name="agent">The agent.</param>
            <param name="fileNames">The files to delete.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ClearDirectory(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Deletes all files and subfolders in a folder (but not the folder itself).
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path of the folder to empty.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.DeleteDirectories(Inedo.Agents.IFileOperationsExecuter,System.String[])">
            <summary>
            Deletes all of the specified directories if they exist.
            </summary>
            <param name="agent">The agent.</param>
            <param name="directoryNames">The directories to delete.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.OpenFile(Inedo.Agents.IFileOperationsExecuter,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file on the agent.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">Full path of the file to open.</param>
            <param name="fileMode">Specifies how the file should be opened.</param>
            <param name="fileAccess">Specifies the required access level of the file.</param>
            <returns><see cref="T:System.IO.Stream"/> backed by the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or an empty string.</exception>
            <exception cref="T:System.NotSupportedException">The agent does not support the specified file operation.</exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file cannot be found, such as when <paramref name="fileMode"/> is <c>FileMode.Truncate</c> or <c>FileMode.Open</c>,
            and the file specified by path does not exist. The file must already exist in these modes.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid.</exception>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.SetAttributes(Inedo.Agents.IFileOperationsExecuter,System.String,System.IO.FileAttributes)">
            <summary>
            Writes the specified metadata to the file or directory.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">Full path of the file or directory.</param>
            <param name="fileAttributes">Attributes to write.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.SetLastWriteTime(Inedo.Agents.IFileOperationsExecuter,System.String,System.DateTime)">
            <summary>
            Writes the specified metadata to the file or directory.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">Full path of the file or directory.</param>
            <param name="lastModified">Timestamp (UTC) to write.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.GetAttributes(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Returns the attributes of the specified file.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The full path of the file.</param>
            <returns>The attributes of the file.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.FileCopyBatch(Inedo.Agents.IFileOperationsExecuter,System.String,System.String[],System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Performs a local copy on a batch of files.
            </summary>
            <param name="agent">The agent.</param>
            <param name="sourceDirName">Directory to copy files from.</param>
            <param name="sourceFileNames">Files in the directory to copy.</param>
            <param name="destDirName">Directory to copy files to.</param>
            <param name="destFileNames">Names of the copied files in the new directory.</param>
            <param name="overwrite">Value indicating whether files should be overwritten.</param>
            <param name="createDirectory">Value indicating whether the target directory should be created if it doesn't exist.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.MoveDirectory(Inedo.Agents.IFileOperationsExecuter,System.String,System.String)">
            <summary>
            Moves a directory from <paramref name="sourceDirName"/> to <paramref name="destDirName"/>.
            </summary>
            <param name="agent">The agent.</param>
            <param name="sourceDirName">The full path of the source directory.</param>
            <param name="destDirName">The full path of the target directory.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.MoveFile(Inedo.Agents.IFileOperationsExecuter,System.String,System.String,System.Boolean)">
            <summary>
            Moves a file from <paramref name="sourceFileName"/> to <paramref name="targetFileName"/>.
            </summary>
            <param name="agent">The agent.</param>
            <param name="sourceFileName">The full path of the source file.</param>
            <param name="targetFileName">The full path of the target file.</param>
            <param name="overwrite">Value indicating whether <paramref name="targetFileName"/> may be overwritten if necessary.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.GetBaseWorkingDirectory(Inedo.Agents.IFileOperationsExecuter)">
            <summary>
            Returns the base working directory for the agent.
            </summary>
            <param name="agent">The agent.</param>
            <returns>Base working directory for the agent.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.CreateZipFile(Inedo.Agents.IFileOperationsExecuter,System.String,System.String)">
            <summary>
            Creates a zip file from the specified directory.
            </summary>
            <param name="agent">The agent.</param>
            <param name="sourcePath">The directory to zip.</param>
            <param name="targetFileName">The full path of the zip file to create.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ExtractZipFile(Inedo.Agents.IFileOperationsExecuter,System.String,System.String,System.Boolean)">
            <summary>
            Extracts a zip file into the specified directory.
            </summary>
            <param name="agent">The agent.</param>
            <param name="sourceFileName">The full path of the zip file to extract.</param>
            <param name="targetPath">The full path of the directory to extract to.</param>
            <param name="overwrite">Value indicating whether files in <paramref name="targetPath"/> may be overwritten if necessary.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.DeleteFile(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Deletes the specified file if it exists.
            </summary>
            <param name="agent">The agent.</param>
            <param name="fileName">The name of the file to delete.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.DeleteFileAsync(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Deletes the specified file if it exists.
            </summary>
            <param name="agent">The agent.</param>
            <param name="fileName">The name of the file to delete.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.DeleteDirectory(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Deletes the specified directory if it exists.
            </summary>
            <param name="agent">The agent.</param>
            <param name="dirName">The full path of the directory.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.DeleteDirectoryAsync(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Deletes the specified directory if it exists.
            </summary>
            <param name="agent">The agent.</param>
            <param name="dirName">The full path of the directory.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadFileBytes(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Reads all file bytes.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <returns>The file bytes.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadFileBytesAsync(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Reads all file bytes.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <returns>The file bytes.</returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.WriteFileBytes(Inedo.Agents.IFileOperationsExecuter,System.String,System.Byte[])">
            <summary>
            Writes the file bytes.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.WriteFileBytesAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.Byte[])">
            <summary>
            Writes the file bytes.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadAllText(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadAllText(Inedo.Agents.IFileOperationsExecuter,System.String,System.Text.Encoding)">
            <summary>
            Reads all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadAllTextAsync(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadAllTextAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.Text.Encoding)">
            <summary>
            Reads all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadAllLines(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Reads all lines without using an encoding, see <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadAllLines(Inedo.Agents.IFileOperationsExecuter,System.String,System.Text.Encoding)">
            <summary>
            Reads all lines.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadAllLinesAsync(Inedo.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Reads all lines.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.ReadAllLinesAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.Text.Encoding)">
            <summary>
            Reads all lines.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.WriteAllText(Inedo.Agents.IFileOperationsExecuter,System.String,System.String)">
            <summary>
            Writes all text without using an encoding, see <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.WriteAllText(Inedo.Agents.IFileOperationsExecuter,System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.WriteAllTextAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.String)">
            <summary>
            Writes all text without using an encoding, see <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.WriteAllTextAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.AppendAllText(Inedo.Agents.IFileOperationsExecuter,System.String,System.String)">
            <summary>
            Appends all text without using an encoding, see <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.AppendAllText(Inedo.Agents.IFileOperationsExecuter,System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.AppendAllTextAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.String)">
            <summary>
            Appends all text without using an encoding, see <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.AppendAllTextAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.AddAttributes(Inedo.Agents.IFileOperationsExecuter,System.String,System.IO.FileAttributes)">
            <summary>
            Adds the specified attributes to the specified file.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The full path of the file.</param>
            <param name="attributes">The attributes to add.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.AddAttributesAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.IO.FileAttributes)">
            <summary>
            Adds the specified attributes to the specified file.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The full path of the file.</param>
            <param name="attributes">The attributes to add.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.RemoveAttributes(Inedo.Agents.IFileOperationsExecuter,System.String,System.IO.FileAttributes)">
            <summary>
            Removes the specified attributes from the specified file.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The full path of the file.</param>
            <param name="attributes">The attributes to remove.</param>
        </member>
        <member name="M:Inedo.Agents.FileOperationsExecuter.RemoveAttributesAsync(Inedo.Agents.IFileOperationsExecuter,System.String,System.IO.FileAttributes)">
            <summary>
            Removes the specified attributes from the specified file.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The full path of the file.</param>
            <param name="attributes">The attributes to remove.</param>
        </member>
        <member name="T:Inedo.Agents.IFileOperationsExecuter">
            <summary>
            Indicates that an agent supports file system operations.
            </summary>
        </member>
        <member name="P:Inedo.Agents.IFileOperationsExecuter.DirectorySeparator">
            <summary>
            Returns the directory separator character used by the agent's platform.
            </summary>
        </member>
        <member name="P:Inedo.Agents.IFileOperationsExecuter.NewLine">
            <summary>
            Returns the new line string used by the agent's platform.
            </summary>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings according to the path format of the agent.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>Combined path string.</returns>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.CopyFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            Copies the file from <paramref name="sourcePath"/> to <paramref name="targetPath"/>.
            </summary>
            <param name="sourcePath">Full path of the source file.</param>
            <param name="targetPath">Full path of the target file.</param>
            <param name="overwrite">Value indicating whether a file at <paramref name="targetPath"/> may be overwritten if necessary.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.GetDirectoryInfoAsync(System.String)">
            <summary>
            Returns information about the directory at the specified path.
            </summary>
            <param name="path">The path of the directory.</param>
            <returns>Information about the specified directory.</returns>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.GetFileSystemInfosAsync(System.String,Inedo.IO.MaskingContext)">
            <summary>
            Returns files and directories which match the specified mask.
            </summary>
            <param name="path">The path to search in.</param>
            <param name="mask">The mask.</param>
            <returns>Matching files and directories.</returns>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.GetFileInfoAsync(System.String)">
            <summary>
            Returns information about the file at the specified path.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Information about the specified file.</returns>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.FileExistsAsync(System.String)">
            <summary>
            Returns a value indicating whether a file exists at the specified path.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>True if the file exists; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.DirectoryExistsAsync(System.String)">
            <summary>
            Returns a value indicating whether a directory exists at the specified path.
            </summary>
            <param name="path">The path of the directory.</param>
            <returns>True if the directory exists; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.CreateDirectoryAsync(System.String)">
            <summary>
            Ensures that the directory with the specified path exists.
            </summary>
            <param name="path">The full path of the directory.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.DeleteFilesAsync(System.String[])">
            <summary>
            Deletes all of the specified files if they exist.
            </summary>
            <param name="fileNames">The files to delete.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.ClearDirectoryAsync(System.String)">
            <summary>
            Deletes all files and subfolders in a folder (but not the folder itself).
            </summary>
            <param name="path">The path of the folder to empty.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.DeleteDirectoriesAsync(System.String[])">
            <summary>
            Deletes all of the specified directories if they exist.
            </summary>
            <param name="directoryNames">The directories to delete.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file on the agent.
            </summary>
            <param name="path">Full path of the file to open.</param>
            <param name="fileMode">Specifies how the file should be opened.</param>
            <param name="fileAccess">Specifies the required access level of the file.</param>
            <returns><see cref="T:System.IO.Stream"/> backed by the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or an empty string.</exception>
            <exception cref="T:System.NotSupportedException">The agent does not support the specified file operation.</exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file cannot be found, such as when <paramref name="fileMode"/> is <c>FileMode.Truncate</c> or <c>FileMode.Open</c>,
            and the file specified by path does not exist. The file must already exist in these modes.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid.</exception>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.SetAttributesAsync(System.String,System.IO.FileAttributes)">
            <summary>
            Writes the specified metadata to the file or directory.
            </summary>
            <param name="path">Full path of the file or directory.</param>
            <param name="fileAttributes">Attributes to write.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.SetLastWriteTimeAsync(System.String,System.DateTime)">
            <summary>
            Writes the specified metadata to the file or directory.
            </summary>
            <param name="path">Full path of the file or directory.</param>
            <param name="lastModified">Timestamp (UTC) to write.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.GetAttributesAsync(System.String)">
            <summary>
            Returns the attributes of the specified file.
            </summary>
            <param name="path">The full path of the file.</param>
            <returns>The attributes of the file.</returns>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.FileCopyBatchAsync(System.String,System.String[],System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Performs a local copy on a batch of files.
            </summary>
            <param name="sourceDirName">Directory to copy files from.</param>
            <param name="sourceFileNames">Files in the directory to copy.</param>
            <param name="destDirName">Directory to copy files to.</param>
            <param name="destFileNames">Names of the copied files in the new directory.</param>
            <param name="overwrite">Value indicating whether files should be overwritten.</param>
            <param name="createDirectory">Value indicating whether the target directory should be created if it doesn't exist.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.MoveDirectoryAsync(System.String,System.String)">
            <summary>
            Moves a directory from <paramref name="sourceDirName"/> to <paramref name="destDirName"/>.
            </summary>
            <param name="sourceDirName">The full path of the source directory.</param>
            <param name="destDirName">The full path of the target directory.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.MoveFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file from <paramref name="sourceFileName"/> to <paramref name="targetFileName"/>.
            </summary>
            <param name="sourceFileName">The full path of the source file.</param>
            <param name="targetFileName">The full path of the target file.</param>
            <param name="overwrite">Value indicating whether <paramref name="targetFileName"/> may be overwritten if necessary.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.GetBaseWorkingDirectoryAsync">
            <summary>
            Returns the base working directory for the agent.
            </summary>
            <returns>Base working directory for the agent.</returns>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.CreateZipFileAsync(System.String,System.String)">
            <summary>
            Creates a zip file from the specified directory.
            </summary>
            <param name="sourcePath">The directory to zip.</param>
            <param name="targetFileName">The full path of the zip file to create.</param>
        </member>
        <member name="M:Inedo.Agents.IFileOperationsExecuter.ExtractZipFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            Extracts a zip file into the specified directory.
            </summary>
            <param name="sourceFileName">The full path of the zip file to extract.</param>
            <param name="targetPath">The full path of the directory to extract to.</param>
            <param name="overwrite">Value indicating whether files in <paramref name="targetPath"/> may be overwritten if necessary.</param>
        </member>
        <member name="T:Inedo.Agents.ILinuxFileOperationsExecuter">
            <summary>
            Indicates that an agent supports POSIX file operations.
            </summary>
        </member>
        <member name="M:Inedo.Agents.ILinuxFileOperationsExecuter.OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess,System.Int32)">
            <summary>
            Opens a file on the agent.
            </summary>
            <param name="path">Full path of the file to open.</param>
            <param name="fileMode">Specifies how the file should be opened.</param>
            <param name="fileAccess">Specifies the required access level of the file.</param>
            <param name="posixFileMode">The octal file mode to use if creating a file.</param>
            <returns><see cref="T:System.IO.Stream"/> backed by the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or an empty string.</exception>
            <exception cref="T:System.NotSupportedException">The agent does not support the specified file operation.</exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file cannot be found, such as when <paramref name="fileMode"/> is <c>FileMode.Truncate</c> or <c>FileMode.Open</c>,
            and the file specified by path does not exist. The file must already exist in these modes.
            </exception>
        </member>
        <member name="M:Inedo.Agents.ILinuxFileOperationsExecuter.CreateDirectoryAsync(System.String,System.Int32)">
            <summary>
            Ensures that the directory with the specified path exists.
            </summary>
            <param name="path">The full path of the directory.</param>
            <param name="posixFileMode">The octal file mode to use if the directory is created.</param>
        </member>
        <member name="M:Inedo.Agents.ILinuxFileOperationsExecuter.SetFileModeAsync(System.String,System.Int32)">
            <summary>
            Writes the specified POSIX file mode to the file or directory.
            </summary>
            <param name="path">Full path of the file or directory.</param>
            <param name="posixFileMode">The octal file mode to write.</param>
        </member>
        <member name="T:Inedo.Agents.IRemoteJobExecuter">
            <summary>
            Indicates that an agent supports long-running remote jobs.
            </summary>
        </member>
        <member name="M:Inedo.Agents.IRemoteJobExecuter.ExecuteJobAsync(Inedo.Agents.RemoteJob,System.Threading.CancellationToken)">
            <summary>
            Begins asynchronously executing a long-running remote job.
            </summary>
            <param name="job">The job to execute.</param>
            <param name="cancellationToken">Cancellation token for the job.</param>
            <returns>Result of the job.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="job"/> is null.</exception>
        </member>
        <member name="T:Inedo.Agents.IRemoteMethodExecuter">
            <summary>
            Indicates that an agent supports executing a method on a remote server.
            </summary>
        </member>
        <member name="M:Inedo.Agents.IRemoteMethodExecuter.InvokeMethodAsync(System.Reflection.MethodBase,System.Object,System.Object[])">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="instance">The instance to serialize and invoke the method on.</param>
            <param name="parameters">The parameters to pass to the method. May be null if there are no parameters.</param>
            <returns>Return value of the method if applicable; otherwise null.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The values in <paramref name="parameters"/>
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or <paramref name="parameters"/> are not valid. See Remarks.</exception>
        </member>
        <member name="T:Inedo.Agents.IRemoteProcess">
            <summary>
            Represents a process on a remote server.
            </summary>
        </member>
        <member name="E:Inedo.Agents.IRemoteProcess.OutputDataReceived">
            <summary>
            Occurs when text has been written to the <see cref="P:StandardOutput"/> stream.
            </summary>
        </member>
        <member name="E:Inedo.Agents.IRemoteProcess.ErrorDataReceived">
            <summary>
            Occurs when text has been written to the <see cref="P:StandardError"/> stream.
            </summary>
        </member>
        <member name="E:Inedo.Agents.IRemoteProcess.Exited">
            <summary>
            Occurs when the process has exited.
            </summary>
        </member>
        <member name="P:Inedo.Agents.IRemoteProcess.ExitCode">
            <summary>
            Gets the process exit code or null if the process has not exited.
            </summary>
        </member>
        <member name="M:Inedo.Agents.IRemoteProcess.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits until the process has exited.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">The process has not yet been started.</exception>
        </member>
        <member name="M:Inedo.Agents.IRemoteProcess.Wait(System.Threading.CancellationToken)">
            <summary>
            Waits until the process has exited.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">The process has not yet been started.</exception>
        </member>
        <member name="M:Inedo.Agents.IRemoteProcess.Start">
            <summary>
            Starts the process.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has already been started.</exception>
        </member>
        <member name="M:Inedo.Agents.IRemoteProcess.Terminate">
            <summary>
            Immediately terminates the process.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has not yet been started.</exception>
        </member>
        <member name="T:Inedo.Agents.IRemoteProcessExecuter">
            <summary>
            Implemented by agents that can execute a process remotely.
            </summary>
        </member>
        <member name="M:Inedo.Agents.IRemoteProcessExecuter.GetEnvironmentVariableValueAsync(System.String)">
            <summary>
            Returns the value of the specified environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <returns>The value of the variable if it is defined; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.Agents.IRemoteProcessExecuter.CreateProcess(Inedo.Agents.RemoteProcessStartInfo)">
            <summary>
            Creates a process on the remote server.
            </summary>
            <param name="startInfo">The process start info.</param>
            <returns>Instance used to control and monitor the remote process.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="startInfo"/> is null.</exception>
        </member>
        <member name="T:Inedo.Agents.LocalProcess">
            <summary>
            Represents a process running locally.
            </summary>
            <remarks>
            This provides the same functionality as <see cref="T:System.Diagnostics.Process"/>, except for the following:
            <list type="bullet">
            <item><see cref="E:Inedo.Agents.LocalProcess.Exited"/> is only raised when the process has exited and all output has been read.</item>
            <item>The <see cref="T:System.Threading.Tasks.Task"/> property allows the process to be awaited.</item>
            <item>Process output may be redirected to a file instead of captured.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Inedo.Agents.LocalProcess.#ctor(Inedo.Agents.RemoteProcessStartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Agents.LocalProcess"/> class.
            </summary>
            <param name="startInfo">Process startup information used to create the process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="startInfo"/> is null.</exception>
        </member>
        <member name="E:Inedo.Agents.LocalProcess.OutputDataReceived">
            <summary>
            Occurs when output data has been received.
            </summary>
        </member>
        <member name="E:Inedo.Agents.LocalProcess.ErrorDataReceived">
            <summary>
            Occurs when error data has been received.
            </summary>
        </member>
        <member name="E:Inedo.Agents.LocalProcess.Exited">
            <summary>
            Occurs when the process has exited.
            </summary>
        </member>
        <member name="P:Inedo.Agents.LocalProcess.ExitCode">
            <summary>
            Gets the process exit code.
            </summary>
        </member>
        <member name="P:Inedo.Agents.LocalProcess.OutputFileName">
            <summary>
            Gets the name of the file to write process output to.
            </summary>
            <remarks>
            If this property is null, output will be captured by BuildMaster instead.
            </remarks>
        </member>
        <member name="M:Inedo.Agents.LocalProcess.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits until the process has exited.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">The process has not yet been started.</exception>
        </member>
        <member name="M:Inedo.Agents.LocalProcess.Wait(System.Threading.CancellationToken)">
            <summary>
            Waits until the process has exited.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">The process has not yet been started.</exception>
        </member>
        <member name="M:Inedo.Agents.LocalProcess.Start">
            <summary>
            Starts the process.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has already been started.</exception>
        </member>
        <member name="M:Inedo.Agents.LocalProcess.Terminate">
            <summary>
            Immediately terminates the process.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has not been started or has already terminated.</exception>
        </member>
        <member name="M:Inedo.Agents.LocalProcess.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Inedo.Agents.ProcessDataReceivedEventArgs">
            <summary>
            Contains data received from a process.
            </summary>
        </member>
        <member name="M:Inedo.Agents.ProcessDataReceivedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Agents.ProcessDataReceivedEventArgs"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Inedo.Agents.ProcessDataReceivedEventArgs.Data">
            <summary>
            Gets the data received.
            </summary>
        </member>
        <member name="T:Inedo.Agents.RemoteJob">
            <summary>
            Represents a long-running remote job.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Agents.RemoteJob"/> class.
            </summary>
        </member>
        <member name="E:Inedo.Agents.RemoteJob.MessageLogged">
            <summary>
            Occurs when a log message has been received.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked on the remote agent to perform the job.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of the job.</returns>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.Cancel">
            <summary>
            Requests that the job be immediately canceled on the remote agent.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.Serialize(System.IO.Stream)">
            <summary>
            Serializes this instance into the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes this instance from the specified stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.SerializeResponse(System.IO.Stream,System.Object)">
            <summary>
            Serializes the return value of the <see cref="M:Inedo.Agents.RemoteJob.ExecuteAsync(System.Threading.CancellationToken)"/> method
            into the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="result">The value to serialize.</param>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.DeserializeResponse(System.IO.Stream)">
            <summary>
            Deserializes the return value of the <see cref="M:Inedo.Agents.RemoteJob.ExecuteAsync(System.Threading.CancellationToken)"/> method
            from the specified stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The value that was deserialized.</returns>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.Dispose">
            <summary>
            Releases resources used by the job.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Sends a long message back to the client.
            </summary>
            <param name="logLevel">The message level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.Post(System.Byte[])">
            <summary>
            Posts arbitrary data back to the client.
            </summary>
            <param name="data">The data to post.</param>
        </member>
        <member name="M:Inedo.Agents.RemoteJob.DataReceived(System.Byte[])">
            <summary>
            Processes data received from the server from a call to the <see cref="M:Inedo.Agents.RemoteJob.Post(System.Byte[])"/> method.
            </summary>
            <param name="data">The data received.</param>
        </member>
        <member name="T:Inedo.Agents.LocalFileOperationsExecuter">
            <summary>
            A <see cref="T:Inedo.Agents.IFileOperationsExecuter"/> that executes operations against the local file system.
            </summary>
        </member>
        <member name="T:Inedo.Agents.RemoteFileOperationsExecuter">
            <summary>
            Standard file operations executer for hosted agents.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteFileOperationsExecuter.#ctor(Inedo.Agents.InedoAgentClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Agents.RemoteFileOperationsExecuter"/> class.
            </summary>
            <param name="agentClient">The agent client.</param>
        </member>
        <member name="T:Inedo.Agents.RemoteJobExecuter">
            <summary>
            Contains extension methods for <see cref="T:Inedo.Agents.IRemoteJobExecuter"/>.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteJobExecuter.ExecuteJobAsync(Inedo.Agents.IRemoteJobExecuter,Inedo.Agents.RemoteJob)">
            <summary>
            Begins asynchronously executing a long-running remote job.
            </summary>
            <param name="jobExecuter">The agent.</param>
            <param name="job">The job to execute.</param>
            <returns>Result of the job.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobExecuter"/> is null or <paramref name="job"/> is null.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteJobExecuter.ExecuteJob(Inedo.Agents.IRemoteJobExecuter,Inedo.Agents.RemoteJob,System.Threading.CancellationToken)">
            <summary>
            Syncrhonously executes a long-running remote job.
            </summary>
            <param name="jobExecuter">The agent.</param>
            <param name="job">The job to execute.</param>
            <param name="cancellationToken">Cancellation token for the job.</param>
            <returns>Result of the job.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobExecuter"/> is null or <paramref name="job"/> is null.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteJobExecuter.ExecuteJob(Inedo.Agents.IRemoteJobExecuter,Inedo.Agents.RemoteJob)">
            <summary>
            Syncrhonously executes a long-running remote job.
            </summary>
            <param name="jobExecuter">The agent.</param>
            <param name="job">The job to execute.</param>
            <returns>Result of the job.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobExecuter"/> is null or <paramref name="job"/> is null.</exception>
        </member>
        <member name="T:Inedo.Agents.RemoteMethodExecuter">
            <summary>
            Contains extension methods for <see cref="T:Inedo.Agents.IRemoteMethodExecuter"/>.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeMethod(Inedo.Agents.IRemoteMethodExecuter,System.Reflection.MethodBase,System.Object,System.Object[])">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <param name="agent">The agent.</param>
            <param name="method">The method to invoke.</param>
            <param name="instance">The instance to serialize and invoke the method on.</param>
            <param name="parameters">The parameters to pass to the method. May be null if there are no parameters.</param>
            <returns>Return value of the method if applicable; otherwise null.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The values in <paramref name="parameters"/>
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or <paramref name="parameters"/> are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeMethod(Inedo.Agents.IRemoteMethodExecuter,System.Delegate,System.Object[])">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="parameters">The parameters to pass to the method. May be null if there are no parameters.</param>
            <returns>Return value of the method if applicable; otherwise null.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The values in <paramref name="parameters"/>
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or <paramref name="parameters"/> are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeMethodAsync(Inedo.Agents.IRemoteMethodExecuter,System.Delegate,System.Object[])">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="parameters">The parameters to pass to the method. May be null if there are no parameters.</param>
            <returns>Return value of the method if applicable; otherwise null.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The values in <paramref name="parameters"/>
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or <paramref name="parameters"/> are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFunc``1(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0})">
            <summary>
            Invokes the method on the remote server and returns the result.
            </summary>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFunc``2(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0,``1},``0)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg">The parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFunc``3(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFunc``4(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFunc``5(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="T4">The type of the fourth method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <param name="arg4">The fourth parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFuncAsync``1(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0})">
            <summary>
            Invokes the method on the remote server and returns the result.
            </summary>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFuncAsync``2(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0,``1},``0)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg">The parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFuncAsync``3(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFuncAsync``4(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeFuncAsync``5(Inedo.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="T4">The type of the fourth method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <param name="arg4">The fourth parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeAction(Inedo.Agents.IRemoteMethodExecuter,System.Action)">
            <summary>
            Invokes the method on the remote server.
            </summary>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeAction``1(Inedo.Agents.IRemoteMethodExecuter,System.Action{``0},``0)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg">The parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeAction``2(Inedo.Agents.IRemoteMethodExecuter,System.Action{``0,``1},``0,``1)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeAction``3(Inedo.Agents.IRemoteMethodExecuter,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeAction``4(Inedo.Agents.IRemoteMethodExecuter,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="T4">The type of the fourth method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <param name="arg4">The fourth parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeActionAsync(Inedo.Agents.IRemoteMethodExecuter,System.Action)">
            <summary>
            Invokes the method on the remote server.
            </summary>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeActionAsync``1(Inedo.Agents.IRemoteMethodExecuter,System.Action{``0},``0)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg">The parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeActionAsync``2(Inedo.Agents.IRemoteMethodExecuter,System.Action{``0,``1},``0,``1)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeActionAsync``3(Inedo.Agents.IRemoteMethodExecuter,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.Agents.RemoteMethodExecuter.InvokeActionAsync``4(Inedo.Agents.IRemoteMethodExecuter,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="T4">The type of the fourth method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <param name="arg4">The fourth parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="T:Inedo.Agents.RemoteProcessStartInfo">
            <summary>
            Contains process initialization information.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteProcessStartInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Agents.RemoteProcessStartInfo"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Agents.RemoteProcessStartInfo.Arguments">
            <summary>
            Gets or sets the arguments to pass to the process.
            </summary>
        </member>
        <member name="P:Inedo.Agents.RemoteProcessStartInfo.EnvironmentVariables">
            <summary>
            Gets the environment variables.
            </summary>
        </member>
        <member name="P:Inedo.Agents.RemoteProcessStartInfo.FileName">
            <summary>
            Gets or sets the file name of the process to start.
            </summary>
        </member>
        <member name="P:Inedo.Agents.RemoteProcessStartInfo.WorkingDirectory">
            <summary>
            Gets or sets the initial working directory of the process to start.
            </summary>
        </member>
        <member name="P:Inedo.Agents.RemoteProcessStartInfo.OutputFileName">
            <summary>
            Gets or sets the name of the file to write process output to.
            </summary>
            <remarks>
            If this property is null, output will be captured directly.
            </remarks>
        </member>
        <member name="T:Inedo.Agents.RemoteProcessExecuter">
            <summary>
            Contains extension methods for <see cref="T:Inedo.Agents.IRemoteProcessExecuter"/>.
            </summary>
        </member>
        <member name="M:Inedo.Agents.RemoteProcessExecuter.GetEnvironmentVariableValue(Inedo.Agents.IRemoteProcessExecuter,System.String)">
            <summary>
            Returns the value of the specified environment variable.
            </summary>
            <param name="agent">The agent.</param>
            <param name="name">The name of the variable.</param>
            <returns>The value of the variable if it is defined; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="T:Inedo.Agents.SimulatedFileOperationsExecuter">
            <summary>
            Wraps a <see cref="T:Inedo.Agents.IFileOperationsExecuter"/> to enforce simulation mode.
            </summary>
        </member>
        <member name="M:Inedo.Agents.SimulatedFileOperationsExecuter.#ctor(Inedo.Agents.IFileOperationsExecuter)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Agents.SimulatedFileOperationsExecuter"/> class.
            </summary>
            <param name="fileOps">The instance to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileOps"/> is null.</exception>
        </member>
    </members>
</doc>
