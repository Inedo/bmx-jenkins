<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inedo.ExecutionEngine</name>
    </assembly>
    <members>
        <member name="T:Inedo.ExecutionEngine.Executer.ActionExecutionResult">
            <summary>
            Represents the result of an action execution.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.ActiveNamedScope">
            <summary>
            Represents a currently active named scoped to contain log messages.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ActiveNamedScope.#ctor(Inedo.ExecutionEngine.Executer.ScopeIdentifier,Inedo.ExecutionEngine.Executer.ActiveNamedScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.ActiveNamedScope"/> class.
            </summary>
            <param name="current">The current scope.</param>
            <param name="parent">The parent scope if applicable.</param>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ActiveNamedScope.Current">
            <summary>
            Gets the current scope identifier.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ActiveNamedScope.Parent">
            <summary>
            Gets the parent active scope.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ActiveNamedScope.Log(Inedo.ExecutionEngine.LogLevel,System.String)">
            <summary>
            Writes a message to the current scope.
            </summary>
            <param name="level">The message level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ActiveNamedScope.BeginScope">
            <summary>
            Invoked once when the scope becomes active.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ActiveNamedScope.EndScope">
            <summary>
            Invoked once when the scope is no longer in use by anything.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.ExecuterThreadIdentifier">
            <summary>
            An opaque identifier for an executer thread.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.ExecuterThreadStatus">
            <summary>
            Represents the current status of an executer thread.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ExecuterThreadStatus.CurrentStatement">
            <summary>
            Gets the currently executing statement.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ExecuterThreadStatus.CurrentStatementProgress">
            <summary>
            Gets the progress for the currently executing statement.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ExecuterThreadStatus.PercentComplete">
            <summary>
            Gets the estimated percent complete of the plan; this may be null if no guess can be made.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ExecuterThreadStatus.BackgroundThreads">
            <summary>
            Gets the status of any background operations.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.ExecutionFailureException">
            <summary>
            Raised when the executer enters a failed or faulted state.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ExecutionFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.ExecutionFailureException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ExecutionFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.ExecutionFailureException"/> class.
            </summary>
            <param name="message">Message to write to the error log.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ExecutionFailureException.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.ExecutionFailureException"/> class.
            </summary>
            <param name="failFast">Value indicating whether excution should terminate immediately or catch blocks should run.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ExecutionFailureException.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.ExecutionFailureException"/> class.
            </summary>
            <param name="failFast">Value indicating whether excution should terminate immediately or catch blocks should run.</param>
            <param name="message">Message to write to the error log.</param>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ExecutionFailureException.FailFast">
            <summary>
            Gets a value indicating whether catch blocks are allowed to run.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ExecutionFailureException.LogMessage">
            <summary>
            Gets a value indicating whether the <see cref="P:System.Exception.Message" /> property should be written to the current error log.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ExecutionFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.ExecuterThread">
            <summary>
            Provides for the runtime execution of a plan.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ExecuterThread.#ctor(Inedo.ExecutionEngine.AnonymousBlockStatement,Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.ExecuterThread"/> class.
            </summary>
            <param name="root">The plan to execute.</param>
            <param name="globalContext">The global context.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is null or <paramref name="globalContext"/> is null.</exception>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.ExecuterThread.SkipToken">
            <summary>
            Gets the object which can be returned from the <see cref="M:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment.GetExternalContextAsync(System.String,System.String,Inedo.ExecutionEngine.Executer.IExecuterContext)"/>
            method to indicate that the context should be skipped.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ExecuterThread.ExecuteNext">
            <summary>
            Executes the next statement.
            </summary>
            <returns>True if a statement was executed; false if there is nothing left to execute.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.ExecuterThread.GetDetailedStatus">
            <summary>
            Returns a snapshot of the current execution status.
            </summary>
            <returns>Snapshot of the current execution status.</returns>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.ExecutionStatus">
            <summary>
            Represents the state of an execution.
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.Executer.ExecutionStatus.Normal">
            <summary>
            The execution is running normally with no error or warning statuses.
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.Executer.ExecutionStatus.Warning">
            <summary>
            The execution is in a warning state.
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.Executer.ExecutionStatus.Error">
            <summary>
            The execution is in an error state.
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.Executer.ExecutionStatus.Fault">
            <summary>
            The execution is halted and in a faulted state.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.IExecuterContext">
            <summary>
            Provides runtime context for an execution in progress.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.IExecuterContext.ExternalContext">
            <summary>
            Gets the current external context.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.IExecuterContext.CancellationToken">
            <summary>
            Gets the current cancellation token.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.IExecuterContext.ExecutionStatus">
            <summary>
            Gets the current execution status.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.IExecuterContext.LogScope">
            <summary>
            Gets the current log scope.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecuterContext.GetVariableValue(Inedo.ExecutionEngine.RuntimeVariableName)">
            <summary>
            Returns the value of the execution or global variable with the specified name,
            or null if the variable was not found.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <returns>The value of the specified variable, or null if the variable was not found.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecuterContext.SetVariableValue(Inedo.ExecutionEngine.RuntimeVariableName,Inedo.ExecutionEngine.RuntimeValue)">
            <summary>
            Sets the value of the specified variable.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <param name="variableValue">The new value of the variable.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecuterContext.GetContainingScopes">
            <summary>
            Returns a sequence of all blocks above the current scope.
            </summary>
            <returns>Sequence of all blocks above the current scope.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecuterContext.GetExecutionVariables">
            <summary>
            Returns a sequence of all execution-only variables that are accessible from the current scope.
            </summary>
            <returns>Sequence of all execution-only variables that are accessible from the current scope.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecuterContext.SetReportProgressDelegate(System.Func{Inedo.ExecutionEngine.Executer.StatementProgress})">
            <summary>
            Sets the progress reporting delegate for the current context.
            </summary>
            <param name="getProgress">The progress reporting delegate.</param>
            <remarks>
            The <paramref name="getProgress"/> delegate may be invoked at any time from any thread.
            Plan accordingly.
            </remarks>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment">
            <summary>
            Represents the global context used by the <see cref="T:Inedo.ExecutionEngine.Executer.ExecuterThread"/>.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment.DefaultExternalContext">
            <summary>
            Gets the default external contexct object.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment.TryGetGlobalTemplate(System.String)">
            <summary>
            Returns the template with the matching name if possible.
            </summary>
            <param name="templateName">The name of the template.</param>
            <returns>Template with the specified name if possible; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="templateName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment.TryGetGlobalVariable(Inedo.ExecutionEngine.RuntimeVariableName,Inedo.ExecutionEngine.Executer.IExecuterContext)">
            <summary>
            Returns the variable with the matching name if possible.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <param name="context">The context.</param>
            <returns>Variable with the specified name if possible; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is null.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment.EvaluateExpressionAsync(System.String,Inedo.ExecutionEngine.Executer.IExecuterContext)">
            <summary>
            Asynchronously evaluates an expression.
            </summary>
            <param name="expression">Expression to evaluate.</param>
            <param name="context">The current context.</param>
            <returns>Result of the evaluation.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment.ExecuteActionAsync(Inedo.ExecutionEngine.ActionStatement,Inedo.ExecutionEngine.Executer.IExecuterContext)">
            <summary>
            Asynchronously executes an action.
            </summary>
            <param name="actionStatement">Action to execute.</param>
            <param name="context">The current context.</param>
            <returns>Result of the execution.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment.GetExternalContextAsync(System.String,System.String,Inedo.ExecutionEngine.Executer.IExecuterContext)">
            <summary>
            Returns the external context object for the specified context type and value.
            </summary>
            <param name="contextType">The type of the context to set.</param>
            <param name="contextValue">The value of the context to set.</param>
            <param name="currentContext">The current context.</param>
            <returns>External context object for the specified context type and value.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IExecutionHostEnvironment.CreateLogScope(Inedo.ExecutionEngine.Executer.ScopeIdentifier,Inedo.ExecutionEngine.Executer.ActiveNamedScope)">
            <summary>
            Returns a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.ActiveNamedScope"/> class.
            </summary>
            <param name="current">The scope of the new <see cref="T:Inedo.ExecutionEngine.Executer.ActiveNamedScope"/> instance.</param>
            <param name="parent">The parent scope.</param>
            <returns>New instance of the <see cref="T:Inedo.ExecutionEngine.Executer.ActiveNamedScope"/> class.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="current"/> is null.</exception>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.IRuntimeVariable">
            <summary>
            Represents a variable used by the execution engine at runtime.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.IRuntimeVariable.Name">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.IRuntimeVariable.GetValue">
            <summary>
            Returns the current value of the variable.
            </summary>
            <returns>Current value of the variable.</returns>
        </member>
        <member name="T:Inedo.ExecutionEngine.Executer.StatementProgress">
            <summary>
            Represents progress information for a currently executing statement.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.StatementProgress.#ctor(System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.StatementProgress"/> struct.
            </summary>
            <param name="percent">The percent complete.</param>
            <param name="message">The current status.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.StatementProgress.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.StatementProgress"/> struct.
            </summary>
            <param name="percent">The percent complete.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.StatementProgress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Executer.StatementProgress"/> struct.
            </summary>
            <param name="message">The current status.</param>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.StatementProgress.Percent">
            <summary>
            Gets the overall percent complete.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Executer.StatementProgress.Message">
            <summary>
            Gets the status message.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Executer.StatementProgress.ToString">
            <summary>
            Returns a string representatiof of the value.
            </summary>
            <returns>String representation of the value.</returns>
        </member>
        <member name="T:Inedo.ExecutionEngine.NamedTemplate">
            <summary>
            Represents a named, parameterized block of statements.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.NamedTemplate.#ctor(System.String,System.Collections.Generic.IEnumerable{Inedo.ExecutionEngine.TemplateArgumentInfo},Inedo.ExecutionEngine.ScopedStatementBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.NamedTemplate"/> class.
            </summary>
            <param name="name">The name of the template.</param>
            <param name="parameters">The parameters for the template.</param>
            <param name="body">The body of the template.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty or <paramref name="body"/> is null.</exception>
        </member>
        <member name="P:Inedo.ExecutionEngine.NamedTemplate.Name">
            <summary>
            Gets the name of the template.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.NamedTemplate.Body">
            <summary>
            Gets the body of the template.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.NamedTemplate.Parameters">
            <summary>
            Gets the parameters for the template.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Parser.Compiler">
            <summary>
            Contains methods for compiling and validating a script.
            </summary>
        </member>
        <member name="E:Inedo.ExecutionEngine.Parser.Compiler.GlobalValidateStatement">
            <summary>
            Occurs when a statement is being validated.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Parser.Compiler.Compile(System.IO.TextReader)">
            <summary>
            Attempts to compile and validate a script and returns a <see cref="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput"/> instance.
            </summary>
            <param name="reader"><see cref="T:System.IO.TextReader"/> instance backed by the script to compile.</param>
            <returns><see cref="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput"/> instance containing the compiled script and a list of compilation and validation errors.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Parser.Compiler.Compile(System.IO.Stream)">
            <summary>
            Attempts to compile and validate a script and returns a <see cref="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput"/> instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> instance backed by the script to compile.</param>
            <returns><see cref="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput"/> instance containing the compiled script and a list of compilation and validation errors.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Parser.Compiler.Compile(System.String)">
            <summary>
            Attempts to compile and validate a script and returns a <see cref="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput"/> instance.
            </summary>
            <param name="fileName">Full path of the script file to compile.</param>
            <returns><see cref="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput"/> instance containing the compiled script and a list of compilation and validation errors.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Parser.Compiler.CompileText(System.String)">
            <summary>
            Attempts to compile and validate a script from a literal string and returns a <see cref="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput"/> instance.
            </summary>
            <param name="script">Text of the script to compile.</param>
            <returns><see cref="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput"/> instance containing the compiled script and a list of compilation and validation errors.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Parser.Compiler.Validate(Inedo.ExecutionEngine.ScopedStatementBlock)">
            <summary>
            Validates a compiled plan and returns all appropriate errors and warnings.
            </summary>
            <param name="script">The script to validate.</param>
            <returns>All errors and warnings for the script.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="script"/> is null.</exception>
            <remarks>
            The static <see cref="E:Inedo.ExecutionEngine.Parser.Compiler.GlobalValidateStatement"/> event is always raised for each statement.
            </remarks>
        </member>
        <member name="M:Inedo.ExecutionEngine.Parser.Compiler.Validate(Inedo.ExecutionEngine.ScopedStatementBlock,System.EventHandler{Inedo.ExecutionEngine.ValidateStatementEventArgs})">
            <summary>
            Validates a compiled plan and returns all appropriate errors and warnings.
            </summary>
            <param name="script">The script to validate.</param>
            <param name="validateStatement">Delegate which is invoked to provide additional validation for each statement.</param>
            <returns>All errors and warnings for the script.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="script"/> is null.</exception>
            <remarks>
            The static <see cref="E:Inedo.ExecutionEngine.Parser.Compiler.GlobalValidateStatement"/> event is always raised for each statement, in addition to
            the delegate supplied as the <paramref name="validateStatement"/> argument.
            </remarks>
        </member>
        <member name="T:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput">
            <summary>
            Contains information about a compiled script.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput.Script">
            <summary>
            Gets the compiled script if there were no errors; otherwise null.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput.Errors">
            <summary>
            Gets the list of any error or warnings which occurred during compilation.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Parser.Processor.ScriptProcessorOutput.AdditionalHeaders">
            <summary>
            Gets the additional headers included at the beginning of the script.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.InequalityPredicate">
            <summary>
            Predicate that tests for inequality between two values.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.InequalityPredicate.Value1">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.InequalityPredicate.Value2">
            <summary>
            Gets the second value.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.RuntimeVariableName">
            <summary>
            Represents the name of a runtime variable and its expected type.
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.RuntimeVariableName.MaxLength">
            <summary>
            The maximum length of a variable name.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.RuntimeVariableName.#ctor(System.String,Inedo.ExecutionEngine.RuntimeValueType)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.RuntimeVariableName"/> class.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="type">The type of the variable.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a valid value.</exception>
            <exception cref="T:System.FormatException"><paramref name="name"/> is not a valid variable name.</exception>
        </member>
        <member name="P:Inedo.ExecutionEngine.RuntimeVariableName.Name">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.RuntimeVariableName.Type">
            <summary>
            Gets the type of the variable.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.RuntimeVariableName.IsLegalVariableName(System.String)">
            <summary>
            Returns a value indicating whether the specified string is a legal variable name.
            </summary>
            <param name="s">The string to test.</param>
            <returns>True if <paramref name="s"/> is a legal variable name; otherwise false.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.RuntimeVariableName.IsLegalBasicVariableCharacter(System.Char)">
            <summary>
            Returns a value indicating whether the specified character is a legal basic variable character.
            </summary>
            <param name="c">The character to test.</param>
            <returns>True if <paramref name="c"/> is a legal basic variable character; otherwise false.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.RuntimeVariableName.IsLegalExpandedVariableCharacter(System.Char)">
            <summary>
            Returns a value indicating whether the specified character is a legal expanded variable character.
            </summary>
            <param name="c">The character to test.</param>
            <returns>True if <paramref name="c"/> is a legal expanded variable character; otherwise false.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.RuntimeVariableName.Parse(System.String)">
            <summary>
            Returns an instance of the <see cref="T:Inedo.ExecutionEngine.RuntimeVariableName"/> class parsed from the specified string.
            </summary>
            <param name="s">The string containing a variable name to parse.</param>
            <returns>Instance of the <see cref="T:Inedo.ExecutionEngine.RuntimeVariableName"/> class.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null or empty.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> is an invalid variable name.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.RuntimeVariableName.TryParse(System.String)">
            <summary>
            Returns an instance of the <see cref="T:Inedo.ExecutionEngine.RuntimeVariableName"/> class parsed from the specified string
            if possible; otherwise returns null.
            </summary>
            <param name="s">The string containing a variable name to parse.</param>
            <returns>Instance of the <see cref="T:Inedo.ExecutionEngine.RuntimeVariableName"/> class if parsing was successful; otherwise null.</returns>
        </member>
        <member name="T:Inedo.ExecutionEngine.QualifiedName">
            <summary>
            Represents a name that may be qualified with a namespace.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.QualifiedName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.QualifiedName"/> class.
            </summary>
            <param name="name">The local name.</param>
            <param name="namespaceName">The namespace.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.QualifiedName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.QualifiedName"/> class.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="P:Inedo.ExecutionEngine.QualifiedName.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.QualifiedName.Name">
            <summary>
            Gets the local name.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.QualifiedName.FullName">
            <summary>
            Gets the fully qualified name.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.ScriptErrorInfo">
            <summary>
            Represents an error or warning for a script.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScriptErrorInfo.Level">
            <summary>
            Gets the error level.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScriptErrorInfo.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScriptErrorInfo.LineNumber">
            <summary>
            Gets the line number where the error occurred if applicable.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.ScriptErrorInfo.ToString">
            <summary>
            Returns a string representation of the error message.
            </summary>
            <returns>String representation of the error message.</returns>
        </member>
        <member name="T:Inedo.ExecutionEngine.AndPredicate">
            <summary>
            Predicate that evaluates to true when all of its constituent predicates
            evaluate to true.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.AndPredicate.Values">
            <summary>
            Gets the predicates to evaluate.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.EqualityPredicate">
            <summary>
            Predicate that tests for equality between two values.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.EqualityPredicate.Value1">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.EqualityPredicate.Value2">
            <summary>
            Gets the second value.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.NotPredicate">
            <summary>
            Predicate that negates another predicate.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.NotPredicate.Value">
            <summary>
            Gets the value to negate.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.OrPredicate">
            <summary>
            Predicate that evaluates to true when any of its constituent predicates
            evaluate to true.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.OrPredicate.Values">
            <summary>
            Gets the predicates to evaluate.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Predicate">
            <summary>
            Represents a condition evaluated at runtime.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.TruePredicate">
            <summary>
            Predicate that evaluates to true when the specified value
            is equal to the string literal "True".
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.TruePredicate.Value">
            <summary>
            Gets the value to test.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.RuntimeValueType">
            <summary>
            Specifies the runtime type of a value.
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.RuntimeValueType.Scalar">
            <summary>
            The value is a scalar (string).
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.RuntimeValueType.Vector">
            <summary>
            The value is a vector (list).
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.RuntimeValueType.Map">
            <summary>
            The value is a map (dictionary).
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.ActionStatement">
            <summary>
            Statement that invokes an external action.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.AnonymousBlockStatement">
            <summary>
            Logical and functional grouping of statements.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.AnonymousBlockStatement.Body">
            <summary>
            Gets the main body of the block.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.AssignVariableStatement">
            <summary>
            Statement that sets or creates a variable.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.AssignVariableStatement.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.AssignVariableStatement.VariableValue">
            <summary>
            Gets the new value of the variable.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.AwaitStatement.Token">
            <summary>
            Gets the async token.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.CallTemplateStatement">
            <summary>
            Statement that transfers execution to the top block of a named method.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.CallTemplateStatement.TemplateName">
            <summary>
            Gets the name of the template to call.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.CallTemplateStatement.Arguments">
            <summary>
            Gets arguments to pass to the template.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.CallTemplateStatement.OutArguments">
            <summary>
            Gets the template out arguments.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.ContextIterationStatement">
            <summary>
            Statement that enumerates over contexts.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ContextIterationStatement.ContextType">
            <summary>
            Gets the context to set.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ContextIterationStatement.Source">
            <summary>
            Gets the value to iterate over.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ContextIterationStatement.Body">
            <summary>
            Gets the loop body.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.ExecutionDirectiveStatement">
            <summary>
            Statement that specifies conditional execution behavior.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ExecutionDirectiveStatement.RetryCount">
            <summary>
            Gets the maximum number of times to retry this block.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ExecutionDirectiveStatement.Asynchronous">
            <summary>
            Gets a value indicating whether to execute this block asynchronously.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ExecutionDirectiveStatement.AsyncToken">
            <summary>
            Gets the name of the async token if one was supplied; this is always null when
            <see cref="P:Inedo.ExecutionEngine.ExecutionDirectiveStatement.Asynchronous"/> is false.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ExecutionDirectiveStatement.Timeout">
            <summary>
            Gets the timeout value of the block if one was supplied.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ExecutionDirectiveStatement.Flags">
            <summary>
            Gets additional flags.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ExecutionDirectiveStatement.Body">
            <summary>
            Gets the statements in the block.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.IterationBlockStatement">
            <summary>
            Statement that enumerates over a block.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.IterationBlockStatement.IterationVariableName">
            <summary>
            Gets the name of the loop iteration variable.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.IterationBlockStatement.Source">
            <summary>
            Gets the value to iterate over.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.IterationBlockStatement.Body">
            <summary>
            Gets the loop body.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.PredicateStatement">
            <summary>
            Statement which branches to a block depending on the value of a predicate.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.PredicateStatement.Predicate">
            <summary>
            Gets the predicate to evaluate.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.PredicateStatement.TrueStatements">
            <summary>
            Gets the statements to execute if the predicate evaluates to true.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.PredicateStatement.FalseStatements">
            <summary>
            Gets the statements to execute if the predicate does not evaluate to true.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.ScopedStatementBlock">
            <summary>
            Represents a grouping of statements and named methods.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.ScopedStatementBlock.#ctor(Inedo.ExecutionEngine.Statement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.ScopedStatementBlock"/> class.
            </summary>
            <param name="statements">Statements contained in the block.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="statements"/> is null.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.ScopedStatementBlock.#ctor(System.Collections.Generic.IEnumerable{Inedo.ExecutionEngine.Statement})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.ScopedStatementBlock"/> class.
            </summary>
            <param name="statements">Statements contained in the block.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="statements"/> is null.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.ScopedStatementBlock.#ctor(System.Collections.Generic.IEnumerable{Inedo.ExecutionEngine.Statement},System.Collections.Generic.IEnumerable{Inedo.ExecutionEngine.NamedTemplate})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.ScopedStatementBlock"/> class.
            </summary>
            <param name="statements">Statements contained in the block.</param>
            <param name="templates">Named methods contained in the block.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="statements"/> is null or <paramref name="templates"/> is null.</exception>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScopedStatementBlock.Statements">
            <summary>
            Gets the statements contained in the block.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScopedStatementBlock.Templates">
            <summary>
            Gets the named templates contained in the block.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScopedStatementBlock.Parent">
            <summary>
            Gets the parent statement if applicable; otherwise null.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.ScopedStatementBlock.Traverse">
            <summary>
            Performs a depth-first traversal of the statement block and returns the result as a sequence.
            </summary>
            <returns>Depth-first sequence of statement contexts.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.ScopedStatementBlock.EnumerateStatements">
            <summary>
            Returns a sequence of statements in the block in the same order that they will be executed in.
            </summary>
            <returns>Sequence of statements.</returns>
        </member>
        <member name="T:Inedo.ExecutionEngine.Statement">
            <summary>
            Represents a sequential control flow operation to perform.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Statement.LineNumber">
            <summary>
            Gets the original line number of the statement if it was generated from a script.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Statement.Description">
            <summary>
            Gets or sets the description applied to this statement.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.TryStatement">
            <summary>
            Try/catch block with error handling.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.TryStatement.Body">
            <summary>
            Gets the body of the try block.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.TryStatement.ErrorHandler">
            <summary>
            Gets the body of the catch block.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.ScriptTraversalContext">
            <summary>
            Used to facilitate script traversal.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScriptTraversalContext.Scope">
            <summary>
            Gets the scope of this context.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScriptTraversalContext.Template">
            <summary>
            Gets the template definition if this context represents the body of a template; otherwise null.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScriptTraversalContext.ParentContext">
            <summary>
            Gets the parent context if applicable; otherwise null.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.ScriptTraversalContext.IsTemplate">
            <summary>
            Gets a value indicating whether this context is a template body.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.ScriptTraversalContext.EnumerateContexts">
            <summary>
            Returns a sequence of all contexts including this one.
            </summary>
            <returns>All contexts including this one.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.ScriptTraversalContext.EnumerateScopes">
            <summary>
            Returns a sequence of all scopes including this one.
            </summary>
            <returns>All scopes including this one.</returns>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.ArrayTextValue">
            <summary>
            A literal array text value fragment of <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/>.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ArrayTextValue.#ctor(System.Collections.Generic.IEnumerable{Inedo.ExecutionEngine.Variables.TextValueFragment})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.ArrayTextValue"/> class.
            </summary>
            <param name="items">The items in the array.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ArrayTextValue.#ctor(Inedo.ExecutionEngine.Variables.TextValueFragment[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.ArrayTextValue"/> class.
            </summary>
            <param name="items">The items in the array.</param>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.ArrayTextValue.Items">
            <summary>
            Gets the items of the array.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.CompoundTextValue">
            <summary>
            Represents a concantenation of multiple scalar values.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.CompoundTextValue.#ctor(System.Collections.Generic.IEnumerable{Inedo.ExecutionEngine.Variables.TextValueFragment})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.CompoundTextValue"/> class.
            </summary>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> contains a non-scalar value or a compound value.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.CompoundTextValue.#ctor(Inedo.ExecutionEngine.Variables.TextValueFragment[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.CompoundTextValue"/> class.
            </summary>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> contains a non-scalar value.</exception>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.CompoundTextValue.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.FunctionTextValue">
            <summary>
            A function value fragment of a <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/>.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.FunctionTextValue.#ctor(Inedo.ExecutionEngine.RuntimeVariableName,System.Collections.Generic.IEnumerable{Inedo.ExecutionEngine.Variables.TextValueFragment})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.FunctionTextValue"/> class.
            </summary>
            <param name="functionName">The name of the function.</param>
            <param name="arguments">The function argument values.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.FunctionTextValue.#ctor(Inedo.ExecutionEngine.RuntimeVariableName)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.FunctionTextValue"/> class.
            </summary>
            <param name="functionName">The name of the function.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.FunctionTextValue.#ctor(Inedo.ExecutionEngine.RuntimeVariableName,Inedo.ExecutionEngine.Variables.TextValueFragment[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.FunctionTextValue"/> class.
            </summary>
            <param name="functionName">The name of the function.</param>
            <param name="arguments">The function argument values.</param>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.FunctionTextValue.FunctionName">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.FunctionTextValue.Arguments">
            <summary>
            Gets the function argument values.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.IEvaluatedValue">
            <summary>
            Indicates that a <see cref="T:Inedo.ExecutionEngine.Variables.TextValueFragment"/> must be evaluated.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.IEvaluatedValue.Type">
            <summary>
            Gets the expected type of the <see cref="T:Inedo.ExecutionEngine.Variables.TextValueFragment"/>.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.LiteralTextValue">
            <summary>
            A literal text value fragment of a <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/>.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.LiteralTextValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.LiteralTextValue"/> class.
            </summary>
            <param name="text">The literal text value.</param>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.LiteralTextValue.Text">
            <summary>
            Gets the literal text value.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.ProcessedString">
            <summary>
            Represents a string that has had variables and functions extracted.
            </summary>
        </member>
        <member name="F:Inedo.ExecutionEngine.Variables.ProcessedString.Empty">
            <summary>
            Represents an empty <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/>.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ProcessedString.#ctor(System.Collections.Generic.IEnumerable{Inedo.ExecutionEngine.Variables.TextValueFragment})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ProcessedString.#ctor(Inedo.ExecutionEngine.Variables.TextValueFragment[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.ProcessedString.Values">
            <summary>
            Gets the values that make up this string.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.ProcessedString.Value">
            <summary>
            Gets the root value of this string.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ProcessedString.Load(System.IO.TextReader)">
            <summary>
            Reads a <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/> from a <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns><see cref="T:System.IO.TextReader"/> contents as a <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null.</exception>
            <exception cref="T:System.FormatException">Syntax error parsing an expression.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ProcessedString.Parse(System.String)">
            <summary>
            Parses a string into a <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/>.
            </summary>
            <param name="s">The string to parse.</param>
            <returns><see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/> parsed from the specified string.</returns>
            <exception cref="T:System.FormatException">Syntax error parsing an expression.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ProcessedString.Evaluate(Inedo.ExecutionEngine.Variables.IVariableEvaluationContext)">
            <summary>
            Evaluates and replaces all variables and functions in the string and returns the result.
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>Result of the evaluation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
            <exception cref="T:Inedo.ExecutionEngine.Variables.VariableEvaluationException">A runtime value could not be resolved.</exception>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ProcessedString.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/> instance.
            </summary>
            <returns>Fully escaped string.</returns>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.ProcessedString.Write(System.IO.TextWriter)">
            <summary>
            Writes this <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/> instance to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The target <see cref="T:System.IO.TextWriter"/> to write this <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/> to.</param>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.TextValueFragment">
            <summary>
            Represents a fragment of a <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/>.
            </summary>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.VariableEvaluationException">
            <summary>
            Raised when there is a problem evaluating a <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/> instance.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.VariableEvaluationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.VariableEvaluationException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.ExecutionEngine.Variables.VariableEvaluationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ExecutionEngine.Variables.VariableEvaluationException"/> class.
            </summary>
            <param name="message">Message describing the error.</param>
        </member>
        <member name="T:Inedo.ExecutionEngine.Variables.VariableTextValue">
            <summary>
            A variable value fragment of a <see cref="T:Inedo.ExecutionEngine.Variables.ProcessedString"/>.
            </summary>
        </member>
        <member name="P:Inedo.ExecutionEngine.Variables.VariableTextValue.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
    </members>
</doc>
