<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InedoLib</name>
    </assembly>
    <members>
        <member name="T:Inedo.Data.DatabaseContext">
            <summary>
            Represents a lightweight connection to a database that provides transaction support.
            </summary>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.DatabaseContext"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.DatabaseContext"/> class.
            </summary>
            <param name="keepConnection">Value indicating whether to maintain an open connection between commands.</param>
        </member>
        <member name="P:Inedo.Data.DatabaseContext.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:Inedo.Data.DatabaseContext.Timeout">
            <summary>
            Gets or sets the timeout period in seconds.
            </summary>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.RollbackTransaction">
            <summary>
            Rollbacks the transaction.
            </summary>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.Dispose">
            <summary>
            Releases resources used by the connection.
            </summary>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the connection.
            </summary>
            <param name="disposing">Value indicating whether to dispose managed resources.</param>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.GetConnectionString">
            <summary>
            Returns the connection string for the database.
            </summary>
            <returns>Connection string for the database.</returns>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.CreateConnection">
            <summary>
            Creates an open connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.CreateConnectionAsync">
            <summary>
            Creates an open connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.CreateCommand(System.String,Inedo.Data.GenericDbParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="storedProcName">Name of the stored proc.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.Execute(System.String,Inedo.Data.GenericDbParameter[])">
            <summary>
            Executes the specified stored proc name.
            </summary>
            <param name="storedProcName">Name of the stored proc.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.ExecuteNonQuery(System.String,Inedo.Data.GenericDbParameter[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcName">Name of the stored proc.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.EnumerateTable``1(System.String,Inedo.Data.GenericDbParameter[])">
            <summary>
            Returns a streaming table result.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="storedProcName">Name of the stored proc.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            Streaming table result.
            </returns>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.ExecuteAsync(System.String,Inedo.Data.GenericDbParameter[])">
            <summary>
            Executes the specified stored proc name.
            </summary>
            <param name="storedProcName">Name of the stored proc.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.ExecuteScalarAsync``1(System.String,Inedo.Data.GenericDbParameter[],System.Int32)">
            <summary>
            Executes the specified stored proc name.
            </summary>
            <typeparam name="TResult">The type of the output parameter.</typeparam>
            <param name="storedProcName">The name of the stored procedure.</param>
            <param name="parameters">The parameters.</param>
            <param name="outParameterIndex">The index of the output parameter.</param>
            <returns>The output parameter value.</returns>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.ExecuteNonQueryAsync(System.String,Inedo.Data.GenericDbParameter[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcName">Name of the stored proc.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Inedo.Data.DatabaseContext.ExecuteTableAsync``1(System.String,Inedo.Data.GenericDbParameter[])">
            <summary>
            Returns a streaming table result.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
            <param name="storedProcName">Name of the stored proc.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            Streaming table result.
            </returns>
        </member>
        <member name="T:Inedo.Data.DataDomain`1">
            <summary>
            Represents a domain of type codes.
            </summary>
            <typeparam name="TDomain">The type of the domain.</typeparam>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.DataDomain`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.Validate(System.String)">
            <summary>
            Validates the specified type code.
            </summary>
            <param name="code">The type code to validate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="code"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.GetName(System.String)">
            <summary>
            Gets the name of the specified type code.
            </summary>
            <param name="code">The type code.</param>
            <returns>The name of the specified type code.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="code"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="code"/> is not valid.</exception>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.GetValues">
            <summary>
            Returns the values of the domain.
            </summary>
            <returns>Values of the domain.</returns>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.ToArray">
            <summary>
            Returns an array containing the domain values.
            </summary>
            <returns>Array containing the domain values.</returns>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.ParseName(System.String)">
            <summary>
            Returns the code which corresponds to the specified domain name.
            </summary>
            <param name="name">The domain name to parse.</param>
            <returns>Code associated with the specified domain name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is not valid.</exception>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.TryParseName(System.String)">
            <summary>
            Returns the code which corresponds to the specified domain name.
            </summary>
            <param name="name">The domain name to parse.</param>
            <returns>Code associated with the specified domain name if valid; otherwise null.</returns>
        </member>
        <member name="T:Inedo.Data.IDbDataResult">
            <summary>
            Represents the result of a database query.
            </summary>
        </member>
        <member name="P:Inedo.Data.IDbDataResult.Reader">
            <summary>
            Gets the <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
        </member>
        <member name="T:Inedo.Data.SqlServerDatabaseContext">
            <summary>
            Database Context for SQL Server
            </summary>
        </member>
        <member name="M:Inedo.Data.SqlServerDatabaseContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.SqlServerDatabaseContext"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Data.SqlServerDatabaseContext.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.SqlServerDatabaseContext"/> class.
            </summary>
            <param name="keepConnection">Value indicating whether to maintain an open connection between commands.</param>
        </member>
        <member name="M:Inedo.Data.SqlServerDatabaseContext.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns>The connection.</returns>
        </member>
        <member name="M:Inedo.Data.SqlServerDatabaseContext.CreateConnectionAsync">
            <summary>
            Creates the connection.
            </summary>
            <returns>The connection.</returns>
        </member>
        <member name="M:Inedo.Data.SqlServerDatabaseContext.CreateCommand(System.String,Inedo.Data.GenericDbParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="storedProcName">Name of the stored proc.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.Data.StrongDataReader">
            <summary>
            Used internally to generate strong rows.
            </summary>
        </member>
        <member name="M:Inedo.Data.StrongDataReader.Read``1(System.Func{Inedo.Data.IDbDataResult},System.Boolean)">
            <summary>
            Returns the enumeration of strong rows.
            </summary>
            <typeparam name="TRow">The type of the rows.</typeparam>
            <param name="getReader">The get reader factory.</param>
            <param name="disposeReader">Value indicating whether the underlying connection should be disposed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getReader"/> is null.</exception>
        </member>
        <member name="M:Inedo.Data.StrongDataReader.Read``1(System.Func{Inedo.Data.IDbDataResult})">
            <summary>
            Returns the enumeration of strong rows.
            </summary>
            <typeparam name="TRow">The type of the rows.</typeparam>
            <param name="getReader">The get reader factory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getReader"/> is null.</exception>
        </member>
        <member name="M:Inedo.Data.StrongDataReader.Read``1(Inedo.Data.IDbDataResult)">
            <summary>
            Returns the enumeration of strong rows.
            </summary>
            <typeparam name="TRow">The type of the rows.</typeparam>
            <param name="dbResult">The result.</param>
            <returns>The rows.</returns>
        </member>
        <member name="M:Inedo.Data.StrongDataReader.ReadAllAsync``1(Inedo.Data.IDbDataResult)">
            <summary>
            Returns the enumeration of strong rows.
            </summary>
            <typeparam name="TRow">The type of the rows.</typeparam>
            <param name="dbResult">The result.</param>
            <returns>The rows.</returns>
        </member>
        <member name="T:Inedo.Data.YNIndicator">
            <summary>
            Boolean type which is equivalent to the YNINDICATOR user defined type.
            </summary>
        </member>
        <member name="F:Inedo.Data.YNIndicator.Yes">
            <summary>
            The Yes (True) value.
            </summary>
        </member>
        <member name="F:Inedo.Data.YNIndicator.No">
            <summary>
            The No (False) value.
            </summary>
        </member>
        <member name="M:Inedo.Data.YNIndicator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.YNIndicator"/> struct.
            </summary>
            <param name="value">The value of the indicator.</param>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Equality(Inedo.Data.YNIndicator,Inedo.Data.YNIndicator)">
            <summary>
            ==s the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Inequality(Inedo.Data.YNIndicator,Inedo.Data.YNIndicator)">
            <summary>
            !=s the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_True(Inedo.Data.YNIndicator)">
            <summary>
            Trues the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_False(Inedo.Data.YNIndicator)">
            <summary>
            Falses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_LogicalNot(Inedo.Data.YNIndicator)">
            <summary>
            !s the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_BitwiseAnd(Inedo.Data.YNIndicator,Inedo.Data.YNIndicator)">
            <summary>
            &amp;s the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_BitwiseOr(Inedo.Data.YNIndicator,Inedo.Data.YNIndicator)">
            <summary>
            |s the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_ExclusiveOr(Inedo.Data.YNIndicator,Inedo.Data.YNIndicator)">
            <summary>
            ^s the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Implicit(Inedo.Data.YNIndicator)~System.String">
            <summary>
            Strings the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Implicit(Inedo.Data.YNIndicator)~System.Boolean">
            <summary>
            Booleans the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Implicit(System.Boolean)~Inedo.Data.YNIndicator">
            <summary>
            YNs the indicator.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Implicit(System.String)~Inedo.Data.YNIndicator">
            <summary>
            YNs the indicator.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.CompareTo(Inedo.Data.YNIndicator)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other" /> parameter.
            Zero
            This object is equal to <paramref name="other" />.
            Greater than zero
            This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.Equals(Inedo.Data.YNIndicator)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.Parse(System.String)">
            <summary>
            Parses the specified s.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.TryParse(System.String)">
            <summary>
            Tries the parse.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.Diagnostics.ConsoleMessenger">
            <summary>
            Standard console-based implementation of <see cref="T:Inedo.Diagnostics.IMessenger"/>.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.ConsoleMessenger.ConsoleLock">
            <summary>
            Instance to use for console synchronization.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Diagnostics.ConsoleMessenger"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.Message(Inedo.Diagnostics.IMessage)">
            <summary>
            Sends a message with the specified message level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.Message(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Sends a message with the specified message level.
            </summary>
            <param name="messageLevel">The level of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.Terminate">
            <summary>
            Terminates this instance.
            </summary>
        </member>
        <member name="T:Inedo.Diagnostics.ILogger">
            <summary>
            Provides logging for some kind of operation.
            </summary>
            <seealso cref="T:Inedo.Diagnostics.LoggerExtensions"/>
        </member>
        <member name="E:Inedo.Diagnostics.ILogger.MessageLogged">
            <summary>
            Occurs when a message is logged.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.ILogger.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the corresponding log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <seealso cref="T:Inedo.Diagnostics.LoggerExtensions"/>
        </member>
        <member name="T:Inedo.Diagnostics.LoggerExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Inedo.Diagnostics.ILogger"/> interface.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogDebug(Inedo.Diagnostics.ILogger,System.String)">
            <summary>
            Logs the specified message with a debug log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogDebug(Inedo.Diagnostics.ILogger,System.String,System.Object)">
            <summary>
            Logs the specified message with a debug log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogDebug(Inedo.Diagnostics.ILogger,System.String,System.Object,System.Object)">
            <summary>
            Logs the specified message with a debug log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <param name="arg1">The second argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogDebug(Inedo.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>
            Logs the specified message with a debug log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="args">The arguments for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogInformation(Inedo.Diagnostics.ILogger,System.String)">
            <summary>
            Logs the specified message with an information log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogInformation(Inedo.Diagnostics.ILogger,System.String,System.Object)">
            <summary>
            Logs the specified message with an information log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogInformation(Inedo.Diagnostics.ILogger,System.String,System.Object,System.Object)">
            <summary>
            Logs the specified message with an information log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <param name="arg1">The second argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogInformation(Inedo.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>
            Logs the specified message with an information log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="args">The arguments for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogWarning(Inedo.Diagnostics.ILogger,System.String)">
            <summary>
            Logs the specified message with a warning log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogWarning(Inedo.Diagnostics.ILogger,System.String,System.Object)">
            <summary>
            Logs the specified message with a warning log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogWarning(Inedo.Diagnostics.ILogger,System.String,System.Object,System.Object)">
            <summary>
            Logs the specified message with a warning log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <param name="arg1">The second argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogWarning(Inedo.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>
            Logs the specified message with a warning log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="args">The arguments for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogError(Inedo.Diagnostics.ILogger,System.String)">
            <summary>
            Logs the specified message with an error log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogError(Inedo.Diagnostics.ILogger,System.String,System.Object)">
            <summary>
            Logs the specified message with an error log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogError(Inedo.Diagnostics.ILogger,System.String,System.Object,System.Object)">
            <summary>
            Logs the specified message with an error log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <param name="arg1">The second argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.LoggerExtensions.LogError(Inedo.Diagnostics.ILogger,System.String,System.Object[])">
            <summary>
            Logs the specified message with an error log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="args">The arguments for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="T:Inedo.Diagnostics.IMessage">
            <summary>
            Represents a log message.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.IMessage.Level">
            <summary>
            Gets the message level.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.IMessage.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.IMessage.Category">
            <summary>
            Gets the message category.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.IMessage.Details">
            <summary>
            Gets extended information related to the message
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.IMessage.ContextData">
            <summary>
            Gets additional context data used by consumers of the logger.
            </summary>
            <remarks>Objects assigned to this property must be marked with the <see cref="T:System.SerializableAttribute"/></remarks>
        </member>
        <member name="T:Inedo.Diagnostics.IMessenger">
            <summary>
            Represents something which can deliver messages.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.IMessenger.Message(Inedo.Diagnostics.IMessage)">
            <summary>
            Sends a message with the specified message level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.IMessenger.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.IMessenger.Terminate">
            <summary>
            Terminates this instance.
            </summary>
        </member>
        <member name="T:Inedo.Diagnostics.Logger">
            <summary>
            Contains methods for writing log messages.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.AddMessenger(Inedo.Diagnostics.IMessenger)">
            <summary>
            Adds a messenger to the logger.
            </summary>
            <param name="messenger">The messenger to add.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.ClearMessengers">
            <summary>
            Removes all messengers from the logger.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Log(Inedo.Diagnostics.IMessage)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Log(Inedo.Diagnostics.MessageLevel,System.String,System.String,System.String)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="level">The level of the message.</param>
            <param name="message">The message text to log.</param>
            <param name="category">The category of the message.</param>
            <param name="details">Extra information about the message, possibly including a stack trace.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Debug(System.String)">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Debug"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Debug"/> and <see cref="M:System.String.Format(System.String,System.Object[])"/> formatting
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Information(System.String)">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Information"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Information(System.String,System.Object[])">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Information"/> and <see cref="M:System.String.Format(System.String,System.Object[])"/> formatting
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Warning(System.String)">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Warning"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Warning(System.String,System.Object[])">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Warning"/> and <see cref="M:System.String.Format(System.String,System.Object[])"/> formatting
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>        
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Error(System.String)">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Error"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Error"/> and <see cref="M:System.String.Format(System.String,System.Object[])"/> formatting
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:Inedo.Diagnostics.LogMessageEventArgs">
            <summary>
            Contains a log message and its severity level.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.LogMessageEventArgs.#ctor(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Diagnostics.LogMessageEventArgs"/> class.
            </summary>
            <param name="level">The severity of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.LogMessageEventArgs.#ctor(Inedo.Diagnostics.MessageLevel,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Diagnostics.LogMessageEventArgs"/> class.
            </summary>
            <param name="level">The severity of the message.</param>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
        </member>
        <member name="M:Inedo.Diagnostics.LogMessageEventArgs.#ctor(Inedo.Diagnostics.MessageLevel,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Diagnostics.LogMessageEventArgs"/> class.
            </summary>
            <param name="level">The severity of the message.</param>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:Inedo.Diagnostics.LogMessageEventArgs.#ctor(Inedo.Diagnostics.MessageLevel,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Diagnostics.LogMessageEventArgs"/> class.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
            <param name="details">The details.</param>
            <param name="contextData">The context data.</param>
        </member>
        <member name="P:Inedo.Diagnostics.LogMessageEventArgs.Level">
            <summary>
            Gets the severity of the message.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.LogMessageEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.LogMessageEventArgs.Category">
            <summary>
            Gets the category.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.LogMessageEventArgs.Details">
            <summary>
            Gets the details.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.LogMessageEventArgs.ContextData">
            <summary>
            Gets the context data.
            </summary>
        </member>
        <member name="T:Inedo.Diagnostics.MessageLevel">
            <summary>
            Indicates the significance of a logged message.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.MessageLevel.Debug">
            <summary>
            To be used for development debugging/analysis purposes.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.MessageLevel.Information">
            <summary>
            To be used for configuration debugging/analysis purposes.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.MessageLevel.Warning">
            <summary>
            An unexpected condition that is recoverable.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.MessageLevel.Error">
            <summary>
            An unexpected condition that is not recoverable.
            </summary>
        </member>
        <member name="T:Inedo.Diagnostics.SimpleLogMessage">
            <summary>
            Basic implementation of the <see cref="T:Inedo.Diagnostics.IMessage"/> interface.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.SimpleLogMessage.#ctor(Inedo.Diagnostics.MessageLevel,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Diagnostics.SimpleLogMessage"/> class.
            </summary>
            <param name="level">The message level.</param>
            <param name="message">The message text.</param>
            <param name="category">The message category.</param>
            <param name="details">The message details.</param>
            <param name="contextData">The context data.</param>
        </member>
        <member name="P:Inedo.Diagnostics.SimpleLogMessage.Level">
            <summary>
            Gets the message level.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.SimpleLogMessage.Message">
            <summary>
            Gets the message text.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.SimpleLogMessage.Category">
            <summary>
            Gets the message category.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.SimpleLogMessage.Details">
            <summary>
            Gets the message details.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.SimpleLogMessage.ContextData">
            <summary>
            Gets additional context data used by consumers of the logger.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.SimpleLogMessage.ToString">
            <summary>
            Returns a string repesentation of the message.
            </summary>
            <returns>String representation of the message.</returns>
        </member>
        <member name="T:Inedo.DictionaryExtensions">
            <summary>
            Contains dictionary related extension methods.
            </summary>
        </member>
        <member name="M:Inedo.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key, or <paramref name="defaultValue"/> if the key was not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The value to return if the key was not found.</param>
            <returns>The value associated with the specified key, or <paramref name="defaultValue"/> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null or <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Inedo.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key, or the default value of <typeparamref name="TValue"/> if the key was not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key whose value to get.</param>
            <returns>The value associated with the specified key, or the default value of <typeparamref name="TValue"/> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null or <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Inedo.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key, or <paramref name="defaultValue"/> if the key was not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The value to return if the key was not found.</param>
            <returns>The value associated with the specified key, or <paramref name="defaultValue"/> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null or <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Inedo.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key, or the default value of <typeparamref name="TValue"/> if the key was not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key whose value to get.</param>
            <returns>The value associated with the specified key, or the default value of <typeparamref name="TValue"/> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null or <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Inedo.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.SortedList{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key, or <paramref name="defaultValue"/> if the key was not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The value to return if the key was not found.</param>
            <returns>The value associated with the specified key, or <paramref name="defaultValue"/> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null or <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Inedo.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.SortedList{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key, or the default value of <typeparamref name="TValue"/> if the key was not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key whose value to get.</param>
            <returns>The value associated with the specified key, or the default value of <typeparamref name="TValue"/> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null or <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Inedo.DictionaryExtensions.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Attempts to remove the value that has the specified key from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to remove the value from.</param>
            <param name="key">The key whose value to remove.</param>
            <returns>True if an item with the specified key was removed; otherwise false.</returns>
        </member>
        <member name="T:Inedo.Documentation.ExampleAttribute">
            <summary>
            Contains an example for documentation.
            </summary>
        </member>
        <member name="M:Inedo.Documentation.ExampleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Documentation.ExampleAttribute"/> class.
            </summary>
            <param name="text">The exaple text.</param>
        </member>
        <member name="P:Inedo.Documentation.ExampleAttribute.Text">
            <summary>
            Gets the example text.
            </summary>
        </member>
        <member name="T:Inedo.Documentation.NoteAttribute">
            <summary>
            Represents a note.
            </summary>
        </member>
        <member name="M:Inedo.Documentation.NoteAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Documentation.NoteAttribute"/> class.
            </summary>
            <param name="text">The note.</param>
        </member>
        <member name="P:Inedo.Documentation.NoteAttribute.Text">
            <summary>
            Gets the note.
            </summary>
        </member>
        <member name="P:Inedo.Documentation.NoteAttribute.Heading">
            <summary>
            Gets or sets the heading.
            </summary>
        </member>
        <member name="T:Inedo.Documentation.PlaceholderTextAttribute">
            <summary>
            Represents the placeholder text used to document a field in a visual editor.
            </summary>
        </member>
        <member name="M:Inedo.Documentation.PlaceholderTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Documentation.PlaceholderTextAttribute"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Inedo.Documentation.PlaceholderTextAttribute.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="T:Inedo.Documentation.RequiredAttribute">
            <summary>
            Indicates that a value is required.
            </summary>
        </member>
        <member name="M:Inedo.Documentation.RequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Documentation.RequiredAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.Documentation.SeeAlsoAttribute">
            <summary>
            Specifies another type that is related to the target of this attribute.
            </summary>
        </member>
        <member name="M:Inedo.Documentation.SeeAlsoAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Documentation.SeeAlsoAttribute"/> class.
            </summary>
            <param name="type">The related type.</param>
        </member>
        <member name="P:Inedo.Documentation.SeeAlsoAttribute.Type">
            <summary>
            Gets the related type.
            </summary>
        </member>
        <member name="P:Inedo.Documentation.SeeAlsoAttribute.Comments">
            <summary>
            Gets or sets comments.
            </summary>
        </member>
        <member name="T:Inedo.Documentation.TagAttribute">
            <summary>
            Represents a tag, and the first tag on an operation is used as the documentation category.
            </summary>
        </member>
        <member name="M:Inedo.Documentation.TagAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Documentation.TagAttribute"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:Inedo.Documentation.TagAttribute.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.CoreRedirection">
            <summary>
            Contains methods for redirecting SDK assembly bindings.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.CoreRedirection.EnableAssemblyBinding(System.Reflection.AssemblyName[])">
            <summary>
            Enable SDK assembly binding redirection for the current AppDomain.
            </summary>
            <param name="redirectedAssemblies">Assemblies to redirect.</param>
        </member>
        <member name="T:Inedo.Extensibility.DeprecatedExtensionException">
            <summary>
            Raised when an extension is loaded that has been marked as deprecated.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.DeprecatedExtensionException.#ctor(System.Version,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.DeprecatedExtensionException"/> class.
            </summary>
            <param name="deprecatedVersion">The deprecated version.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Inedo.Extensibility.DeprecatedExtensionException.#ctor(System.Version,Inedo.Extensibility.ExtensionAssemblyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.DeprecatedExtensionException"/> class.
            </summary>
            <param name="deprecatedVersion">The deprecated version.</param>
            <param name="extensionInfo">The extension.</param>
        </member>
        <member name="M:Inedo.Extensibility.DeprecatedExtensionException.#ctor(System.Version,Inedo.Extensibility.ExtensionAssemblyInfo,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.DeprecatedExtensionException"/> class.
            </summary>
            <param name="deprecatedVersion">The deprecated version.</param>
            <param name="extensionInfo">The extension.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Inedo.Extensibility.DeprecatedInVersionAttribute">
            <summary>
            Marks an extension or class as deprecated by a specific version.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.DeprecatedInVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.DeprecatedInVersionAttribute"/> class.
            </summary>
            <param name="version">The version which deprecates the extension or class.</param>
        </member>
        <member name="P:Inedo.Extensibility.DeprecatedInVersionAttribute.DeprecatedVersion">
            <summary>
            Gets the version which deprecates the extension or class.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.DeprecatedInVersionAttribute.ErrorIfUsed">
            <summary>
            Gets or sets a value indicating whether the use of this extension or class should be an error or a warning.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.DeprecatedInVersionAttribute.Message">
            <summary>
            Gets or sets a string containing additional information about what to use in place of this.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionAssemblyInfo">
            <summary>
            Represents a loaded extension assembly.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionAssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionAssemblyInfo"/> class.
            </summary>
            <param name="assembly">The extension assembly.</param>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionAssemblyInfo.#ctor(System.Version,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionAssemblyInfo"/> class.
            </summary>
            <param name="version">The extension version.</param>
            <param name="name">The extension name.</param>
            <param name="description">The extension description.</param>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionAssemblyInfo.Version">
            <summary>
            Gets the extension version.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionAssemblyInfo.Name">
            <summary>
            Gets the extension name.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionAssemblyInfo.Description">
            <summary>
            Gets the extension version.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionComponent">
            <summary>
            Represents a class that implements a supported extensibility point.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionComponent"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionComponent.#ctor(System.Type,Inedo.Extensibility.InedoExtension)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionComponent"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="extension">The extension that contains this component.</param>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.Name">
            <summary>
            Gets the name of the component.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.Description">
            <summary>
            Gets the description of the component.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ComponentType">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ComponentBaseType">
            <summary>
            Gets the extensible base type implemented by the component, e.g. ActionBase, SourceControlProviderBase, etc.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ComponentTypeName">
            <summary>
            Gets the name of the component type.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ComponentTypeNameAndAssembly">
            <summary>
            Gets the name of the component type.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.IsDeprecated">
            <summary>
            Gets a value indicating whether the component has been deprecated.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.DeprecatedInVersion">
            <summary>
            Gets the version of BuildMaster which considers this component to be deprecated.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ErrorIfUsed">
            <summary>
            Gets a value indicating whether this component cannot be used at all.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.IsInstalled">
            <summary>
            Gets a value indicating whether this component is found in an installed extension, or whether
            the component's extension must be downloaded and installed before it can be used.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.Extension">
            <summary>
            Gets the extension that contains this component.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ExtensionName">
            <summary>
            Gets the name of the extension that contains this component.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ExtensionAssemblyName">
            <summary>
            Gets the name of the extension assembly.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ExtensionLogoRelativeUrl">
            <summary>
            Gets the logo URL for the associated extension, relative to the BuildMaster integration URL.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.Tags">
            <summary>
            Gets the tags associated with this component.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionComponent.ImplementedInterfaces">
            <summary>
            Gets the  interfaces implemented by the component.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionComponent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionComponentComparer">
            <summary>
            Represents a comparison operation for <see cref="T:Inedo.Extensibility.ExtensionComponent"/> instances.
            </summary>
        </member>
        <member name="F:Inedo.Extensibility.ExtensionComponentComparer.ComponentTypeNameOrdinal">
            <summary>
            An <see cref="T:Inedo.Extensibility.ExtensionComponentComparer"/> that tests the type name string for ordinal equality.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionComponentComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionComponentComparer"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionComponentComparer.Equals(Inedo.Extensibility.ExtensionComponent,Inedo.Extensibility.ExtensionComponent)">
            <summary>
            Tests for equality.
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>True if components are equal; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionComponentComparer.GetHashCode(Inedo.Extensibility.ExtensionComponent)">
            <summary>
            Gets a hash code.
            </summary>
            <param name="obj">The component.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionComponentFilterOptions">
            <summary>
            Specifies which components should be included.
            </summary>
        </member>
        <member name="F:Inedo.Extensibility.ExtensionComponentFilterOptions.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Inedo.Extensibility.ExtensionComponentFilterOptions.IncludeDeprecated">
            <summary>
            Include deprecated.
            </summary>
        </member>
        <member name="F:Inedo.Extensibility.ExtensionComponentFilterOptions.IncludeUninstalled">
            <summary>
            Include uninstalled.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionException">
            <summary>
            Base class for exceptions thrown within extensibility.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionException.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionException"/> class.
            </summary>
            <param name="assembly">The extension assembly.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionException.#ctor(Inedo.Extensibility.ExtensionAssemblyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionException"/> class.
            </summary>
            <param name="extensionInfo">The extension.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionException.#ctor(System.Reflection.Assembly,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionException"/> class.
            </summary>
            <param name="assembly">The extension assembly.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionException.#ctor(Inedo.Extensibility.ExtensionAssemblyInfo,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionException"/> class.
            </summary>
            <param name="extensionInfo">The extension.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionException.ExtensionVersion">
            <summary>
            Gets the version of the extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionException.ExtensionName">
            <summary>
            Gets the name of the extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionException.ExtensionDescription">
            <summary>
            Gets the description of the extension.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionIconAttribute">
            <summary>
            Specifies the URL of an extension or component's icon.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionIconAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionIconAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionIconAttribute.Url">
            <summary>
            Gets the URL of the icon.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionLoadResult">
            <summary>
            Contains information about a loaded extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionLoadResult.AssemblyPath">
            <summary>
            Gets the assembly path.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionLoadResult.ExtensionPath">
            <summary>
            Gets the extension file path.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionLoadResult.LoadExceptions">
            <summary>
            Gets the exceptions which were thrown when loading the extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionLoadResult.Loaded">
            <summary>
            Gets a value indicating whether the extension was loaded successfully.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionNotSupportedException">
            <summary>
            Raised when the extension is not supported in the current version of the software.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionNotSupportedException.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionNotSupportedException"/> class.
            </summary>
            <param name="requiredVersion">The required version.</param>
        </member>
        <member name="T:Inedo.Extensibility.InedoExtensionsManager">
            <summary>
            Used to manage extension assemblies and extensible components.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtensionsManager.#ctor(Inedo.Extensibility.ExtensionsManagerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.InedoExtensionsManager"/> class.
            </summary>
            <param name="configuration">The extensions manager configuration.</param>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtensionsManager.CoreAssembly">
            <summary>
            Gets the core assembly.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtensionsManager.CoreAssemblyName">
            <summary>
            Gets the core assembly name.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtensionsManager.SdkAssemblies">
            <summary>
            Gets the SDK assemblies.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtensionsManager.ExtensionsPath">
            <summary>
            Gets the extensions path.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtensionsManager.FileExtension">
            <summary>
            Gets the extension file extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtensionsManager.ExtensionsTempPath">
            <summary>
            Gets the extensions temp path.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtensionsManager.MinimumAllowedVersion">
            <summary>
            Gets the minimum allowed extension version.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtensionsManager.RedirectedAssemblies">
            <summary>
            Gets the redirected SDK assembly names.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtensionsManager.IsExtensibleType(System.Type)">
            <summary>
            Returns a value indicating whether he specified type is extensible.
            </summary>
            <param name="type">The type.</param>
            <returns>True if <paramref name="type"/> is extensible; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtensionsManager.GetComponentBaseType(System.Type)">
            <summary>
            Returns the base type of the specified component type.
            </summary>
            <param name="componentType">The type of the component.</param>
            <returns>Extensible base type if applicable; otherwise null.</returns>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtensionsManager.GetExtensions">
            <summary>
            Returns all of the extensions.
            </summary>
            <returns>All loaded extensions.</returns>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtensionsManager.GetComponent(System.Type)">
            <summary>
            Returns the extension component of the specified type.
            </summary>
            <param name="componentType">The type of the component</param>
            <returns>The extension component if found; otherwise null.</returns>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtensionsManager.GetAllComponents(Inedo.Extensibility.ExtensionComponentFilterOptions)">
            <summary>
            Returns all extension components.
            </summary>
            <param name="options">Filter criteria.</param>
            <returns>All components which match the specified filter criteria.</returns>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtensionsManager.GetComponentsByBaseClass``1(Inedo.Extensibility.ExtensionComponentFilterOptions)">
            <summary>
            Returns all extension components that inherit the specified base class.
            </summary>
            <typeparam name="TExtensible">The base class.</typeparam>
            <param name="options">Filter criteria.</param>
            <returns>All components which match the specified filter criteria.</returns>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtensionsManager.Initialize(System.String[])">
            <summary>
            Initializes the extensions manager.
            </summary>
            <param name="builtIn">Names of built in extensions.</param>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionsManagerConfiguration">
            <summary>
            Contains global extensions manager initialization information.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionsManagerConfiguration.Core">
            <summary>
            Gets or sets the core assembly.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionsManagerConfiguration.RedirectedAssemblyNames">
            <summary>
            Gets or sets the redirected assembly names.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionsManagerConfiguration.ExtensionsPath">
            <summary>
            Gets or sets the extensions path.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionsManagerConfiguration.ExtensionsTempPath">
            <summary>
            Gets or sets the extensions temp path.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionsManagerConfiguration.FileExtension">
            <summary>
            Gets or sets the extension file extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionsManagerConfiguration.MinimumExtensionVersion">
            <summary>
            Gets or sets the minimum supported version of extensions.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionsManagerConfiguration.ExtensibleTypes">
            <summary>
            Gets or sets the extensible base types.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.ExtensionsManagerHostAttribute">
            <summary>
            Marks an assembly as the entry point for an application which hosts an extensions manager.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.ExtensionsManagerHostAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.ExtensionsManagerHostAttribute"/> class.
            </summary>
            <param name="extensionsManagerHostType">Type which implements the <see cref="T:Inedo.Extensibility.IExtensionsManagerHost"/> interface.</param>
        </member>
        <member name="P:Inedo.Extensibility.ExtensionsManagerHostAttribute.ExtensionsManagerHostType">
            <summary>
            Gets the type which implements <see cref="T:Inedo.Extensibility.IExtensionsManagerHost"/>.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.IExtensionsManagerHost">
            <summary>
            Represents an environment which hosts an extensions manager.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.IExtensionsManagerHost.ExtensionsPath">
            <summary>
            Gets the extensions path.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.IExtensionsManagerHost.ExtensionsTempPath">
            <summary>
            Gets the extensions temp path.
            </summary>
        </member>
        <member name="T:Inedo.Extensibility.InedoExtension">
            <summary>
            Represents an extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtension.Name">
            <summary>
            Gets the name of the extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtension.Description">
            <summary>
            Gets the extension's description.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtension.Assembly">
            <summary>
            Gets the extension's assembly.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtension.Path">
            <summary>
            Gets the location of the extension on disk.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtension.IconUrl">
            <summary>
            Gets the URL of the custom icon for this extension, or null if there is none.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtension.LoadResult">
            <summary>
            Gets information about whether the extension loaded successfully.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtension.ExtensionsManager">
            <summary>
            Gets the extensions manager which loaded this extension.
            </summary>
        </member>
        <member name="P:Inedo.Extensibility.InedoExtension.AllComponents">
            <summary>
            Gets a collection of all components defined by this extension.
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtension.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Extensibility.InedoExtension.RemoveComponents(System.Collections.Generic.IEnumerable{Inedo.Extensibility.ExtensionComponent})">
            <summary>
            Removes components from the extension.
            </summary>
            <param name="components">The components to remove.</param>
        </member>
        <member name="T:Inedo.Extensibility.RequiredVersionAttribute">
            <summary>
            Marks an extension or class as requiring a specific minimum version of the product
            </summary>
        </member>
        <member name="M:Inedo.Extensibility.RequiredVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Extensibility.RequiredVersionAttribute"/> class.
            </summary>
            <param name="minimumVersion">The minimum version.</param>
        </member>
        <member name="P:Inedo.Extensibility.RequiredVersionAttribute.MinimumVersion">
            <summary>
            Gets the minimum required BuildMaster version.
            </summary>
        </member>
        <member name="T:Inedo.InedoLib">
            <summary>
            Contains settings and configuration for InedoLib.
            </summary>
        </member>
        <member name="P:Inedo.InedoLib.ApplicationName">
            <summary>
            Gets or sets the application name.
            </summary>
        </member>
        <member name="P:Inedo.InedoLib.ApplicationVersion">
            <summary>
            Gets or sets the application version.
            </summary>
        </member>
        <member name="P:Inedo.InedoLib.UTF8Encoding">
            <summary>
            Gets an instance of <see cref="T:System.Text.UTF8Encoding"/> that does not emit
            UTF8 identifier bytes.
            </summary>
        </member>
        <member name="T:Inedo.InedoLib.Util">
            <summary>
            Contains utility methods.
            </summary>
        </member>
        <member name="T:Inedo.InedoLib.Util.JavaScript">
            <summary>
            Contains JavaScript-related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.WriteJson(System.IO.TextWriter,System.Object)">
            <summary>
            Writes an object as JSON-serialized data to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> used to write the JSON data.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.ToJson(System.Object)">
            <summary>
            Returns a JSON-format string of a serialized object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>JSON-formatted string representation of the object.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.JsonEncode(System.String)">
            <summary>
            Escapes characters necessary to encode the string in JSON format.
            </summary>
            <param name="s">String to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.Literal(System.String)">
            <summary>
            Returns an instance representing literal JavaScript.
            </summary>
            <param name="s">The literal.</param>
            <returns>Instance representing the literal.</returns>
        </member>
        <member name="T:Inedo.InedoLib.Util.JavaScript.IJavaScriptLiteral">
            <summary>
            Represents literal JavaScript text.
            </summary>
        </member>
        <member name="P:Inedo.InedoLib.Util.JavaScript.IJavaScriptLiteral.LiteralText">
            <summary>
            Gets the literal text.
            </summary>
        </member>
        <member name="T:Inedo.InedoLib.Util.JavaScript.JavaScriptLiteral">
            <summary>
            Represents literal JavaScript text.
            </summary>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.JavaScriptLiteral.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.InedoLib.Util.JavaScript.JavaScriptLiteral"/> class.
            </summary>
            <param name="literal">The literal.</param>
        </member>
        <member name="P:Inedo.InedoLib.Util.JavaScript.JavaScriptLiteral.LiteralText">
            <summary>
            Gets the literal text.
            </summary>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.JavaScriptLiteral.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.AH">
            <summary>
            Contains all-purpose helper methods.
            </summary>
        </member>
        <member name="M:Inedo.AH.ParseDate(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent
            using <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/>; if the string is not a valid date time, null is returned.
            </summary>
            <param name="dateTimeString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.DateTime"/> value if parsing was successful; otherwise null.</returns>
        </member>
        <member name="M:Inedo.AH.RelativeDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Calculates the relative time from the specified dates
            </summary>
            <param name="referenceFromDate">The reference <see cref="T:System.DateTime"/> used to calculate relative time. Typically, this is <see cref="P:System.DateTime.Now"/>.</param>
            <param name="toDate">The <see cref="T:System.DateTime"/> with which the reference value will be compared.</param>
            <returns><see cref="T:System.String"/> containing relative time if dates are valid, otherwise an empty string.</returns>
        </member>
        <member name="M:Inedo.AH.FormatSize(System.Int64)">
            <summary>
            Returns a string with a compact approximate formatted data size in bytes, KB, MB, or GB.
            </summary>
            <param name="size">Size in bytes.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Inedo.AH.ParseInt(System.String)">
            <summary>
            Converts the specified string representation of an integer to its <see cref="T:System.Int32"/> equivalent
            using <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>. If the string is not a valid <see cref="T:System.Int32"/>, <c>null</c>
            is returned.
            </summary>
            <param name="intString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.Int32"/> value if parsing was successful; otherwise null.</returns>
        </member>
        <member name="M:Inedo.AH.NullIf(System.Object,System.Object)">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null or DBNull.Value); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <returns>Null reference if the two specified parameters are equal (or if either are null or DBNull.Value); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.AH.NullIf(System.String,System.String)">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.AH.NullIf``1(System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <typeparam name="T">The type of parameter to compare.</typeparam>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.AH.NullIf``1(``0,System.Nullable{``0})">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <typeparam name="T">The type of parameter to compare.</typeparam>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.AH.CoalesceString(System.String,System.String)">
            <summary>
            Returns the first non-null and non-<see cref="F:System.String.Empty"/> expression among the specified arguments.
            </summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>First non-null and non-<see cref="F:System.String.Empty"/> value.</returns>
        </member>
        <member name="M:Inedo.AH.CoalesceString``2(``0,``1)">
            <summary>
            Returns the first non-null and non-<see cref="F:System.String.Empty"/> expression among the specified arguments.
            </summary>
            <typeparam name="T1">First argument type.</typeparam>
            <typeparam name="T2">Second argument type.</typeparam>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>First non-null and non-<see cref="F:System.String.Empty"/> value.</returns>
        </member>
        <member name="M:Inedo.AH.CoalesceString(System.String[])">
            <summary>
            Returns the first non-null and non-<see cref="F:System.String.Empty"/> expression among its arguments.
            </summary>
            <param name="args">Objects to convert to strings and test for null or empty.</param>
            <returns>First non-null and non-<see cref="F:System.String.Empty"/> value.</returns>
        </member>
        <member name="M:Inedo.AH.CoalesceStr(System.String[])">
            <summary>
            Returns the first non-null and non-<see cref="F:System.String.Empty"/> expression among its arguments.
            </summary>
            <param name="args">Objects to convert to strings and test for null or empty.</param>
            <returns>First non-null and non-<see cref="F:System.String.Empty"/> value.</returns>
        </member>
        <member name="M:Inedo.AH.ConcatNE(System.Object[])">
            <summary>
            Returns <see cref="F:System.String.Empty"/> when one of the arguments is null, <see cref="F:System.DBNull.Value"/>, or <see cref="F:System.String.Empty"/>; 
            otherwise, returns a concatenation of the arguments.
            </summary>
            <param name="args">Arguments to concatenate.</param>
            <returns>Concatenated string or <see cref="F:System.String.Empty"/> if an argument is <c>null</c>, 
            <see cref="F:System.DBNull.Value"/>, or <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:Inedo.AH.Switch``2(``0)">
            <summary>
            Begins a switch expression.
            </summary>
            <typeparam name="TArg">The type of the input argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="input">The input value.</param>
            <returns>The switch expression.</returns>
        </member>
        <member name="M:Inedo.AH.Switch``2(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Begins a switch expression.
            </summary>
            <typeparam name="TArg">The type of the input argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="input">The input value.</param>
            <param name="comparer">Equality comparer to use for the input value.</param>
            <returns>The switch expression.</returns>
        </member>
        <member name="M:Inedo.AH.GetHashCode(System.Byte[])">
            <summary>
            Returns a hash code for arbitrary binary data.
            </summary>
            <param name="array">The array containing the data to hash.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Inedo.AH.Equals(System.Byte[],System.Byte[])">
            <summary>
            Returns a value indicating whether two byte arrays contain the same data.
            </summary>
            <param name="array1">The first array.</param>
            <param name="array2">The second array.</param>
            <returns>True if arrays contain the same data; otherwise false.</returns>
        </member>
        <member name="T:Inedo.AH.ISwitch`1">
            <summary>
            Represents a switch expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Inedo.AH.ISwitch`1.End">
            <summary>
            Ends the expression and returns the result.
            </summary>
            <returns>The result of the expression.</returns>
            <exception cref="T:System.InvalidOperationException">A matching case was not found and there was no default specified.</exception>
        </member>
        <member name="T:Inedo.AH.IDefaultSwitch`2">
            <summary>
            Represents a switch expression without a default value.
            </summary>
            <typeparam name="TArg">The type of the input argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Inedo.AH.IDefaultSwitch`2.Case(`0,`1)">
            <summary>
            Specifies the result of a specified input value.
            </summary>
            <param name="value">The input value.</param>
            <param name="result">The result to return for the specified input value.</param>
            <returns>The switch expression.</returns>
        </member>
        <member name="M:Inedo.AH.IDefaultSwitch`2.Case(`0,System.Func{`1})">
            <summary>
            Specifies the result of a specified input value.
            </summary>
            <param name="value">The input value.</param>
            <param name="getResult">The delegate which returns a result for the specified input value.</param>
            <returns>The switch expression.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="getResult"/> is null.</exception>
        </member>
        <member name="M:Inedo.AH.IDefaultSwitch`2.Default(`1)">
            <summary>
            Specifies the result to return when none of the input values match.
            </summary>
            <param name="result">The result to return.</param>
            <returns>The switch expression.</returns>
        </member>
        <member name="M:Inedo.AH.IDefaultSwitch`2.Default(System.Func{`1})">
            <summary>
            Specifies the result to return when none of the input values match.
            </summary>
            <param name="getResult">The delegate which returns a result.</param>
            <returns>The switch expression.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="getResult"/> is null.</exception>
        </member>
        <member name="T:Inedo.AH.ISwitch`2">
            <summary>
            Represents a switch expression that has a default value.
            </summary>
            <typeparam name="TArg">The type of the input argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Inedo.AH.ISwitch`2.Case(`0,`1)">
            <summary>
            Specifies the result of a specified input value.
            </summary>
            <param name="value">The input value.</param>
            <param name="result">The result to return for the specified input value.</param>
            <returns>The switch expression.</returns>
        </member>
        <member name="M:Inedo.AH.ISwitch`2.Case(`0,System.Func{`1})">
            <summary>
            Specifies the result of a specified input value.
            </summary>
            <param name="value">The input value.</param>
            <param name="getResult">The delegate which returns a result for the specified input value.</param>
            <returns>The switch expression.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="getResult"/> is null.</exception>
        </member>
        <member name="M:Inedo.AH.ExtractZip(System.String,System.String)">
            <summary>
            Extracts a zip file to the specified directory.
            </summary>
            <param name="zipFile">The path of the zip file to extract.</param>
            <param name="targetDirectory">The directory to extract the zip file to.</param>
            <remarks>
            If <paramref name="targetDirectory"/> does not exist, it is created.
            </remarks>
        </member>
        <member name="M:Inedo.AH.ExtractZip(System.IO.Stream,System.String)">
            <summary>
            Extracts a zip file to the specified directory.
            </summary>
            <param name="zipStream">The backing stream of the zip file to extract.</param>
            <param name="targetDirectory">The directory to extract the zip file to.</param>
            <remarks>
            If <paramref name="targetDirectory"/> does not exist, it is created.
            </remarks>
        </member>
        <member name="M:Inedo.AH.ExtractZip(System.String,System.String,System.Predicate{System.IO.Compression.ZipArchiveEntry})">
            <summary>
            Extracts a zip file to the specified directory.
            </summary>
            <param name="zipFile">The path of the zip file to extract.</param>
            <param name="targetDirectory">The directory to extract the zip file to.</param>
            <param name="shouldExtract">Delegate invoked to determine if an entry should be extracted. May be null.</param>
            <remarks>
            If <paramref name="targetDirectory"/> does not exist, it is created.
            </remarks>
        </member>
        <member name="M:Inedo.AH.ExtractZip(System.IO.Stream,System.String,System.Predicate{System.IO.Compression.ZipArchiveEntry})">
            <summary>
            Extracts a zip file to the specified directory.
            </summary>
            <param name="zipStream">The backing stream of the zip file to extract.</param>
            <param name="targetDirectory">The directory to extract the zip file to.</param>
            <param name="shouldExtract">Delegate invoked to determine if an entry should be extracted. May be null.</param>
            <remarks>
            If <paramref name="targetDirectory"/> does not exist, it is created.
            </remarks>
        </member>
        <member name="T:Inedo.AhReflection">
            <summary>
            A collection of Additional Helper methods to perform reflection related tasks.
            </summary>
        </member>
        <member name="M:Inedo.AhReflection.GetGenericArgumentsFromAncestor(System.Type,System.Type)">
            <summary>
            Returns the generic arguments from an ancestor with the specified generic type definition from the specified type, or an empty type array if the 
            type's ancestors do not implement the specified generic type definition.
            </summary>
            <param name="type">Type to inspect.</param>
            <param name="genericTypeDefinition">A generic type definition.</param>
            <returns>A type arguments array or an empty array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null or <paramref name="genericTypeDefinition"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="genericTypeDefinition"/> is not a generic type definition.</exception>
        </member>
        <member name="M:Inedo.AhReflection.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Returns a value indicating whether a type implements an interface.
            </summary>
            <param name="toCheck">The type to check.</param>
            <param name="iface">The interface to search for.</param>
            <returns>True if the type implements the interface; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">An argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="iface"/> parameter is not an interface type.</exception>
        </member>
        <member name="M:Inedo.AhReflection.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns an attribute (typed <typeparamref name="T"/>) if it is present on a member.
            </summary>
            <typeparam name="T">Type of attribute to return.</typeparam>
            <param name="member">Member to search for the attribute on.</param>
            <returns>Attribute if it was found; otherwise null.</returns>
        </member>
        <member name="M:Inedo.AhReflection.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns all instances of an attribute type if it is present on a member.
            </summary>
            <typeparam name="T">Type fo the attribute to return.</typeparam>
            <param name="member">Member to search for the attributes on.</param>
            <returns>Attributes that were found.</returns>
        </member>
        <member name="M:Inedo.AhReflection.GetBaseTypes(System.Type)">
            <summary>
            Returns an enumeration of the specified type and all its base types.
            </summary>
            <param name="type">The type to enumerate.</param>
            <returns>The specified type and all its base types.</returns>
        </member>
        <member name="M:Inedo.AhReflection.GetMethodWithSignature(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns the first matching method with a signature compatible to the specified argument types.
            </summary>
            <param name="type">The object type which contains the method.</param>
            <param name="methodName">The name of the method.</param>
            <param name="argTypes">The types of the arguments supplied to the method.</param>
            <returns>First matching <see cref="T:System.Reflection.MethodInfo"/> or null if no matching method was found.</returns>
        </member>
        <member name="T:Inedo.ReflectionExtensions">
            <summary>
            Contains reflection related extension methods.
            </summary>
        </member>
        <member name="M:Inedo.ReflectionExtensions.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns an attribute (typed <typeparamref name="T"/>) if it is present on a member.
            </summary>
            <typeparam name="T">Type of attribute to return.</typeparam>
            <param name="member">Member to search for the attribute on.</param>
            <returns>Attribute if it was found; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member"/> is null.</exception>
        </member>
        <member name="M:Inedo.ReflectionExtensions.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns the attributes (typed <typeparamref name="T"/>) if any are present on a member.
            </summary>
            <typeparam name="T">Type of attribute to return.</typeparam>
            <param name="member">Member to search for the attribute on.</param>
            <returns>Attributes that were found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member"/> is null.</exception>
        </member>
        <member name="M:Inedo.ReflectionExtensions.GetGenericArgumentsFromAncestor(System.Type,System.Type)">
            <summary>
            Returns the generic arguments from an ancestor with the specified generic type definition from the specified type, or an empty type array if the 
            type's ancestors do not implement the specified generic type definition.
            </summary>
            <param name="type">Type to inspect.</param>
            <param name="genericTypeDefinition">A generic type definition.</param>
            <returns>A type arguments array or an empty array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null or <paramref name="genericTypeDefinition"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="genericTypeDefinition"/> is not a generic type definition.</exception>
        </member>
        <member name="T:Inedo.EnumerableExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Inedo.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a hash set from the specified source.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source enumeration.</param>
            <returns>Set created from the source elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Inedo.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a hash set from the specified source using the specified equality comparer.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source enumeration.</param>
            <param name="comparer">The equality comparer to use.</param>
            <returns>Set created from the source elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Inedo.EnumerableExtensions.ToSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a sorted set from the specified source.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source enumeration.</param>
            <returns>Set created from the source elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Inedo.EnumerableExtensions.ToSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a sorted set from the specified source using the specified equality comparer.
            </summary>
            <typeparam name="TSource">The type of the source element.</typeparam>
            <param name="source">The source enumeration.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>Set created from the source elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Inedo.EnumerableExtensions.ToSortedList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a sorted list from the specified source.
            </summary>
            <typeparam name="TSource">Type of the source collection.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <param name="source">The source collection.</param>
            <param name="keySelector">The key selector.</param>
            <returns>Sorted list.</returns>
        </member>
        <member name="M:Inedo.EnumerableExtensions.ToSortedList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Creates a sorted list from the specified source.
            </summary>
            <typeparam name="TSource">Type of the source collection.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <param name="source">The source collection.</param>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The key comparer.</param>
            <returns>Sorted list.</returns>
        </member>
        <member name="M:Inedo.EnumerableExtensions.ToSortedList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a sorted list from the specified source.
            </summary>
            <typeparam name="TSource">Type of the source collection.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The source collection.</param>
            <param name="keySelector">The key selector.</param>
            <param name="valueSelector">The value selector.</param>
            <returns>Sorted list.</returns>
        </member>
        <member name="M:Inedo.EnumerableExtensions.ToSortedList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Creates a sorted list from the specified source.
            </summary>
            <typeparam name="TSource">Type of the source collection.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The source collection.</param>
            <param name="keySelector">The key selector.</param>
            <param name="valueSelector">The value selector.</param>
            <param name="comparer">The key comparer.</param>
            <returns>Sorted list.</returns>
        </member>
        <member name="T:Inedo.DateTimeExtensions">
            <summary>
            Contains <see cref="T:System.DateTime"/> related extensions methods.
            </summary>
        </member>
        <member name="M:Inedo.DateTimeExtensions.SetKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> instance with the specified value for the <see cref="P:System.DateTime.Kind"/> property.
            </summary>
            <param name="d">The original <see cref="T:System.DateTime"/> instance.</param>
            <param name="kind">The desired value of the <see cref="P:System.DateTime.Kind"/> property.</param>
            <returns><see cref="T:System.DateTime"/> instance with the specified value for the <see cref="P:System.DateTime.Kind"/> property.</returns>
        </member>
        <member name="T:Inedo.ProcessExtensions">
            <summary>
            Contains process related extension methods.
            </summary>
        </member>
        <member name="M:Inedo.ProcessExtensions.DelayUntilExitAsync(System.Diagnostics.Process,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delays until the process has exited or the specified timeout has been reached.
            </summary>
            <param name="process">The process.</param>
            <param name="timeout">The timeout period in milliseconds.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="process"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than zero.</exception>
        </member>
        <member name="M:Inedo.ProcessExtensions.DelayUntilExitAsync(System.Diagnostics.Process,System.Nullable{System.Int32})">
            <summary>
            Delays until the process has exited or the specified timeout has been reached.
            </summary>
            <param name="process">The process.</param>
            <param name="timeout">The timeout period in milliseconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="process"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than zero.</exception>
        </member>
        <member name="M:Inedo.ProcessExtensions.DelayUntilExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Delays until the process has exited.
            </summary>
            <param name="process">The process.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="process"/> is null.</exception>
        </member>
        <member name="M:Inedo.ProcessExtensions.DelayUntilExitAsync(System.Diagnostics.Process)">
            <summary>
            Delays until the process has exited.
            </summary>
            <param name="process">The process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="process"/> is null.</exception>
        </member>
        <member name="T:Inedo.TextReaderExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:Inedo.TextReaderExtensions.CopyTo(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Copies the text from <paramref name="reader"/> to <paramref name="writer"/>.
            </summary>
            <param name="reader">The source <see cref="T:System.IO.TextReader"/>.</param>
            <param name="writer">The destination <see cref="T:System.IO.TextWriter"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null or <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:Inedo.TextReaderExtensions.CopyTo(System.IO.TextReader,System.IO.TextWriter,System.Int32)">
            <summary>
            Copies the text from <paramref name="reader"/> to <paramref name="writer"/>.
            </summary>
            <param name="reader">The source <see cref="T:System.IO.TextReader"/>.</param>
            <param name="writer">The destination <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="bufferSize">The size of the buffer to use in characters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null or <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is invalid.</exception>
        </member>
        <member name="M:Inedo.TextReaderExtensions.CopyToAsync(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Copies the text from <paramref name="reader"/> to <paramref name="writer"/>.
            </summary>
            <param name="reader">The source <see cref="T:System.IO.TextReader"/>.</param>
            <param name="writer">The destination <see cref="T:System.IO.TextWriter"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null or <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:Inedo.TextReaderExtensions.CopyToAsync(System.IO.TextReader,System.IO.TextWriter,System.Int32)">
            <summary>
            Copies the text from <paramref name="reader"/> to <paramref name="writer"/>.
            </summary>
            <param name="reader">The source <see cref="T:System.IO.TextReader"/>.</param>
            <param name="writer">The destination <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="bufferSize">The size of the buffer to use in characters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null or <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is invalid.</exception>
        </member>
        <member name="M:Inedo.TextReaderExtensions.CopyToAsync(System.IO.TextReader,System.IO.TextWriter,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Copies the text from <paramref name="reader"/> to <paramref name="writer"/>.
            </summary>
            <param name="reader">The source <see cref="T:System.IO.TextReader"/>.</param>
            <param name="writer">The destination <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="bufferSize">The size of the buffer to use in characters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null or <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is invalid.</exception>
        </member>
        <member name="T:Inedo.ILGeneratorExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Reflection.Emit.ILGenerator"/>.
            </summary>
        </member>
        <member name="M:Inedo.ILGeneratorExtensions.EmitLoadInt32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits a load integer instruction.
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Inedo.ZipArchiveEntryExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.IO.Compression.ZipArchiveEntry"/>.
            </summary>
        </member>
        <member name="M:Inedo.ZipArchiveEntryExtensions.IsDirectory(System.IO.Compression.ZipArchiveEntry)">
            <summary>
            Returns a value indicating whether the entry represents a directory.
            </summary>
            <param name="entry">The entry.</param>
            <returns>True if the entry is a directory; false if it is a file.</returns>
        </member>
        <member name="T:Inedo.IO.DirectoryEx">
            <summary>
            A set of static utility methods used for directories without the MAX_PATH limitation.
            </summary>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.Clear(System.String)">
            <summary>
            Deletes all files and directories contained within the specified path, but does
            not delete the containing directory itself.
            </summary>
            <param name="path">The directory to clear.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.Create(System.String)">
            <summary>
            Creates the specified directory if it does not already exist.
            </summary>
            <param name="path">The path of the directory to create.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.Delete(System.String)">
            <summary>
            Deletes the specified directory and all of its contents.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.Exists(System.String)">
            <summary>
            Returns a value indicating whether the specified directory exists.
            </summary>
            <param name="path">The path of the directory to check for.</param>
            <returns>True if the directory exists; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.EnumerateDirectories(System.String)">
            <summary>
            Returns a sequence containing all of the directories within the specified directory (top-level only; does not recurse).
            </summary>
            <param name="path">The path of the directory to iterate.</param>
            <returns>All subdirectories contained within the specified directory.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.EnumerateFiles(System.String)">
            <summary>
            Returns a sequence containing all of the files within the specified directory (top-level only; does not recurse).
            </summary>
            <param name="path">The path of the directory to iterate.</param>
            <returns>All files contained within the specified directory.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.GetFileSystemInfos(System.String,Inedo.IO.MaskingContext)">
            <summary>
            Returns a sequence containing all of the items within the specified directory that match the specified mask.
            </summary>
            <param name="path">The path of the directory to iterate.</param>
            <param name="mask">The mask which specifies what to include and exclude from the results.</param>
            <returns>List of file system entries that match the specified mask.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty or <paramref name="mask"/> is null.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.EnumerateMounts">
            <summary>
            Retrieves the drive names of all logical drives on a computer.
            </summary>
            <returns>The drive names of all logical drives on a computer.</returns>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.GetInfo(System.String)">
            <summary>
            Returns a <see cref="T:Inedo.IO.SlimDirectoryInfo"/> instance representing the directory with the specified path.
            </summary>
            <param name="path">Path of the directory.</param>
            <returns><see cref="T:Inedo.IO.SlimDirectoryInfo"/> instance representing the specified directory.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.Move(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourcePath">The path of the source directory.</param>
            <param name="targetPath">The path of the target directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> is null or empty or <paramref name="targetPath"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.DirectoryEx.CreateSymbolicLink(System.String,System.String)">
            <summary>
            Creates a symbolic link to a directory.
            </summary>
            <param name="linkDirectoryName">The full path of the new symbolic link to create.</param>
            <param name="targetDirectoryName">The path of the link target; this may be absolute or relative to <paramref name="linkDirectoryName"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="linkDirectoryName"/> is null or empty or <paramref name="targetDirectoryName"/> is null or empty.</exception>
        </member>
        <member name="T:Inedo.IO.FileEx">
            <summary>
            A set of static utility methods used for files without the MAX_PATH limitation.
            </summary>
        </member>
        <member name="M:Inedo.IO.FileEx.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file.
            </summary>
            <param name="sourceFileName">The source file name.</param>
            <param name="targetFileName">The target file name.</param>
            <param name="overwrite">Value indicating whether overwriting is allowed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> is null or empty or <paramref name="targetFileName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceFileName">The source file name.</param>
            <param name="targetFileName">The target file name.</param>
            <param name="overwrite">Value indicating whether overwriting is allowed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> is null or empty or <paramref name="targetFileName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.Delete(System.String)">
            <summary>
            Deletes a file if it exists.
            </summary>
            <param name="path">Path of the file to delete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.Exists(System.String)">
            <summary>
            Returns a value indicating whether a file exists.
            </summary>
            <param name="path">Path of the file to check for.</param>
            <returns>True if the file exists; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.GetInfo(System.String)">
            <summary>
            Returns a <see cref="T:Inedo.IO.SlimFileInfo"/> representing the file at the specified path.
            </summary>
            <param name="path">The path of the file.</param>
            <returns><see cref="T:Inedo.IO.SlimFileInfo"/> representing the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens or creates the specified file.
            </summary>
            <param name="fileName">The name of the file to open.</param>
            <param name="fileMode">The file mode.</param>
            <param name="fileAccess">The file access.</param>
            <param name="fileShare">The file sharing rules.</param>
            <returns><see cref="T:System.IO.FileStream"/> backed by the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions)">
            <summary>
            Opens or creates the specified file.
            </summary>
            <param name="fileName">The name of the file to open.</param>
            <param name="fileMode">The file mode.</param>
            <param name="fileAccess">The file access.</param>
            <param name="fileShare">The file sharing rules.</param>
            <param name="fileOptions">The file options.</param>
            <returns><see cref="T:System.IO.FileStream"/> backed by the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of the specified file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="attributes">The attributes to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.GetAttributes(System.String)">
            <summary>
            Returns the attributes of the specified file.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The attributes of the file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last write time of the file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="date">The last write time of the file in UTC.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.IO.FileEx.CreateSymbolicLink(System.String,System.String)">
            <summary>
            Creates a symbolic link to a file.
            </summary>
            <param name="linkFileName">The full path of the new symbolic link to create.</param>
            <param name="targetFileName">The path of the link target; this may be absolute or relative to <paramref name="linkFileName"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="linkFileName"/> is null or empty or <paramref name="targetFileName"/> is null or empty.</exception>
        </member>
        <member name="T:Inedo.IO.MaskingContext">
            <summary>
            Represents a masking context that applies include and exclude mask strings against 
            an enumeration of paths or <see cref="T:Inedo.IO.SlimFileSystemInfo"/> objects.
            </summary>
        </member>
        <member name="F:Inedo.IO.MaskingContext.IncludeAll">
            <summary>
            Mask which will include everything recursively.
            </summary>
        </member>
        <member name="F:Inedo.IO.MaskingContext.Default">
            <summary>
            Mask which will include everything in the top level.
            </summary>
        </member>
        <member name="M:Inedo.IO.MaskingContext.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.MaskingContext"/> class.
            </summary>
            <param name="includes">Include masks.</param>
            <param name="excludes">Exclude masks.</param>
        </member>
        <member name="P:Inedo.IO.MaskingContext.Includes">
            <summary>
            Gets the include masks.
            </summary>
        </member>
        <member name="P:Inedo.IO.MaskingContext.Excludes">
            <summary>
            Gets the exclude masks.
            </summary>
        </member>
        <member name="P:Inedo.IO.MaskingContext.MatchAll">
            <summary>
            Gets a value indicating whether only a single include mask of ** was specified without any exclusions, 
            thus indicating that everything will match.
            </summary>
        </member>
        <member name="P:Inedo.IO.MaskingContext.Recurse">
            <summary>
            Gets a value indicating whether any include mask contains **, which means enumeration of the file system
            would require recursion.
            </summary>
        </member>
        <member name="M:Inedo.IO.MaskingContext.IsMatch(System.String)">
            <summary>
            Returns a value indicating whether the specified path meets the filter criteria.
            </summary>
            <param name="path">The path.</param>
            <returns>True if the path meets the criteria; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Inedo.IO.MaskingContext.ToString">
            <summary>
            Returns a string representation of the mask.
            </summary>
            <returns>String representation of the mask.</returns>
        </member>
        <member name="T:Inedo.IO.PathEx">
            <summary>
            Contains static file system path-related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.IO.PathEx.GetDirectoryName(System.String)">
            <summary>
            Same as <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/>, but preserves the directory separator character.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>
            A <see cref="T:System.String"/> containing directory information for path, or null if path
            denotes a root directory, is the empty string (""), or is null.
            </returns>
        </member>
        <member name="M:Inedo.IO.PathEx.GetFileName(System.String)">
            <summary>
            Same as <see cref="M:System.IO.Path.GetFileName(System.String)"/>, but preserves the directory separator character.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>
            A <see cref="T:System.String"/>consisting of the characters after the last directory character in path.
            </returns>
        </member>
        <member name="M:Inedo.IO.PathEx.Combine(System.String,System.String)">
            <summary>
            Same as <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>, but attempts to preserve the directory separator character.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>
            A string containing the combined paths. If one of the specified paths is
            a zero-length string, this method returns the other path. If path2 contains
            an absolute path, this method returns path2.
            </returns>
        </member>
        <member name="M:Inedo.IO.PathEx.Combine(System.Char,System.String,System.String)">
            <summary>
            Same as <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>, but specifying the directory separator character.
            </summary>
            <param name="separator">The directory separator character.</param>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>
            A string containing the combined paths. If one of the specified paths is
            a zero-length string, this method returns the other path. If path2 contains
            an absolute path, this method returns path2.
            </returns>
        </member>
        <member name="M:Inedo.IO.PathEx.Combine(System.String[])">
            <summary>
            Combines multiple path components into one string.
            </summary>
            <param name="paths">The path components to combine.</param>
            <returns>Combined path string.</returns>
        </member>
        <member name="M:Inedo.IO.PathEx.IsPathRooted(System.String)">
            <summary>
            Returns a value indicating whether the specified path is rooted.
            </summary>
            <param name="path">The path.</param>
            <returns>True if the path is rooted; otherwise false.</returns>
        </member>
        <member name="M:Inedo.IO.PathEx.EnsureTrailingDirectorySeparator(System.String)">
            <summary>
            Returns the specified with with an appended directory separator character if one
            was not already present.
            </summary>
            <param name="path">The path.</param>
            <returns>Path with trailing directory separator. If <paramref name="path"/> is null or empty, it is returned unchanged.</returns>
        </member>
        <member name="M:Inedo.IO.PathEx.MakeCanonical(System.String,System.Char)">
            <summary>
            Returns a path that has some common issues fixed, such as extra directory separator
            characters or incorrect directory separator characters.
            </summary>
            <param name="path">The path to be made canonical.</param>
            <param name="separator">Correct directory separator for the path.</param>
            <returns>Canonical path.</returns>
        </member>
        <member name="M:Inedo.IO.PathEx.MakeCanonical(System.String)">
            <summary>
            Returns a path that has some common issues fixed, such as extra directory separator
            characters or incorrect directory separator characters.
            </summary>
            <param name="path">The path to be made canonical.</param>
            <returns>Canonical path.</returns>
        </member>
        <member name="M:Inedo.IO.PathEx.DetectDirectorySeparator(System.String)">
            <summary>
            Returns the best guess for the canonical directory separator in a path.
            </summary>
            <param name="path">The path.</param>
            <returns>Best guess for the path's directory separator.</returns>
        </member>
        <member name="T:Inedo.IO.PositionStream">
            <summary>
            Represents a stream that has a position and possibly a length.
            </summary>
        </member>
        <member name="M:Inedo.IO.PositionStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.PositionStream"/> class.
            </summary>
            <param name="baseStream">The stream to wrap.</param>
        </member>
        <member name="M:Inedo.IO.PositionStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.PositionStream"/> class.
            </summary>
            <param name="baseStream">The stream to wrap.</param>
            <param name="length">The length of the wrapped stream in bytes.</param>
        </member>
        <member name="P:Inedo.IO.PositionStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Inedo.IO.PositionStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Inedo.IO.PositionStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Inedo.IO.PositionStream.Length">
            <summary>
            Gets the length of the current stream in bytes.
            </summary>
        </member>
        <member name="P:Inedo.IO.PositionStream.Position">
            <summary>
            Gets or sets the position of the current stream in bytes.
            </summary>
        </member>
        <member name="M:Inedo.IO.PositionStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Inedo.IO.PositionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Inedo.IO.PositionStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Inedo.IO.PositionStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Inedo.IO.PositionStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Inedo.IO.PositionStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Inedo.IO.PositionStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="M:Inedo.IO.PositionStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.IO.Stream and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.IO.PositionStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a sequence of bytes from the current stream and advances
            the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">The buffer to write the data into.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult
            parameter contains the total number of bytes read into the buffer. The result
            value can be less than the number of bytes requested if the number of bytes currently
            available is less than the requested number, or it can be 0 (zero) if the end
            of the stream has been reached.
            </returns>
        </member>
        <member name="M:Inedo.IO.PositionStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream, advances the
            current position within this stream by the number of bytes written, and monitors
            cancellation requests.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Inedo.IO.PositionStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the bytes from the current stream and writes them to another
            stream, using a specified buffer size and cancellation token.
            </summary>
            <param name="destination">The stream to which the contents of the current stream will be copied.</param>
            <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>A task that represents the asynchronous copy operation.</returns>
        </member>
        <member name="M:Inedo.IO.PositionStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for this stream, causes any buffered data to
            be written to the underlying device, and monitors cancellation requests.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>A task that represents the asynchronous flush operation.</returns>
        </member>
        <member name="T:Inedo.IO.SlimDirectoryInfo">
            <summary>
            Similar to <see cref="T:System.IO.DirectoryInfo"/>, but handles long paths.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimDirectoryInfo.#ctor(System.String,System.DateTime,System.IO.FileAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimDirectoryInfo"/> class.
            </summary>
            <param name="path">The full path of the directory.</param>
            <param name="lastWriteTime">The last write time.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:Inedo.IO.SlimFileInfo">
            <summary>
            Similar to <see cref="T:System.IO.FileInfo"/>, but handles long paths.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimFileInfo"/> class.
            </summary>
            <param name="path">The path of the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Inedo.IO.SlimFileInfo.#ctor(System.String,System.DateTime,System.Int64,System.IO.FileAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimFileInfo"/> class.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="lastWriteTime">The last write time of the file in UTC.</param>
            <param name="size">The length of the file in bytes.</param>
            <param name="attributes">The file attributes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="P:Inedo.IO.SlimFileInfo.Size">
            <summary>
            Gets the size of the file in bytes.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimFileInfo.IsReadOnly">
            <summary>
            Gets a value indicating whether the file is read only.
            </summary>
        </member>
        <member name="T:Inedo.IO.SlimFileSystemInfo">
            <summary>
            Represents either a file or a directory.
            </summary>
            <seealso cref="T:Inedo.IO.SlimFileInfo"/>
            <seealso cref="T:Inedo.IO.SlimDirectoryInfo"/>
        </member>
        <member name="P:Inedo.IO.SlimFileSystemInfo.Name">
            <summary>
            For files, gets the name of the file. For directories, gets the name 
            of the last directory in the hierarchy if a hierarchy exists. 
            Otherwise, gets the name of the directory.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets the time, in coordinated universal time (UTC), when the 
            current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimFileSystemInfo.Attributes">
            <summary>
            Gets the file system attributes of the directory.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimFileSystemInfo.DirectoryName">
            <summary>
            Gets the name of the parent directory.
            </summary>
        </member>
        <member name="T:Inedo.IO.SlimMemoryStream">
            <summary>
            Stream backed by memory that is designed for minimal memory fragmentation.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimMemoryStream"/> class.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimMemoryStream"/> class.
            </summary>
            <param name="initialData">The initial data used to populate the stream.</param>
            <param name="writable">Value indicating whether the stream should be writable.</param>
            <remarks>
            If <paramref name="writable"/> is true, a copy of <paramref name="initialData"/> is made;
            otherwise, the <see cref="T:Inedo.IO.SlimMemoryStream"/> will reference <paramref name="initialData"/> directly.
            </remarks>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.#ctor(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimMemoryStream"/> class.
            </summary>
            <param name="initialData">The initial data used to populate the stream.</param>
            <param name="writable">Value indicating whether the stream should be writable.</param>
            <param name="copy">Value indiating whether the <paramref name="initialData"/> array should be copied or referenced.</param>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.Capacity">
            <summary>
            Gets the current capacity of the <see cref="T:Inedo.IO.SlimMemoryStream"/>.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.CopyTo(System.IO.Stream)">
            <summary>
            Copies the contents of this stream starting from the current position to another stream.
            </summary>
            <param name="destination">The target stream.</param>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all of the data in the <see cref="T:Inedo.IO.SlimMemoryStream"/> to a byte array.
            </summary>
            <param name="buffer">Array into which the data will be copied.</param>
            <param name="offset">Initial offset in <paramref name="buffer"/> to start writing bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.ToArray">
            <summary>
            Copies all of the data in the <see cref="T:Inedo.IO.SlimMemoryStream"/> to a byte array.
            </summary>
            <returns>Array containing the stream data.</returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Inedo.IO.SlimMemoryStream" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Copies the contents of this stream starting from the current position to another stream.
            </summary>
            <param name="destination">The target stream.</param>
            <param name="bufferSize">The desired buffer size.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:Inedo.IO.TemporaryStream">
            <summary>
            Contains methods for working with temporary streams.
            </summary>
            <remarks>
            This will used either a <see cref="T:Inedo.IO.SlimMemoryStream"/> or a <see cref="T:System.IO.FileStream"/>
            backed by <see cref="M:System.IO.Path.GetTempFileName"/>, depending on the expected length passed to <see cref="M:Inedo.IO.TemporaryStream.Create(System.Int64)"/>.
            </remarks>
        </member>
        <member name="M:Inedo.IO.TemporaryStream.Create(System.Int64)">
            <summary>
            Returns a temporary stream best suited for storing data of the specified length.
            </summary>
            <param name="expectedLength">Length of data which is expected to be written to the stream.</param>
            <returns>Stream back by data that will be accessible only until it is closed.</returns>
        </member>
        <member name="T:Inedo.LazyAsync`1">
            <summary>
            A lazily-initialized value that can be initialized either synchronously or asynchronously.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Inedo.LazyAsync`1.#ctor(System.Func{`0},System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.LazyAsync`1"/> class.
            </summary>
            <param name="getValue">Delegate which creates the value synchronously.</param>
            <param name="getValueAsync">Delegate which creates the value asynchronously.</param>
        </member>
        <member name="P:Inedo.LazyAsync`1.IsValueCreated">
            <summary>
            Gets a value indicating whether the <typeparamref name="T"/> has already been created.
            </summary>
        </member>
        <member name="P:Inedo.LazyAsync`1.ValueAsync">
            <summary>
            Gets the lazily-initialized value synchronously.
            </summary>
        </member>
        <member name="P:Inedo.LazyAsync`1.Value">
            <summary>
            Gets the lazily-initialized value asynchronously.
            </summary>
        </member>
        <member name="T:Inedo.LazyDisposableAsync`1">
            <summary>
            A lazily-initialized value that can be initialized either synchronously or asynchronously and disposed.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Inedo.LazyDisposableAsync`1.#ctor(System.Func{`0},System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.LazyAsync`1"/> class.
            </summary>
            <param name="getValue">Delegate which creates the value synchronously.</param>
            <param name="getValueAsync">Delegate which creates the value asynchronously.</param>
        </member>
        <member name="M:Inedo.LazyDisposableAsync`1.Dispose">
            <summary>
            Disposes the result if it has been created.
            </summary>
        </member>
        <member name="M:Inedo.LazyDisposableAsync`1.Dispose(System.Boolean)">
            <summary>
            Disposes the result if it has been created.
            </summary>
            <param name="disposing">True if managed resources should be disposed; otherwise false.</param>
        </member>
        <member name="T:Inedo.LazyRegex">
            <summary>
            Represents a lazily-initialized immutable regular expression.
            </summary>
            <remarks>
            This is just a convenience wrapper for <see cref="T:System.Lazy`1"/> to allow regular expressions
            to be compiled on first use instead of as part of a static type initializer or something similar.
            </remarks>
        </member>
        <member name="M:Inedo.LazyRegex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.LazyRegex"/> class.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.LazyRegex"/> class.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Matches(System.String)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression.
            </summary>
            <param name="input">The string to search for a match.</param>
            <returns>A collection of the <see cref="T:Match"/> objects found by the search.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Matches(System.String,System.Int32)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="startat">The character position in the input string at which to start the search.</param>
            <returns>A collection of the <see cref="T:Match"/> objects found by the search.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the length of input.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Match(System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the regular expression specified in the <see cref="T:Inedo.LazyRegex"/> constructor.
            </summary>
            <param name="input">The string to search for a match.</param>
            <returns>An object that contains information about the match.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Match(System.String,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="startat">The zero-based character position at which to start the search.</param>
            <returns>An object that contains information about the match.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the length of <paramref name="input"/>.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Match(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.
            </summary>
            <param name="input">The string to be tested for a match.</param>
            <param name="beginning">The zero-based character position in the input string at which to begin the search.</param>
            <param name="length">The number of characters in the substring to include in the search.</param>
            <returns>An object that contains information about the match.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="beginning"/> is less than zero or greater than the length of <paramref name="input"/>.-or-<paramref name="length"/> is less than zero or greater than the length of <paramref name="input"/>.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.IsMatch(System.String)">
            <summary>
            Indicates whether the regular expression specified in the <see cref="T:Inedo.LazyRegex"/> constructor finds a match in a specified input string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.IsMatch(System.String,System.Int32)">
            <summary>
            Indicates whether the regular expression specified in the <see cref="T:Inedo.LazyRegex"/> constructor finds a match in the specified input string, beginning at the specified starting position in the string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="startat">The character position at which to start the search.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the length of <paramref name="input"/>.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Within a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="evaluator"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Replace(System.String,System.String)">
            <summary>
            Within a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="replacement">The replacement string.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="replacement"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
            <summary>
            Within a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
            <param name="count">The maximum number of times the replacement will occur.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="evaluator"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Replace(System.String,System.String,System.Int32)">
            <summary>
            Within a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="replacement">The replacement string.</param>
            <param name="count">The maximum number of times the replacement can occur.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="replacement"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
            <summary>
            Within a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
            <param name="count">The maximum number of times the replacement will occur.</param>
            <param name="startat">The character position in the input string where the search begins.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="evaluator"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the length of <paramref name="input"/>.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Within a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="replacement">The replacement string.</param>
            <param name="count">The maximum number of times the replacement can occur.</param>
            <param name="startat">The character position in the input string where the search begins.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="replacement"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the length of <paramref name="input"/>.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Split(System.String)">
            <summary>
            Splits the specified input string at the positions defined by a regular expression pattern specified in the <see cref="T:Inedo.LazyRegex"/> constructor.
            </summary>
            <param name="input">The string to split.</param>
            <returns> An array of strings.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Split(System.String,System.Int32)">
            <summary>
            Splits the specified input string a specified maximum number of times at the positions defined by a regular expression specified in the <see cref="T:Inedo.LazyRegex"/> constructor.
            </summary>
            <param name="input">The string to split.</param>
            <param name="count">The maximum number of times the split can occur.</param>
            <returns> An array of strings.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
        </member>
        <member name="M:Inedo.LazyRegex.Split(System.String,System.Int32,System.Int32)">
            <summary>
            Splits the specified input string a specified maximum number of times at the positions defined by a regular expression specified in the <see cref="T:Inedo.LazyRegex"/> constructor. The search for the regular expression pattern starts at a specified character position in the input string.
            </summary>
            <param name="input">The string to split.</param>
            <param name="count">The maximum number of times the split can occur.</param>
            <param name="startat">The character position in the input string where the search will begin.</param>
            <returns> An array of strings.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the length of <paramref name="input"/>.</exception>
        </member>
        <member name="T:Inedo.Licensing.ActivationException">
            <summary>
            The exception that is thrown when an activation error occurs.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.ActivationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ActivationException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.ActivationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ActivationException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Inedo.Licensing.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ActivationException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Inedo.Licensing.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ActivationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Inedo.Licensing.BitReader">
            <summary>
            Contains utility methods for reading bits from an array.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.BitReader.GetBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns the boolean value at the specified index.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <returns>The boolean value.</returns>
        </member>
        <member name="M:Inedo.Licensing.BitReader.GetInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns the integer value at the specified index.
            </summary>
            <param name="data">The data.</param>
            <param name="startIndex">The index.</param>
            <param name="length">The number of bits to read.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="T:Inedo.Licensing.BuildMasterLicenseKey">
            <summary>
            Represents a BuildMaster license key.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.BuildMasterLicenseKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.BuildMasterLicenseKey" /> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.LicenseType">
            <summary>
            Gets the license type.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxUsers">
            <summary>
            Gets the maximum users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxServers">
            <summary>
            Gets the maximum servers.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxLimitedUsers">
            <summary>
            Gets the maximum limited users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxApprovalUsers">
            <summary>
            Gets the maximum approval users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxFullUsers">
            <summary>
            Gets the maximum full users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.AllowExtensions">
            <summary>
            Gets a value indicating whether extensions are allowed.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxUsersReserved">
            <summary>
            Gets the maximum reserved users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.IsTrial">
            <summary>
            Gets a value indicating whether this is a trial key.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ServerGroups">
            <summary>
            Gets a value indicating whether server groups are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.Ldap">
            <summary>
            Gets a value indicating whether LDAP is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ScopedPrivileges">
            <summary>
            Gets a value indicating whether scoped privileges are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxApplications">
            <summary>
            Gets the maximum applications.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MultipleActiveBuilds">
            <summary>
            Gets a value indicating whether multiple active builds are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ConfigFilesUnlimited">
            <summary>
            Gets a value indicating whether config files are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ConfigFileTemplates">
            <summary>
            Gets a value indicating whether config file templates are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.DatabasesUnlimited">
            <summary>
            Gets a value indicating whether database providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ChangeScriptDeployer">
            <summary>
            Gets a value indicating whether the change script deployer is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.DeployablesUnlimited">
            <summary>
            Gets a value indicating whether deployables are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.DeployableDependencies">
            <summary>
            Gets a value indicating whether deployable dependencies are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.DeployablesImportedUnlimited">
            <summary>
            Gets a value indicating whether imported deployables are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.WorkflowsUnlimited">
            <summary>
            Gets a value indicating whether workflows are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.BuildSchedulesUnlimited">
            <summary>
            Gets a value indicating whether build schedules are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.EnvironmentsUnlimited">
            <summary>
            Gets a value indicating whether the environments are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ChangeControls">
            <summary>
            Gets a value indicating whether change controls are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.GroupApprovals">
            <summary>
            Gets a value indicating whether group approvals are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.PromotionRequirements">
            <summary>
            Gets a value indicating whether promotion requirements are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.IssueTrackersUnlimited">
            <summary>
            Gets a value indicating whether issue tracking providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.SourceControlUnlimited">
            <summary>
            Gets a value indicating whether source control providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.UserClassesActive">
            <summary>
            Gets a value indicating whether user classes are available.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.BuildMasterLicenseType">
            <summary>
            Specifies the type of a BuildMaster license.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.BuildMasterLicenseType.Enterprise">
            <summary>
            BuildMaster Enterprise.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.BuildMasterLicenseType.EnterpriseTrial">
            <summary>
            BuildMaster Enterprise Trial.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.BuildMasterLicenseType.Free">
            <summary>
            BuildMaster Free.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.BuildMasterLicenseType.Plus">
            <summary>
            BuildMaster Plus.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.BuildMasterMultiLicenseKey">
            <summary>
            Represents multiple BuildMaster license keys that act as one.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.BuildMasterMultiLicenseKey.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.BuildMasterMultiLicenseKey" /> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.LicenseType">
            <summary>
            Gets the license type.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.CreatedDate">
            <summary>
            Gets the date the key was created.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxUsers">
            <summary>
            Gets the maximum users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxServers">
            <summary>
            Gets the maximum servers.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxFullUsers">
            <summary>
            Gets the maximum full users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxLimitedUsers">
            <summary>
            Gets the maximum limited users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxApprovalUsers">
            <summary>
            Gets the maximum approval users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxApplications">
            <summary>
            Gets the maximum applications.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.IsTrial">
            <summary>
            Gets a value indicating whether this is a trial key.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.EnvironmentsUnlimited">
            <summary>
            Gets a value indicating whether the environments are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ServerGroups">
            <summary>
            Gets a value indicating whether server groups are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.Ldap">
            <summary>
            Gets a value indicating whether LDAP is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ScopedPrivileges">
            <summary>
            Gets a value indicating whether scoped privileges are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MultipleActiveBuilds">
            <summary>
            Gets a value indicating whether multiple active builds are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ConfigFilesUnlimited">
            <summary>
            Gets a value indicating whether config files are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ConfigFileTemplates">
            <summary>
            Gets a value indicating whether config file templates are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.DatabasesUnlimited">
            <summary>
            Gets a value indicating whether database providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ChangeScriptDeployer">
            <summary>
            Gets a value indicating whether the change script deployer is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.DeployablesUnlimited">
            <summary>
            Gets a value indicating whether deployables are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.DeployableDependencies">
            <summary>
            Gets a value indicating whether deployable dependencies are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.DeployablesImportedUnlimited">
            <summary>
            Gets a value indicating whether imported deployables are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.WorkflowsUnlimited">
            <summary>
            Gets a value indicating whether workflows are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.BuildSchedulesUnlimited">
            <summary>
            Gets a value indicating whether build schedules are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ChangeControls">
            <summary>
            Gets a value indicating whether change controls are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.GroupApprovals">
            <summary>
            Gets a value indicating whether group approvals are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.PromotionRequirements">
            <summary>
            Gets a value indicating whether promotion requirements are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.IssueTrackersUnlimited">
            <summary>
            Gets a value indicating whether issue tracking providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.SourceControlUnlimited">
            <summary>
            Gets a value indicating whether source control providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.UserClassesActive">
            <summary>
            Gets a value indicating whether user classes are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.CanonicalKey">
            <summary>
            Gets the first enabled non-plus key.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.BuildMasterMultiLicenseKey.IsKeyEnabled(Inedo.Licensing.BuildMasterLicenseKey)">
            <summary>
            Returns a value indicating whether a given key should be treated as enabled.
            </summary>
            <param name="key">The key to test.</param>
            <returns>True if the key should be considered enabled; otherwise false.</returns>
        </member>
        <member name="T:Inedo.Licensing.ILicenseable">
            <summary>
            Describes something which can be licensed.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.ILicenseable.LicenseRequired">
            <summary>
            Gets a value indicating whether a valid license is required.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicenseDetails">
            <summary>
            Contains information about a license key and its current status.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.RawLicenseKey">
            <summary>
            Gets the string used to initialize this instance.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.LicenseKey">
            <summary>
            Gets the license key parsed from the raw string.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.IsLicenseKeyValid">
            <summary>
            Gets a value indicating whether the string in the <see cref="P:Inedo.Licensing.LicenseDetails.RawLicenseKey"/> property parses to a valid license key.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.IsLicenseKeyExpired">
            <summary>
            Gets a value indicating whether the license key has expired.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.LicenseKeyStatusDescription">
            <summary>
            Gets a friendly description of the current status of the license key.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.ActivationCode">
            <summary>
            Gets the current activation code for the license key.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.InActivationGracePeriod">
            <summary>
            Gets a value indicating whether the activation grace period is active.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.IsActivationCodeValid">
            <summary>
            Gets a value indicating whether the activation code is valid.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.ActivationCodeStatusDescription">
            <summary>
            Gets a friendly description of the current status of the activation code.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails.IsValid">
            <summary>
            Gets a value indicating whether the license and activation is currently valid.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicenseDetails`1">
            <summary>
            Contains information about a license key and its current status.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseDetails`1.LicenseKey">
            <summary>
            Gets the license key parsed from the raw string.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicenseKeyBase">
            <summary>
            Represents a license key.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.Create(System.String)">
            <summary>
            Creates a <see cref="T:Inedo.Licensing.LicenseKeyBase"/> instance from a license key <see cref="T:System.String"/>.
            </summary>
            <param name="key">The license key.</param>
            <returns>An instance of the license key, or null if the key does not match any known product key formats.</returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicenseKeyBase"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.#ctor(Inedo.Licensing.LicenseKeyBase.KeyFormatAndBytes)">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.Licensing.LicenseKeyBase"/> class from being created.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.#ctor(Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicenseKeyBase"/> class.
            </summary>
            <param name="keyFormat">The key format.</param>
            <param name="data">The data.</param>
            <param name="validate">if set to <c>true</c> [validate].</param>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.KeyFormat">
            <summary>
            Gets the key format.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CustomerId">
            <summary>
            Gets the customer id.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.MajorVersion">
            <summary>
            Gets the major version.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.MinorVersion">
            <summary>
            Gets the minor version.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.LicenseType">
            <summary>
            Gets the type of the license.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.Crc">
            <summary>
            Gets the CRC.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ExpiresDateYear">
            <summary>
            Gets the expires date year.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ExpiresDateMonth">
            <summary>
            Gets the expires date month.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ExpiresDateDay">
            <summary>
            Gets the expires date day.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CreatedDateYear">
            <summary>
            Gets the created date year.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CreatedDateMonth">
            <summary>
            Gets the created date month.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CreatedDateDay">
            <summary>
            Gets the created date day.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ProductCode">
            <summary>
            Gets the product code.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ExpiresDate">
            <summary>
            Gets the expires date.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CreatedDate">
            <summary>
            Gets the created date.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.IsEnabled">
            <summary>
            Gets a value indicating whether the key is currently enabled.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.GetKeyFormat(System.String)">
            <summary>
            Gets the key format.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.GetKeyBytes(System.String)">
            <summary>
            Gets the key bytes.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.ValidateBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates the between.
            </summary>
            <param name="a">A.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.ReadInt32(System.Int32,System.Int32)">
            <summary>
            Reads the entry.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.ReadBoolean(System.Int32)">
            <summary>
            Reads the boolean.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat">
            <summary>
            Format of the license key.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat.X128">
            <summary>
            Original, BuildMaster-only format.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat.X160">
            <summary>
            BuildMaster 2.5 (only) and up.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat.X160V2">
            <summary>
            Multiple-product key.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat.Unknown">
            <summary>
            Unknown format.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.Equals(Inedo.Licensing.LicenseKeyBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.op_Equality(Inedo.Licensing.LicenseKeyBase,Inedo.Licensing.LicenseKeyBase)">
            <summary>
            Determines whether two license keys have the same underlying data.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.op_Inequality(Inedo.Licensing.LicenseKeyBase,Inedo.Licensing.LicenseKeyBase)">
            <summary>
            Determines whether two license keys do not have the same underlying data.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Inedo.Licensing.LicenseNotRequiredAttribute">
            <summary>
            Indicates that a valid license is not needed.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicenseNotRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicenseNotRequiredAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicenseValidator">
            <summary>
            Provides methods for license validation.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseValidator.MachineUID">
            <summary>
            Gets the UID of the machine.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.GetBuildMasterKeyStatus(System.String,System.String)">
            <summary>
            Returns the current license key and activation status of a BuildMaster key.
            </summary>
            <param name="rawLicenseKey">The raw license key.</param>
            <param name="activationCode">The activation code.</param>
            <returns>License key status information.</returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.GetProGetKeyStatus(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the current license key and activation status of a ProGet key.
            </summary>
            <param name="rawLicenseKey">The raw license key.</param>
            <param name="activationCodes">The activation codes.</param>
            <returns>License key status information.</returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.GetOtterKeyStatus(System.String,System.String)">
            <summary>
            Returns the current license key and activation status of an Otter key.
            </summary>
            <param name="rawLicenseKey">The raw license key.</param>
            <param name="activationCode">The activation code.</param>
            <returns>License key status information.</returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.Validate``1(System.String,System.String,System.Boolean)">
            <summary>
            Throws a <see cref="T:Inedo.Licensing.LicensingException"/> or <see cref="T:Inedo.Licensing.ActivationException"/> if the activation
            code is not valid and the grace period does not apply, or if the license key is invalid or not set.
            </summary>
            <typeparam name="TKey">Type or the license key.</typeparam>
            <param name="licenseKey">The license key.</param>
            <param name="activationCode">The activation code.</param>
            <param name="allowActivationGracePeriod">Value indicating whether to enable the activation grace period.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.Validate(Inedo.Licensing.LicenseKeyBase,System.String,System.Boolean)">
            <summary>
            Throws a <see cref="T:Inedo.Licensing.LicensingException"/> or <see cref="T:Inedo.Licensing.ActivationException"/> if the activation
            code is not valid and the grace period does not apply.
            </summary>
            <param name="licenseKey">The activated license key.</param>
            <param name="activationCode">The activation code.</param>
            <param name="allowActivationGracePeriod">Value indicating whether to enable the activation grace period.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.ValidateActivationCode(System.String,System.String,System.String)">
            <summary>
            Validates the legitimacy of the activation code.
            </summary>
            <param name="activationCode">The activation code to validate.</param>
            <param name="licenseKey">The license key.</param>
            <param name="machineUID">The machine UID.</param>
            <returns>True if the activation code is valid; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.ValidateActivationCode(System.String,System.String)">
            <summary>
            Validates the legitimacy of the activation code.
            </summary>
            <param name="activationCode">The activation code to validate.</param>
            <param name="licenseKey">The license key.</param>
            <returns>True if the activation code is valid; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.ValidateActivationCode(System.String,Inedo.Licensing.LicenseKeyBase)">
            <summary>
            Validates the legitimacy of the activation code.
            </summary>
            <param name="activationCode">The activation code to validate.</param>
            <param name="licenseKey">The license key.</param>
            <returns>True if the activation code is valid; otherwise false.</returns>
        </member>
        <member name="T:Inedo.Licensing.LicensingException">
            <summary>
            The exception that is thrown when a licensing or activation error occurs.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicensingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicensingException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicensingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicensingException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Inedo.Licensing.LicensingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicensingException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Inedo.Licensing.LicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicensingException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Inedo.Licensing.MultiLicenseKey`1">
            <summary>
            Represents a license key that is a combination of other license keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.MultiLicenseKey`1" /> class.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.MultiLicenseKey`1" /> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.Keys">
            <summary>
            Gets the collection of keys contained in this <see cref="T:Inedo.Licensing.MultiLicenseKey`1"/> instance.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.CustomerId">
            <summary>
            Gets the customer id.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.ExpiresDate">
            <summary>
            Gets the latest key expiration date.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.CanonicalKey">
            <summary>
            Gets the canonical key of this multilicense key.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.EnsureValidLicense">
            <summary>
            Throws a <see cref="T:Inedo.Licensing.LicensingException"/> if there are no valid license keys.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.Max``1(Inedo.Licensing.MultiLicenseKey{`0}.GetKeyValue{``0})">
            <summary>
            Returns the maximum of all of the specified field values.
            </summary>
            <typeparam name="T">Type of the field value.</typeparam>
            <param name="getValue">Method which returns the field value.</param>
            <returns>Maximum field value.</returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.FirstOrDefault``1(Inedo.Licensing.MultiLicenseKey{`0}.GetKeyValue{``0})">
            <summary>
            Returns the specified field value of the first key, or null if there are no keys.
            </summary>
            <typeparam name="T">Type of the field value.</typeparam>
            <param name="getValue">Method which returns the field value.</param>
            <returns>First field value.</returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.Any(Inedo.Licensing.MultiLicenseKey{`0}.GetKeyValue{System.Boolean})">
            <summary>
            Returns a value indicating whether any of the specified field values are set.
            </summary>
            <param name="getValue">Method which returns the field value.</param>
            <returns>Value indicating whether any of the field values are set.</returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.Sum(Inedo.Licensing.MultiLicenseKey{`0}.GetKeyValue{System.Int32})">
            <summary>
            Returns the sum of all of the specified field values.
            </summary>
            <param name="getValue">Method which returns the field value.</param>
            <returns>Sum of the field values.</returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.IsKeyEnabled(`0)">
            <summary>
            Returns a value indicating whether a given key should be treated as enabled.
            </summary>
            <param name="key">The key to test.</param>
            <returns>True if the key should be considered enabled; otherwise false.</returns>
        </member>
        <member name="T:Inedo.Licensing.MultiLicenseKey`1.GetKeyValue`1">
            <summary>
            Represents a method which returns a field of a key.
            </summary>
            <typeparam name="T">Type of the field value.</typeparam>
            <param name="key">The key.</param>
            <returns>Field value of the key.</returns>
        </member>
        <member name="T:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection">
            <summary>
            Represents a collection of keys in a <see cref="T:Inedo.Licensing.MultiLicenseKey`1"/> instance.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.#ctor(System.Collections.Generic.List{Inedo.Licensing.MultiLicenseKey{`0}.ValidatedLicenseKey})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection" /> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.Item(System.Int32)">
            <summary>
            Gets the key at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.System#Collections#Generic#IList{Inedo#Licensing#MultiLicenseKey{TKey}#ValidatedLicenseKey}#Item(System.Int32)">
            <summary>
            Gets or sets the key at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.System#Collections#Generic#ICollection{Inedo#Licensing#MultiLicenseKey{TKey}#ValidatedLicenseKey}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey">
            <summary>
            Represents a license key that may or may not be valid.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey.IsValid">
            <summary>
            Gets a value indicating whether the license key is valid.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey.IsEnabled">
            <summary>
            Gets a value indicating whether the key is enabled.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey.op_Implicit(Inedo.Licensing.MultiLicenseKey{`0}.ValidatedLicenseKey)~`0">
            <summary>
            Ts the key.
            </summary>
            <param name="a">A.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.Licensing.OtterLicenseKey">
            <summary>
            Represents an Otter license key.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.OtterLicenseKey.UnlimitedServersCount">
            <summary>
            A value of <see cref="P:Inedo.Licensing.OtterLicenseKey.MaxServers"/> that indicates the number of servers in Otter is unlimited.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.OtterLicenseKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.OtterLicenseKey" /> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Inedo.Licensing.OtterLicenseKey.LicenseType">
            <summary>
            Gets the type of the license.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.OtterLicenseKey.MaxServers">
            <summary>
            The maximum number of server licenses.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.OtterLicenseKey.MaxServersUnlimited">
            <summary>
            Gets whether the servers counts in Otter is unlimited.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.OtterLicenseType">
            <summary>
            Specifies the type of an Otter license.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.OtterLicenseType.Enterprise">
            <summary>
            Otter Enterprise.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.OtterLicenseType.EnterpriseTrial">
            <summary>
            Otter Enterprise Trial.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.OtterLicenseType.Free">
            <summary>
            Otter Free.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.OtterLicenseType.Beta">
            <summary>
            Otter Beta.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.ProductCode">
            <summary>
            Represents a product code.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProductCode.BuildMaster">
            <summary>
            BuildMaster.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProductCode.ProGet">
            <summary>
            ProGet.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProductCode.Otter">
            <summary>
            Otter.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.ProGetLicenseKey">
            <summary>
            Represents a ProGet license key.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.ProGetLicenseKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ProGetLicenseKey" /> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Inedo.Licensing.ProGetLicenseKey.LicenseType">
            <summary>
            Gets the type of the license.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.ProGetLicenseKey.HighAvailability">
            <summary>
            Gets a value indicating whether high availability mode is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.ProGetLicenseKey.LoadBalancing">
            <summary>
            Gets a value indicating whether load balancing is available.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.ProGetLicenseType">
            <summary>
            Specifies the type of a ProGet license.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProGetLicenseType.Enterprise">
            <summary>
            ProGet Enterprise.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProGetLicenseType.EnterpriseTrial">
            <summary>
            ProGet Enterprise Trial.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProGetLicenseType.Free">
            <summary>
            ProGet Free.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProGetLicenseType.Beta">
            <summary>
            ProGet Beta.
            </summary>
        </member>
        <member name="T:Inedo.Messaging.MessengerException">
            <summary>
            Exception thrown when there is an error sending or receiving a message.
            </summary>
        </member>
        <member name="M:Inedo.Messaging.MessengerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Messaging.MessengerException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Messaging.MessengerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Messaging.MessengerException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Inedo.Messaging.MessengerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Messaging.MessengerException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception which originally caused the error.</param>
        </member>
        <member name="T:Inedo.Messaging.ServiceMessageBase">
            <summary>
            Base class for service messages.
            </summary>
        </member>
        <member name="M:Inedo.Messaging.ServiceMessageBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Messaging.ServiceMessageBase"/> class.
            </summary>
        </member>
        <member name="T:Inedo.Messaging.ServiceMessenger">
            <summary>
            Allows for simple message-based communication between processes.
            </summary>
        </member>
        <member name="M:Inedo.Messaging.ServiceMessenger.CreateServer(System.String)">
            <summary>
            Returns a new <see cref="T:Inedo.Messaging.ServiceMessenger"/> that is configured as a server.
            </summary>
            <param name="endpoint">The endpoint to listen to.</param>
            <returns>New <see cref="T:Inedo.Messaging.ServiceMessenger"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="endpoint"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="endpoint"/> is invalid.</exception>
        </member>
        <member name="M:Inedo.Messaging.ServiceMessenger.CreateClient(System.String)">
            <summary>
            Returns a new <see cref="T:Inedo.Messaging.ServiceMessenger"/> that is configured as a client.
            </summary>
            <param name="endpoint">The endpoint to connect to.</param>
            <returns>New <see cref="T:Inedo.Messaging.ServiceMessenger"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="endpoint"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="endpoint"/> is invalid.</exception>
        </member>
        <member name="M:Inedo.Messaging.ServiceMessenger.Start">
            <summary>
            Starts the messenger.
            </summary>
        </member>
        <member name="M:Inedo.Messaging.ServiceMessenger.AddHandler``1(System.Action{``0})">
            <summary>
            Adds a handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Inedo.Messaging.ServiceMessenger.AddHandler``2(System.Func{``0,``1})">
            <summary>
            Adds a handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <typeparam name="TResponse">The message response type.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Inedo.Messaging.ServiceMessenger.SendMessage(Inedo.Messaging.ServiceMessageBase)">
            <summary>
            Sends a message asynchronously.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Messaging.ServiceMessenger.SendMessageWithResponse(Inedo.Messaging.ServiceMessageBase)">
            <summary>
            Sends a message and waits until a response is received.
            </summary>
            <param name="message">The message.</param>
            <returns>The response.</returns>
        </member>
        <member name="T:Inedo.NamespaceDescriptionAttribute">
            <summary>
            Provides a description of a namespace for documentation.
            </summary>
        </member>
        <member name="M:Inedo.NamespaceDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.NamespaceDescriptionAttribute"/> class.
            </summary>
            <param name="namespaceName">The namespace.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Inedo.NamespaceDescriptionAttribute.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:Inedo.NamespaceDescriptionAttribute.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:Inedo.Serialization.ICustomPersistentSerializer">
            <summary>
            Indicates that a type implements custom serialization logic for
            a specific type.
            </summary>
        </member>
        <member name="M:Inedo.Serialization.ICustomPersistentSerializer.Serialize(System.Object)">
            <summary>
            Returns the content an XML element which represents the current value.
            </summary>
            <param name="instance">The object to serialize.</param>
            <returns>Content of an XML element which represents the current value.</returns>
        </member>
        <member name="M:Inedo.Serialization.ICustomPersistentSerializer.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Reads configuration for this instance from the specified XML element.
            </summary>
            <param name="element">The XML element to read from.</param>
            <returns>Instance deserialized from the element.</returns>
        </member>
        <member name="T:Inedo.Serialization.IMissingPersistentPropertyHandler">
            <summary>
            Indicates that a type with persistent properties has special handling for
            dealing with deleted/renamed properties.
            </summary>
            <remarks>
            The default behavior for missing properties is to ignore them.
            </remarks>
        </member>
        <member name="M:Inedo.Serialization.IMissingPersistentPropertyHandler.OnDeserializedMissingProperties(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Invoked when at least one persistent property could not be found on deserialization.
            </summary>
            <param name="missingProperties">The missing properties.</param>
            <remarks>
            This method is invoked after all matched properties have been assigned.
            </remarks>
        </member>
        <member name="T:Inedo.Serialization.Persistence">
            <summary>
            Contains static utility methods for working with persistent objects.
            </summary>
            <seealso cref="T:Inedo.Serialization.PersistentAttribute"/>
        </member>
        <member name="P:Inedo.Serialization.Persistence.EncryptionMode">
            <summary>
            Gets the encryption mode to use.
            </summary>
        </member>
        <member name="M:Inedo.Serialization.Persistence.SetEncryptionMode(Inedo.Serialization.PersistenceEncryptionMode,System.Byte[])">
            <summary>
            Sets the encryption mode to use for encrypted persistent properties.
            </summary>
            <param name="mode">The encryption mode.</param>
            <param name="key">The encryption key. Currently this must be exactly 16 bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> length is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode"/> is not a valid value.</exception>
        </member>
        <member name="M:Inedo.Serialization.Persistence.GetPersistentProperties(System.Type,System.Boolean)">
            <summary>
            Inspects the specified type and, optionally, its interfaces, and returns properties with <see cref="T:Inedo.Serialization.PersistentAttribute"/>.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="inspectInterfaces">Value indicating whether to inspect properties on interfaces as well.</param>
            <returns>Enumeration of persistent properties.</returns>
        </member>
        <member name="M:Inedo.Serialization.Persistence.SerializeToPersistedObjectXml(System.Object)">
            <summary>
            Serializes the specified object by retrieving only properties with the
            Persisted attribute
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Serialization.Persistence.DeserializeFromPersistedObjectXml(System.String)">
            <summary>
            Des the serialize from persisted object XML.
            </summary>
            <param name="objXml">The obj XML.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Serialization.Persistence.SerializeToBase64String(System.Object)">
            <summary>
            Returns a string representing the Base-64 Converted output of the
            Binary Formmater
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Serialization.Persistence.DeserializeFromBase64String(System.String)">
            <summary>
            De-serialize from base64 string.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Serialization.Persistence.SerializeStringArray(System.String[])">
            <summary>
            Serializes the string array.
            </summary>
            <param name="strings">The strings.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Serialization.Persistence.DeserializeToStringArray(System.String)">
            <summary>
            De-serialize to string array.
            </summary>
            <param name="serialized">The serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Serialization.Persistence.CreateDynamicInstance(System.String,System.String)">
            <summary>
            Returns a new instance of a persistable type as a dynamic object.
            </summary>
            <param name="typeName">The type of the persisted object.</param>
            <param name="assemblyName">The assembly containing the type of the persisted object.</param>
            <returns>New instance of the specified type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> is null or empty or <paramref name="assemblyName"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeName"/> contains white space.</exception>
        </member>
        <member name="M:Inedo.Serialization.Persistence.CreateDynamicInstanceFromXml(System.String)">
            <summary>
            Returns a dynamic instance of a persisted object.
            </summary>
            <param name="objectXml">The persisted object XML.</param>
            <returns>Dynamic instance of the persisted object.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="objectXml"/> does not contain valid persisted object XML.</exception>
        </member>
        <member name="M:Inedo.Serialization.Persistence.CreateInstance(System.String,System.String)">
            <summary>
            Returns a new instance of a persistent object type.
            </summary>
            <param name="assemblyName">Name of the assembly containing the type.</param>
            <param name="typeName">Name of the type.</param>
            <returns>New instance of the specified type.</returns>
        </member>
        <member name="T:Inedo.Serialization.PersistenceEncryptionMode">
            <summary>
            Specifies the encryption algorithm to use for encrypted persistent properties.
            </summary>
        </member>
        <member name="F:Inedo.Serialization.PersistenceEncryptionMode.None">
            <summary>
            No encryption.
            </summary>
        </member>
        <member name="F:Inedo.Serialization.PersistenceEncryptionMode.Aes128">
            <summary>
            Use AES with a 128-bit key.
            </summary>
        </member>
        <member name="T:Inedo.Serialization.PersistentAttribute">
            <summary>
            Marks a property as persistent. A persistent property is stored in the
            database as part of the object's configuration. Persistent properties are also
            serialized to remote agents prior to execution.
            </summary>
        </member>
        <member name="M:Inedo.Serialization.PersistentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Serialization.PersistentAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Serialization.PersistentAttribute.Encrypted">
            <summary>
            Gets or sets a value indicating whether the property value should be protected
            using DPAPI before being persisted in the database.
            </summary>
            <remarks>
            This is only applicable to string properties.
            </remarks>
        </member>
        <member name="P:Inedo.Serialization.PersistentAttribute.CustomSerializer">
            <summary>
            Gets or sets the type of custom serializer to use for the property.
            </summary>
            <remarks>
            This type should implement <see cref="T:Inedo.Serialization.ICustomPersistentSerializer"/>.
            </remarks>
        </member>
        <member name="T:Inedo.Serialization.PersistFromAttribute">
            <summary>
            Indicates that a type should be used as a fallback for another type if
            the other type cannot be resolved on deserialization.
            </summary>
        </member>
        <member name="M:Inedo.Serialization.PersistFromAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Serialization.PersistFromAttribute"/> class.
            </summary>
            <param name="typeName">The assembly qualified name of the replaced type.</param>
        </member>
        <member name="P:Inedo.Serialization.PersistFromAttribute.OriginalTypeName">
            <summary>
            Gets the assembly qualified name of the type that this type replaces.
            </summary>
        </member>
        <member name="T:Inedo.Serialization.SlimBinaryFormatter">
            <summary>
            Contains methods for performing compact low-level binary serialization.
            </summary>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the specified object to the specified stream.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="stream">The stream into which the serialized object is written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes an object from the specified stream.
            </summary>
            <param name="stream">The stream to read the serialized object from.</param>
            <returns>Deserialized instance read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.SerializeToByteArray(System.Object)">
            <summary>
            Serializes the specified object and returns it as a byte array.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>Byte array containing serialized object data.</returns>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.DeserializeFromByteArray(System.Byte[])">
            <summary>
            Deserializes an object from the specified byte array.
            </summary>
            <param name="data">Byte array containing serialized object data.</param>
            <returns>Deserialized instance read from the byte array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.WriteLength(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Writes a variable-length 32-bit integer 7 bits at a time that is intended to represent a length.
            </summary>
            <param name="data">Array into which value is written.</param>
            <param name="offset">Offset to begin writing in the array; will be updated to reflect the number of bytes written.</param>
            <param name="length">The value to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is less than zero or greater than or equal to the length of <paramref name="data"/>.</exception>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.WriteLength(System.IO.Stream,System.Int32)">
            <summary>
            Writes a variable-length 32-bit integer 7 bits at a time that is intended to represent a length.
            </summary>
            <param name="stream">The stream into which the value is written.</param>
            <param name="length">The value to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.WriteLength(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes a variable-length 32-bit integer 7 bits at a time that is intended to represent a length.
            </summary>
            <param name="writer">The binary writer into which the value is written.</param>
            <param name="length">The value to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.ReadLength(System.Byte[],System.Int32@)">
            <summary>
            Reads a variable-length 32-bit integer 7 bits at a time.
            </summary>
            <param name="data">Array from which the value is read.</param>
            <param name="offset">Offset in array to begin reading.</param>
            <returns>Value read from the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is less than zero or greater than or equal to the length of <paramref name="data"/>.</exception>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.ReadLength(System.IO.Stream)">
            <summary>
            Reads a variable-length 32-bit integer 7 bits at a time.
            </summary>
            <param name="stream">Stream from which value is read.</param>
            <returns>Value read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:Inedo.Serialization.SlimBinaryFormatter.ReadLength(System.IO.BinaryReader)">
            <summary>
            Reads a variable-length 32-bit integer 7 bits at a time.
            </summary>
            <param name="reader">Binary reader from which the value is read.</param>
            <returns>Value read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null.</exception>
        </member>
        <member name="T:Inedo.Serialization.SlimSerializableAttribute">
            <summary>
            Indicates that a property should be included when an object is serialized.
            </summary>
        </member>
        <member name="M:Inedo.Serialization.SlimSerializableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Serialization.SlimSerializableAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.SlimActivator">
            <summary>
            Slimmed down version of <see cref="T:System.Activator"/>.
            </summary>
            <remarks>
            This maintains an internal cache of instance creator factories, and is more suited for creating many instances
            of the same types where performance is critical and <see cref="M:System.Activator.CreateInstance(System.Type)"/>
            adds too much overhead.
            </remarks>
        </member>
        <member name="M:Inedo.SlimActivator.CreateInstance(System.Type)">
            <summary>
            Returns a new instance of the specified type.
            </summary>
            <param name="type">The type to initialize an instance of.</param>
            <returns>Instance of the specified type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> does not have a public parameterless constructor.</exception>
        </member>
        <member name="M:Inedo.SlimActivator.CreateInstance``1">
            <summary>
            Returns a new instance of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to create a new instance of.</typeparam>
            <returns>Instance of the specified type.</returns>
        </member>
        <member name="M:Inedo.SlimActivator.CreateInstance(System.Type,System.Boolean)">
            <summary>
            Returns a new instance of the specified type.
            </summary>
            <param name="type">The type to initialize an instance of.</param>
            <param name="allowNonPublicConstructor">Value indicating whether nonpublic constructors should be considered.</param>
            <returns>Instance of the specified type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> does not have a public parameterless constructor.</exception>
        </member>
        <member name="M:Inedo.SlimActivator.CreateInstance``1(System.Boolean)">
            <summary>
            Returns a new instance of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to create a new instance of.</typeparam>
            <param name="allowNonPublicConstructor">Value indicating whether nonpublic constructors should be considered.</param>
            <returns>Instance of the specified type.</returns>
        </member>
        <member name="M:Inedo.SlimActivator.GetFactory(System.Type)">
            <summary>
            Returns a factory method that can be used to create an instance of the specified type.
            </summary>
            <param name="type">The type to return a factory method for.</param>
            <returns>Factory method that can be used to create an instance of the specified type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> does not have a public parameterless constructor.</exception>
        </member>
        <member name="M:Inedo.SlimActivator.GetFactory(System.Type,System.Boolean)">
            <summary>
            Returns a factory method that can be used to create an instance of the specified type.
            </summary>
            <param name="type">The type to return a factory method for.</param>
            <param name="allowNonPublicConstructor">Value indicating whether nonpublic constructors should be considered.</param>
            <returns>Factory method that can be used to create an instance of the specified type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> does not have a public parameterless constructor.</exception>
        </member>
        <member name="M:Inedo.SlimActivator.GetFactory``1">
            <summary>
            Returns a factory method that can be used to create an instance of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to return a factory method for.</typeparam>
            <returns>Factory method that can be used to create an instance of the specified type.</returns>
        </member>
        <member name="M:Inedo.SlimActivator.GetFactory``1(System.Boolean)">
            <summary>
            Returns a factory method that can be used to create an instance of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to return a factory method for.</typeparam>
            <param name="allowNonPublicConstructor">Value indicating whether nonpublic constructors should be considered.</param>
            <returns>Factory method that can be used to create an instance of the specified type.</returns>
        </member>
        <member name="T:Inedo.TaskExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:Inedo.TaskExtensions.WaitAndUnwrapExceptions(System.Threading.Tasks.Task)">
            <summary>
            Waits for a task to complete.
            </summary>
            <param name="task">The task to wait for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> is null.</exception>
        </member>
        <member name="M:Inedo.TaskExtensions.Result``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns the result of a task after it completes.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="task">The task to wait for.</param>
            <returns>The result of the task.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> is null.</exception>
        </member>
        <member name="T:Inedo.TimedExecuter">
            <summary>
            Runs a task periodically.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.TimedExecuter"/> class.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuter.Execute">
            <summary>
            Uninclused.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuter.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked periodically as specified in the <see cref="P:Inedo.TimedExecuterBase.Throttle"/> property.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Inedo.TimedExecuter.StartBackgroundTask``1(``0,System.Func{Inedo.TimedExecuter.BackgroundTaskContext{``0},System.Threading.Tasks.Task},System.String)">
            <summary>
            Starts executing a long running background task.
            </summary>
            <param name="id">The unique ID of the task.</param>
            <param name="backgroundTask">Method which performs the task.</param>
            <param name="description">Initial description of the task.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="backgroundTask"/> is null or <paramref name="description"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.TimedExecuter.StartBackgroundTask``1(``0,System.Func{Inedo.TimedExecuter.BackgroundTaskContext{``0},System.Threading.Tasks.Task},System.String,System.Object)">
            <summary>
            Starts executing a long running background task.
            </summary>
            <param name="id">The unique ID of the task.</param>
            <param name="backgroundTask">Method which performs the task.</param>
            <param name="description">Initial description of the task.</param>
            <param name="logContext">Context to use for logging in the task.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="backgroundTask"/> is null or <paramref name="description"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.TimedExecuter.StartBackgroundTask``1(``0,System.Func{Inedo.TimedExecuter.BackgroundTaskContext{``0},System.Threading.Tasks.Task},System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Starts executing a long running background task.
            </summary>
            <param name="id">The unique ID of the task.</param>
            <param name="backgroundTask">Method which performs the task.</param>
            <param name="description">Initial description of the task.</param>
            <param name="logContext">Context to use for logging in the task.</param>
            <param name="cancellationToken">Cancellation token for the task.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="backgroundTask"/> is null or <paramref name="description"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.TimedExecuter.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the instance.
            </summary>
            <param name="disposing">Value indicating whether to dispose manage resources.</param>
        </member>
        <member name="T:Inedo.TimedExecuter.BackgroundTaskContext`1">
            <summary>
            Contains context information for a background task.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuter.BackgroundTaskContext`1.MessageLogged">
            <summary>
            Occurs when a message is logged.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuter.BackgroundTaskContext`1.Id">
            <summary>
            Gets the task ID.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuter.BackgroundTaskContext`1.Description">
            <summary>
            Gets or sets the task description.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuter.BackgroundTaskContext`1.StartTime">
            <summary>
            Gets the task start time.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuter.BackgroundTaskContext`1.CancellationToken">
            <summary>
            Gets the task cancellation token.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuter.BackgroundTaskContext`1.LogContext">
            <summary>
            Gets the task log context.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuter.BackgroundTaskContext`1.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the corresponding log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <seealso cref="T:Inedo.Diagnostics.LoggerExtensions"/>
        </member>
        <member name="M:Inedo.TimedExecuter.BackgroundTaskContext`1.LogWithDetails(Inedo.Diagnostics.MessageLevel,System.String,System.String)">
            <summary>
            Writes the specified message to the corresponding log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <param name="details">Log message details.</param>
        </member>
        <member name="T:Inedo.TimedExecuterBase">
            <summary>
            Runs a task periodically.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.TimedExecuterBase"/> class.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.Starting">
            <summary>
            Raised before the executer has started.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.Started">
            <summary>
            Raised immediately after the executer has started.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.Stopping">
            <summary>
            Raised before the executer has stopped.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.Stopped">
            <summary>
            Raised immediately after the executor has stopped.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.UnhandledException">
            <summary>
            Raised when an unhandled exception occurs.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.MessageLogged">
            <summary>
            Occurs when a message is logged.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.IsRunning">
            <summary>
            Gets a value indicating whether the executer is running.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.Name">
            <summary>
            Gets the name of the executer.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.LogCategory">
            <summary>
            Gets the name of the category to use for logging.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.AllowTrigger">
            <summary>
            Gets a value indicating whether this executer can be triggered to run
            at arbitrary times.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.LastRunTime">
            <summary>
            Gets the time (UTC) when the executer was last run.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.NextRunTime">
            <summary>
            Gets the time (UTC) when the executer is expected to run next.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.Throttle">
            <summary>
            Gets the time in seconds between calls to <see cref="M:Inedo.TimedExecuterBase.Execute"/>.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.StartupDelay">
            <summary>
            Gets the initial delay in seconds before this executer starts for the first time.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Start">
            <summary>
            Starts the executer if it is not already running.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Stop">
            <summary>
            Stops the executer if it is running.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.RunOnce">
            <summary>
            Immediately invokes the executer regardless of how much time has elapsed.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.GetStatus">
            <summary>
            Returns a snapshot of the current executer status.
            </summary>
            <returns>Snapshot of the current executer status.</returns>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the corresponding log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <seealso cref="T:Inedo.Diagnostics.LoggerExtensions"/>
        </member>
        <member name="M:Inedo.TimedExecuterBase.LogWithDetails(Inedo.Diagnostics.MessageLevel,System.String,System.String)">
            <summary>
            Writes the specified message to the corresponding log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <param name="details">Additional details to log.</param>
            <seealso cref="T:Inedo.Diagnostics.LoggerExtensions"/>
        </member>
        <member name="M:Inedo.TimedExecuterBase.LogWithContext(Inedo.Diagnostics.MessageLevel,System.String,System.String,System.Object)">
            <summary>
            Writes the specified message to the corresponding log with additional context information.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <param name="details">Additional details to log.</param>
            <param name="contextData">Additional context data.</param>
            <seealso cref="T:Inedo.Diagnostics.LoggerExtensions"/>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnStarting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Starting"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Started"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnStopping(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Stopping"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnStopped(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Stopped"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnUnhandledException(System.UnhandledExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:UnhandledException"/> event.
            </summary>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnMessageLogged(Inedo.Diagnostics.LogMessageEventArgs)">
            <summary>
            Raises the <see cref="E:MessageLogged"/> event.
            </summary>
            <param name="e">The <see cref="T:Inedo.Diagnostics.LogMessageEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is null.</exception>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Execute">
            <summary>
            Invoked periodically as specified in the <see cref="P:Inedo.TimedExecuterBase.Throttle"/> property.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.UpdateTaskInfo``1(``0,System.String)">
            <summary>
            Should be called when a new subtask is created or updated.
            </summary>
            <param name="taskId">Unique ID of the task.</param>
            <param name="description">User-friendly description of what the task is doing.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.TaskComplete``1(``0)">
            <summary>
            Should be called when a subtask is done (or has faulted).
            </summary>
            <param name="taskId">Unique ID of the task.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.IsTaskRunning``1(``0)">
            <summary>
            Returns a value indicating whether the specified task is currently running.
            </summary>
            <param name="taskId">The task ID.</param>
            <returns>True if the task is running; otherwise false.</returns>
        </member>
        <member name="M:Inedo.TimedExecuterBase.ExecuteMethodHost(System.Object)">
            <summary>
            Wraps the call to <see cref="M:Inedo.TimedExecuterBase.Execute"/>.
            </summary>
            <param name="state">Unused.</param>
        </member>
        <member name="T:Inedo.TimedExecuterManager">
            <summary>
            Manages the timed executers for a service.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterManager.#ctor(System.Collections.Generic.IEnumerable{Inedo.TimedExecuterBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.TimedExecuterManager"/> class.
            </summary>
            <param name="executers">Executers to manage.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="executers"/> is null or one of the executers is null.</exception>
        </member>
        <member name="M:Inedo.TimedExecuterManager.#ctor(Inedo.TimedExecuterBase[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.TimedExecuterManager"/> class.
            </summary>
            <param name="executers">Executers to manage.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="executers"/> is null or one of the executers is null.</exception>
        </member>
        <member name="E:Inedo.TimedExecuterManager.UnhandledException">
            <summary>
            Raised when an unhandled exception occurs.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterManager.IsRunning">
            <summary>
            Gets a value indicating whether any of the executers is currently running.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterManager.Executers">
            <summary>
            Gets the executers.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterManager.Start">
            <summary>
            Starts all of the executers.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterManager.Stop">
            <summary>
            Stops all of the executers.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterManager.RunOnce(System.String)">
            <summary>
            Runs a specific executer immediately.
            </summary>
            <param name="executerName">The name of the executer to run.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="executerName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.TimedExecuterManager.GetStatus">
            <summary>
            Returns a collection of the current statuses of all of the executers.
            </summary>
            <returns>The status of each of the executers.</returns>
        </member>
        <member name="M:Inedo.TimedExecuterManager.Dispose">
            <summary>
            Releases resources used by this instance.
            </summary>
        </member>
        <member name="T:Inedo.TimedExecuterStatus">
            <summary>
            Represents the current status of a <see cref="T:Inedo.TimedExecuterBase"/>.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterStatus.ExecuterName">
            <summary>
            Gets the name of the executer.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterStatus.LastRunTime">
            <summary>
            Gets the time (UTC) when the executer was last run.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterStatus.NextRunTime">
            <summary>
            Gets the time (UTC) when the executer is expected to run next.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterStatus.RunningTasks">
            <summary>
            Gets a collection of currently running tasks of the executer.
            </summary>
        </member>
        <member name="T:Inedo.TimedExecuterTask">
            <summary>
            Represents a currently running task of a <see cref="T:Inedo.TimedExecuterBase"/>.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterTask.Id">
            <summary>
            Gets the ID used to identify this task.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterTask.StartTime">
            <summary>
            Gets the time (UTC) when the task started.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterTask.Description">
            <summary>
            Gets a description of what the task is currently doing.
            </summary>
        </member>
        <member name="T:Inedo.UndisclosedAttribute">
            <summary>
            Indicates that something is undisclosed.
            </summary>
        </member>
        <member name="M:Inedo.UndisclosedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.UndisclosedAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.UndisclosedNamespaceAttribute">
            <summary>
            Indicates that a namespace is undisclosed.
            </summary>
        </member>
        <member name="M:Inedo.UndisclosedNamespaceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.UndisclosedNamespaceAttribute"/> class.
            </summary>
            <param name="namespaceName">The namespace that is undisclosed.</param>
        </member>
        <member name="P:Inedo.UndisclosedNamespaceAttribute.Namespace">
            <summary>
            Gets the namespace that is undisclosed.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ISimplePostListener">
            <summary>
            Represents a simple control that processes postbacks, regardless of validity or whether validation was performed
            </summary>
            <remarks>
            If a control also implements <see cref="T:Inedo.Web.Controls.ISimplePostControl"/>, then the 
            <see cref="M:Inedo.Web.Controls.ISimplePostListener.ProcessPost(System.Collections.Generic.IList{Inedo.Web.ValidationResults},Inedo.Web.Controls.ISimplePostControl)"/> method will be invoked before <see cref="M:Inedo.Web.Controls.ISimplePostControl.ProcessValidPost"/>
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.ISimplePostListener.ProcessPost(System.Collections.Generic.IList{Inedo.Web.ValidationResults},Inedo.Web.Controls.ISimplePostControl)">
            <summary>
            Called after all <see cref="T:Inedo.Web.Controls.ISimplePostControl"/> have had their values set and
            all <see cref="T:Inedo.Web.ISimpleValidator"/> have run.
            </summary>
            <param name="validationResults">the results of validation, or null if no validation was performed</param>
            <param name="postbackTrigger">the control that triggered the postback or null if it wasn't triggered</param>
            <remarks>
            The post can be presume valid if validationResults is null/empty or all validationResults are valid
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.AttributeCollection">
            <summary>
            Represents a collection of HTML attributes.
            </summary>
            <remarks>
            This is a specialized dictionary designed for minimal overhead, and will only
            be performant with a relatively small number of keys.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.AttributeCollection"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.AttributeCollection.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value, or null if the key is not found.</returns>
        </member>
        <member name="P:Inedo.Web.Controls.AttributeCollection.Count">
            <summary>
            Gets the number of attributes.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.AttributeCollection.Keys">
            <summary>
            Gets the attribute names.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.AttributeCollection.Values">
            <summary>
            Gets the attribute values.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.Add(System.String,System.String)">
            <summary>
            Adds an attribute name and value.
            </summary>
            <param name="key">The attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.Clear">
            <summary>
            Removes all attributes.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.ContainsKey(System.String)">
            <summary>
            Returns a value indicating whether the specified attribute is defined.
            </summary>
            <param name="key">The attribute.</param>
            <returns>True if attribute is present; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.Remove(System.String)">
            <summary>
            Removes the specified attribute.
            </summary>
            <param name="key">The attribute.</param>
            <returns>True if the attribute was removed; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.TryGetValue(System.String,System.String@)">
            <summary>
            Tries to get the value of the specified attribute.
            </summary>
            <param name="key">The attribute.</param>
            <param name="value">The value.</param>
            <returns>True if attribute was found; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.GetEnumerator">
            <summary>
            Gets an enumerator.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.AttributeCollection.Enumerator">
            <summary>
            Enumerator for iterating attributes.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.AttributeCollection.Enumerator.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.Enumerator.Dispose">
            <summary>
            Disposes the instance.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.Enumerator.MoveNext">
            <summary>
            Moves to the next item.
            </summary>
            <returns>Value indicating whether there are more items.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.AttributeCollection.KeyValueCollection">
            <summary>
            Contains keys or values.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.AttributeCollection.KeyValueCollection.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.KeyValueCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether the item is present.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item is present; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.AttributeCollection.KeyValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.CExtensions">
            <summary>
            Contains <see cref="T:Control"/>-related extension methods.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.Add(System.Web.UI.ControlCollection,System.Web.UI.Control[])">
            <summary>
            Adds controls to the specified control collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="controls">The controls to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddLiteral(System.Web.UI.ControlCollection,System.String)">
            <summary>
            Creates an instance of a <see cref="T:System.Web.UI.LiteralControl"/> containing
            the supplied string.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="literal">Literal to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddLiteral(System.Web.UI.ControlCollection,System.String,System.Object[])">
            <summary>
            Creates an instance of a <see cref="T:System.Web.UI.LiteralControl"/> containing
            a string generated from the supplied format string and arguments.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="literalFormatString">Standard .NET format string.</param>
            <param name="formatArgs">Arguments used within format string.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddHtml(System.Web.UI.ControlCollection,System.String,System.String)">
            <summary>
            Adds an instance of a <see cref="T:System.Web.UI.HtmlGenericControl"/> to a control collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="tagName">The element tag name.</param>
            <param name="innerHtml">The inner HTML of the element.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddHtmlEncoded(System.Web.UI.ControlCollection,System.String,System.String)">
            <summary>
            Adds an instance of a <see cref="T:System.Web.UI.HtmlGenericControl"/> to a control collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="tagName">The element tag name.</param>
            <param name="innerText">The inner text of the element.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.Add(System.Web.UI.ControlCollection,Inedo.Web.Controls.CExtensions.CreateControl)">
            <summary>
            Adds the control returned by a delegate to a control collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="createControlDelegate">Delegate which returns the control to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddRange(System.Web.UI.ControlCollection,System.Collections.Generic.IEnumerable{System.Web.UI.Control})">
            <summary>
            Adds a collection of controls to another control's collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="controls">The controls to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddRange(System.Web.UI.WebControls.ListItemCollection,System.Collections.Generic.IEnumerable{System.Web.UI.WebControls.ListItem})">
            <summary>
            Adds the range.
            </summary>
            <param name="collection">The collection.</param>
            <param name="listItems">The list items.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.Interleave(System.Collections.Generic.IEnumerable{System.Web.UI.Control},System.Func{System.Web.UI.Control})">
            <summary>
            Interleaves controls created from a factory method between each control in the sequence.
            </summary>
            <param name="controls">Controls to iterate.</param>
            <param name="getSeparator">Method which returns the separator control.</param>
            <returns>Interleaved control sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="controls"/> is null or <paramref name="getSeparator"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.Find``1(System.Web.UI.ControlCollection)">
            <summary>
            Returns all of the controls in a control tree that are of the specified type.
            </summary>
            <typeparam name="TControl">The type of the control to find.</typeparam>
            <param name="controls">The control collection to search.</param>
            <returns>The controls of the specified type found in the control tree.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.BindVisibility(System.Web.UI.ControlCollection,System.Web.UI.WebControls.CheckBox,System.Web.UI.Control)">
            <summary>
            Binds the visibility of a control to a <see cref="T:CheckBox"/> control.
            </summary>
            <param name="toControl">Control collection.</param>
            <param name="checkBox"><see cref="T:CheckBox"/> control which will control the visibility of <paramref name="boundControl"/>.</param>
            <param name="boundControl"><see cref="T:Control"/> which will have its visibility toggled by <paramref name="checkBox"/>.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.IncludeClientResourceInPage(System.Web.UI.Control,Inedo.Web.ClientResources.ClientResource)">
            <summary>
            Includes the specified client resource in the parent page of a control.
            </summary>
            <param name="control">Control which is contained by a page that implements <see cref="T:Inedo.Web.ClientResources.IClientResourceHost"/>.</param>
            <param name="clientResource">The client resource to add to the page.</param>
            <remarks>
            <paramref name="control"/> must have been added to a page which implements <see cref="T:Inedo.Web.ClientResources.IClientResourceHost"/>.
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.CExtensions.CreateControl">
            <summary>
            Returns a new control.
            </summary>
            <returns>Control to add.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.ClassCollection">
            <summary>
            Represents a collection of CSS classes on an element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ClassCollection"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ClassCollection"/> class.
            </summary>
            <param name="classes">CSS class or classes to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ClassCollection"/> class.
            </summary>
            <param name="classes">CSS classes to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ClassCollection"/> class.
            </summary>
            <param name="classes">CSS classes to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.op_Implicit(Inedo.Web.Controls.ClassCollection)~System.String">
            <summary>
            Converts a <see cref="T:Inedo.Web.Controls.ClassCollection"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="c">The <see cref="T:Inedo.Web.Controls.ClassCollection"/>.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.op_Implicit(System.String)~Inedo.Web.Controls.ClassCollection">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:Inedo.Web.Controls.ClassCollection"/>.
            </summary>
            <param name="s">The <see cref="T:System.String"/>.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ClassCollection.Item(System.Int32)">
            <summary>
            Gets the class at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The class.</returns>
        </member>
        <member name="P:Inedo.Web.Controls.ClassCollection.Count">
            <summary>
            Gets the number of classes.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.Add(System.String)">
            <summary>
            Adds the class to the collection of it is not already present.
            </summary>
            <param name="item">The class to add.</param>
            <returns>True if the class was added; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the classes to the collection if they are not already present.
            </summary>
            <param name="items">The classes to add.</param>
            <returns>True if any class was added; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.Clear">
            <summary>
            Clears the class collection.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether the specified class is present.
            </summary>
            <param name="item">The class.</param>
            <returns>True if the class is in the collection; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.Remove(System.String)">
            <summary>
            Removes the specified class.
            </summary>
            <param name="item">The class to remove.</param>
            <returns>True if class was removed; false if it was not in the collection.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.GetEnumerator">
            <summary>
            Returns the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the specified class if it is present; otherwise -1.
            </summary>
            <param name="item">The class.</param>
            <returns>Index of the specified class if it is present; otherwise -1.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts the class at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The class.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the class at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ClassCollection.ToString">
            <summary>
            Returns a space separated string of all of the classes.
            </summary>
            <returns>Space separated class string.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.ControlCollectionWrapper`1">
            <summary>
            Provides a strongly typed wrapper for child controls
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
        </member>
        <member name="T:Inedo.Web.Controls.ControlDefaulter">
            <summary>
            Provides automatic initialization of properties to default values for controls.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ControlDefaulter.InitializeControl(System.Web.UI.Control)">
            <summary>
            Initializes a control by setting default property values.
            </summary>
            <param name="control">The control to initialize.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.ControlDefaulter.SetDefaultProperties``1(System.Action{``0})">
            <summary>
            Adds a default property setter for a control type.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="setProperties">Delegate which is invoked to initialize properties on instances of <typeparamref name="TControl"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="setProperties"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.DatePicker">
            <summary>
            A TextBox that drops down a JavaScript-based calendar.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.DatePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.DatePicker"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.DatePicker.DateFormat">
            <summary>
            Gets or sets the .NET date format to use.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.DatePicker.Value">
            <summary>
            Gets or sets the current value of the textbox.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.DatePicker.Text">
            <summary>
            This is just here to hide the text property.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.Element">
            <summary>
            Represents a basic HTML element.
            </summary>
            <remarks>
            The ASP.NET page lifecycle should not be used, and most of the methods of been sealed or obsoleted
            for your protection. Instead, you can utilize the following.
            <list type="bullet">
            <item><see cref="M:Inedo.Web.Controls.Element.CreateChildControls"/>: constructor</item>
            <item><see cref="M:Inedo.Web.Controls.Element.OnInit(System.EventArgs)"/>: constructor or <see cref="M:Inedo.Web.Controls.Element.Initialize"/></item>
            <item><see cref="M:Inedo.Web.Controls.Element.OnLoad(System.EventArgs)"/>: constructor or <see cref="M:Inedo.Web.Controls.Element.Initialize"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.Element.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.Element"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.Element.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.Element"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> is null or empty or <paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.Element.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.Element"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> is null or empty, <paramref name="content"/> is null, or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="P:Inedo.Web.Controls.Element.ElementType">
            <summary>
            Gets the type of the element passed to the constructor.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.Element.IsIdRequired">
            <summary>
            Gets a value indicating whether a client control ID is required
            for this element and any child elements.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.Element.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.Element.Class">
            <summary>
            Gets or sets the "class" attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.Element.Style">
            <summary>
            Gets or sets the "style" attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.Element.InnerText">
            <summary>
            Gets or sets the inner text.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.Element.InnerHtml">
            <summary>
            Gets or sets the inner HTML.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.Element.Classes">
            <summary>
            Gets the collection of CSS classes.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.Element.IsClientIdRequiredLegacy">
            <summary>
            Returns a value indicating whether this control should render an ID attribute.
            </summary>
            <returns>True if the ID should be rendered; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.Element.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
            <remarks>
            This method is used when rendering as a <see cref="T:Inedo.Web.Controls.ISimpleControl"/>
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.Element.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.Element.IncludeClientResourceInPage(Inedo.Web.ClientResources.ClientResource)">
            <summary>
            Includes a client resource.
            </summary>
            <param name="clientResource">The client resource.</param>
        </member>
        <member name="M:Inedo.Web.Controls.Element.GetChildControls">
            <summary>
            Gets the child controls.
            </summary>
            <returns>The child controls.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.Element.GetClientResources">
            <summary>
            Returns the required client resources.
            </summary>
            <returns>The client resources.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.Element.Initialize">
            <summary>
            Called before the control is rendered.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.Element.GetControlsFromArgument(System.Object,System.Web.UI.IAttributeAccessor)">
            <summary>
            Gets the controls from the argument.
            </summary>
            <param name="arg">The argument.</param>
            <param name="attributeSource">The attribute source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Inedo.Web.Controls.Element.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
            <remarks>
            This method is used when rendering in a traditional ASP.NET Page Lifecycle
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.Element.WriteInnerHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the inner HTML.
            </summary>
            <param name="writer">The writer.</param>
            <remarks>
            This method is used when rendering as a <see cref="T:Inedo.Web.Controls.ISimpleControl"/>
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.ElementAttribute">
            <summary>
            Represents an attribute on an HTML element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ElementAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ElementAttribute"/> class.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="P:Inedo.Web.Controls.ElementAttribute.Name">
            <summary>
            Gets the name of the attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ElementAttribute.Value">
            <summary>
            Gets the value of the attribute.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ElementAttribute.SetOnAccessor(System.Web.UI.IAttributeAccessor)">
            <summary>
            Sets the on accessor.
            </summary>
            <param name="attributeSource">The attribute source.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ElementAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.Web.Controls.HtmlColor">
            <summary>
            Represents a valid HTML or CSS color.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.HtmlColor"/> struct.
            </summary>
            <param name="red">The red channel value.</param>
            <param name="green">The green channel value.</param>
            <param name="blue">The blue channel value.</param>
            <param name="alpha">The alpha channel value.</param>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.HtmlColor"/> struct.
            </summary>
            <param name="red">The red channel value.</param>
            <param name="green">The green channel value.</param>
            <param name="blue">The blue channel value.</param>
        </member>
        <member name="P:Inedo.Web.Controls.HtmlColor.Blue">
            <summary>
            Gets the blue channel value.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.HtmlColor.Green">
            <summary>
            Gets the green channel value.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.HtmlColor.Red">
            <summary>
            Gets the red channel value.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.HtmlColor.Alpha">
            <summary>
            Gets the alpha channel value.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlColor.TryParse(System.String)">
            <summary>
            Tries to parse the string into an <see cref="T:Inedo.Web.Controls.HtmlColor"/> instance.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>The instance if parsing was successful; otherwise null.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlColor.Equals(Inedo.Web.Controls.HtmlColor,Inedo.Web.Controls.HtmlColor)">
            <summary>
            Tests for equality.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
            <returns>True if colors are the same; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlColor.Equals(Inedo.Web.Controls.HtmlColor)">
            <summary>
            Tests for equality.
            </summary>
            <param name="other">The other color.</param>
            <returns>True if colors are the same; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlColor.Equals(System.Object)">
            <summary>
            Tests for equality.
            </summary>
            <param name="obj">The other color.</param>
            <returns>True if colors are the same; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlColor.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlColor.ToString">
            <summary>
            Returns an HTML string representation of the color without alpha information.
            </summary>
            <returns>HTML string representation of the color.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.ISimpleClientResourceConsumer">
            <summary>
            Implemented by simple controls which require client resources.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ISimpleClientResourceConsumer.GetClientResources">
            <summary>
            Returns the client resources required by the control.
            </summary>
            <returns>Client resources.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.IMandatoryClientIdPolicyContainer">
            <summary>
            Indicates that a control has a mandatory client ID policy.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.IMandatoryClientIdPolicyContainer.ID">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.IMandatoryClientIdPolicyContainer.IsIdRequired">
            <summary>
            Gets a value indicating whether a client control ID is required
            for this element and any child elements.
            </summary>
            <remarks>
            A value of null indicates that the policy should be inherited from the
            nearest parent policy container. If all parents up the chain return null
            or do not have a policy container, the default is true.
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.ISimpleControl">
            <summary>
            Represents a control that can write its state to HTML at any time.
            </summary>
            <remarks>
            Implementors must not utilize any aspect of the HttpContext, nor rely on any elements of the ASP.NET request lifecycle.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.ISimpleControl.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.ISimpleControlContainer">
            <summary>
            A container of <see cref="T:Inedo.Web.Controls.ISimpleControl"/> controls.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ISimpleControlContainer.GetChildControls">
            <summary>
            Gets the child controls.
            </summary>
            <returns>The child controls.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.ISimplePostControl">
            <summary>
            Represents a simple control that supports postbacks.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ISimplePostControl.IsParticipatingInPost">
            <summary>
            Gets a value indicating whether this control is currently participating
            in a postback.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ISimplePostControl.Key">
            <summary>
            Gets or sets the key used for POST data; this is the "name" attribute generally.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ISimplePostControl.SetValue(System.String)">
            <summary>
            Called during the initial processing of a POST request when a value that matches this Key is found; typically this will set the text/value of the input.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ISimplePostControl.ProcessValidPost">
            <summary>
            Called after all <see cref="T:Inedo.Web.Controls.ISimplePostControl"/> have had their values set and 
            all <see cref="T:Inedo.Web.ISimpleValidator"/> have run successfully.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ISimpleValidationExpression">
            <summary>
            A simple validation expression for a field.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ISimpleValidationExpression.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ISimpleValidationExpression.Required">
            <summary>
            Gets a value indicating whether the value is required.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ISimpleValidationExpression.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ISimpleValidationExpression.Pattern">
            <summary>
            Gets a regular express pattern.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ISimpleValidationExpression.MaxLength">
            <summary>
            Gets the maximum length.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ISimpleValidationExpression.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.JQueryMethodWithArgs">
            <summary>
            Writes a client-side script to invoke a jquery-style method on
            a specified element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.JQueryMethodWithArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.JQueryMethodWithArgs"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.JQueryMethodWithArgs.Target">
            <summary>
            Gets or sets the element on which the method will be invoked.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.JQueryMethodWithArgs.JQueryMethod">
            <summary>
            Gets or sets the jquery method to invoke.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.JQueryMethodWithArgs.MethodArgs">
            <summary>
            Gets or sets an object that will be json-formatted as the method's arguments.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.JQueryMethodWithArgs.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.JQueryMethodWithArgs.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.LiteralHtml">
            <summary>
            Basically a <see cref="T:System.Web.UI.LiteralControl"/>, except that implements <see cref="T:Inedo.Web.Controls.ISimpleControl"/> and provides for optional encoding.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.LiteralHtml.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.LiteralHtml"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.LiteralHtml.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.LiteralHtml"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Inedo.Web.Controls.LiteralHtml.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.LiteralHtml" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="writeEncoded">if set to <c>true</c> [write encoded].</param>
        </member>
        <member name="P:Inedo.Web.Controls.LiteralHtml.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.LiteralHtml.WriteEncoded">
            <summary>
            Gets or sets a value indicating whether [write encoded].
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.LiteralHtml.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.LiteralHtml.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.LiteralHtml.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.Web.Controls.PasswordTextBox">
            <summary>
            A basic password textbox.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PasswordTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.PasswordTextBox"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.PasswordTextBox.Text">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.PasswordTextBox.SecureText">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.PasswordTextBox.Required">
            <summary>
            Gets or sets a value indicating whether the password is required.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PasswordTextBox.CreateChildControls">
            <summary>
            Creates the child controls.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.PopupHyperlink">
            <summary>
            A Hyperlink that opens a new window
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PopupHyperlink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.PopupHyperlink"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PopupHyperlink.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.PopupHyperlink"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.PopupHyperlink.WindowHeight">
            <summary>
            Gets or sets the height of the popup window.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.PopupHyperlink.WindowWidth">
            <summary>
            Gets or sets the width of the popup window.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.PopupHyperlink.Resizable">
            <summary>
            Gets a value indicating whether the popup window will be resizable.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.PopupHyperlink.ScrollBars">
            <summary>
            Gets a value indicating whether the popup window will have scroll bars.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PopupHyperlink.Initialize">
            <summary>
            Initializes the control.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.RenderDelegator">
            <summary>
            Control which invokes a delegate in its <see cref="M:Inedo.Web.Controls.RenderDelegator.Render(System.Web.UI.HtmlTextWriter)"/> method.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.RenderDelegator.#ctor(System.Action{System.IO.TextWriter})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.RenderDelegator"/> class.
            </summary>
            <param name="renderHandler">The delegate to invoke.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderDelegator.GetClientResources">
            <summary>
            Gets the client resources.
            </summary>
            <returns>The client resources.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.RenderDelegator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderDelegator.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.RenderClientScriptDelegator">
            <summary>
            Renders a block of Javascript in a script element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.RenderClientScriptDelegator.#ctor(System.Action{System.IO.TextWriter})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.RenderClientScriptDelegator"/> class.
            </summary>
            <param name="renderHandler">The delegate to invoke.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderClientScriptDelegator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderClientScriptDelegator.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.RenderJQueryDocReadyDelegator">
            <summary>
            Renders a jQuery document ready function in a script element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.RenderJQueryDocReadyDelegator.#ctor(System.Action{System.IO.TextWriter})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.RenderJQueryDocReadyDelegator"/> class.
            </summary>
            <param name="renderHandler">The delegate to invoke.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderJQueryDocReadyDelegator.GetClientResources">
            <summary>
            Gets the client resources.
            </summary>
            <returns>The client resources.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.RenderJQueryDocReadyDelegator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderJQueryDocReadyDelegator.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SelectList">
            <summary>
            A slightly more canonical select list that uses select2.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SelectList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SelectList"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SelectList.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.SelectListItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SelectList"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SelectList.#ctor(Inedo.Web.Controls.SelectListItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SelectList"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SelectList.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether a postback to the server automatically
            occurs when the user changes the list selection.
            </summary>
            <value>
              true if a postback to the server automatically occurs whenever the user changes
            the selection of the list; otherwise, false. The default is false.
            </value>
        </member>
        <member name="E:Inedo.Web.Controls.SelectList.SelectedValueChanged">
            <summary>
            Occurs when the selected value changes after a postback
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SelectList.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SelectList.SelectedValue">
            <summary>
            Gets or sets the selected value
            </summary>
            <remarks>
            Note that this will override any <see cref="T:Inedo.Web.Controls.SelectListItem"/> setting
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.SelectListItem">
            <summary>
            A basic list item for use in a <see cref="T:Inedo.Web.Controls.SelectList" />.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SelectListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SelectListItem"/> class.
            </summary>
            <param name="text">The item text.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SelectListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SelectListItem"/> class.
            </summary>
            <param name="text">The item text.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SelectListItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SelectListItem"/> class.
            </summary>
            <param name="text">The item text.</param>
            <param name="value">The item value.</param>
            <param name="selected">Value indicating whether the item is selected.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SelectListItem.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SelectListItem"/> class.
            </summary>
            <param name="text">The item text.</param>
            <param name="value">The item value.</param>
            <param name="selected">Value indicating whether the item is selected.</param>
            <param name="optionGroup">The option group of the item.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SelectListItem.Selected">
            <summary>
            Gets or sets a value indicating the "selected"  attribute will be written.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SelectListItem.Text">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SelectListItem.Value">
            <summary>
            Gets or sets the value attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SelectListItem.OptionGroup">
            <summary>
            Gets or sets the name of the option group this should be grouped in.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SelectListItem.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleCheckBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.CheckBox"/> that implements <see cref="T:Inedo.Web.Controls.ISimplePostControl"/>.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleControlCollection">
            <summary>
            Represents a collection of simple controls.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleControlCollection"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleControlCollection.Item(System.Int32)">
            <summary>
            Gets or sets the control at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The control.</returns>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleControlCollection.Count">
            <summary>
            Gets the number of controls.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Add(Inedo.Web.Controls.ISimpleControl)">
            <summary>
            Adds a control to the collection.
            </summary>
            <param name="item">The control to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Add(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.ISimpleControl})">
            <summary>
            Adds controls to the collection.
            </summary>
            <param name="items">The controls to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null or one of the controls is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Add(Inedo.Web.Controls.ISimpleControl[])">
            <summary>
            Adds controls to the collection.
            </summary>
            <param name="items">The controls to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null or one of the controls is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Add(System.Object)">
            <summary>
            Adds an object to the collection as a control.
            </summary>
            <param name="item">The object.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Add(System.Object[])">
            <summary>
            Adds objects to the collection as controls.
            </summary>
            <param name="items">The objects.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.AddLiteral(System.String,System.Boolean)">
            <summary>
            Adds an HTML literal control.
            </summary>
            <param name="literal">The HTML.</param>
            <param name="encoded">Value indicating whether <paramref name="literal"/> should be encoded.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Clear">
            <summary>
            Removes all controls from the collection.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Contains(Inedo.Web.Controls.ISimpleControl)">
            <summary>
            Returns a value indicating whether a control is in the collection.
            </summary>
            <param name="item">The control.</param>
            <returns>True if control is in the collection; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Remove(Inedo.Web.Controls.ISimpleControl)">
            <summary>
            Removes a control from the collection.
            </summary>
            <param name="item">The control.</param>
            <returns>True if control was removed; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.IndexOf(Inedo.Web.Controls.ISimpleControl)">
            <summary>
            Returns the index of the specified control in the collection.
            </summary>
            <param name="item">The control.</param>
            <returns>Index of the control or -1 if it is not in the collection.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.Insert(System.Int32,Inedo.Web.Controls.ISimpleControl)">
            <summary>
            Inserts a control into the collection.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The control.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a control from the collection.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the control collection.
            </summary>
            <returns>Enumerator for the control collection.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleControlHost">
            <summary>
            Hosts a simple control inside an ASP.NET control tree.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleControlHost.#ctor(Inedo.Web.Controls.ISimpleControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleControlHost"/> class.
            </summary>
            <param name="control">The control to wrap.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleControlHost.Control">
            <summary>
            Gets the wrapped control.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHiddenField">
            <summary>
            An input element designed to replace <see cref="T:System.Web.UI.WebControls.HiddenField"/>.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHiddenField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHiddenField" /> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHiddenField.#ctor(Inedo.Web.Controls.ElementAttribute[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHiddenField" /> class.
            </summary>
            <param name="attrs">The attrs.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHiddenField.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.ElementAttribute})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHiddenField" /> class.
            </summary>
            <param name="attrs">The attrs.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHiddenField.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHiddenField.CreateControlCollection">
            <summary>
            Creates the control collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.A">
            <summary>
            The HTML a element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
            <param name="href">The href.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
            <param name="href">The href.</param>
            <param name="text">The text.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
            <param name="href">The href.</param>
            <param name="text">The text.</param>
            <param name="content">The content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.A.Href">
            <summary>
            Gets or sets the href attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.A.Target">
            <summary>
            Gets or sets the target attribute.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Attr">
            <summary>
            Simple attributes.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Href(System.Object)">
            <summary>
            Hrefs the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Src(System.Object)">
            <summary>
            Sources the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Class(System.Object)">
            <summary>
            @classes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Style(System.Object)">
            <summary>
            Styles the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Onclick(System.Object)">
            <summary>
            Onclicks the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Alt(System.Object)">
            <summary>
            Alts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Title(System.Object)">
            <summary>
            Titles the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Id(System.Object)">
            <summary>
            Identifiers the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Attr.Target(System.Object)">
            <summary>
            Targets the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.B">
            <summary>
            The HTML b element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.B.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.B"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.B.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.B"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.B.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.B"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Div">
            <summary>
            The HTML div element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Div.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Div"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Div.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Div"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Div.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Div"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H1">
            <summary>
            The HTML h1 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H1"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H1.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H1"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H2">
            <summary>
            The HTML h2 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H2"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H2.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H2"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H2.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H2"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H3">
            <summary>
            The HTML h3 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H3"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H3.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H3"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H3.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H3"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H4">
            <summary>
            The HTML h4 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H4"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H4.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H4"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H4.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H4"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H5">
            <summary>
            The HTML h5 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H5.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H5"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H5.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H5"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H5.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H5"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H6">
            <summary>
            The HTML h6 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H6.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H6"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H6.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H6"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H6.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H6"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.I">
            <summary>
            The HTML i element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.I.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.I"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.I.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.I"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.I.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.I"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Img">
            <summary>
            The HTML img element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Img.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Img"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Img.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Img"/> class.
            </summary>
            <param name="src">The src attribute.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Img.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Img"/> class.
            </summary>
            <param name="src">The src attribute.</param>
            <param name="alt">The alt attribute.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.Src">
            <summary>
            Gets or sets the src attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.Alt">
            <summary>
            Gets or sets the alt attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.InnerText">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.InnerHtml">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.Controls">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Img.CreateControlCollection">
            <summary>
            Creates an empty control collection the control collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Label">
            <summary>
            The HTML label element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Label"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Label.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Label"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Label.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Label"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Label.For">
            <summary>
            Gets or sets for attribute.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Li">
            <summary>
            The HTML li element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Li.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Li"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Li.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Li"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Li.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Li"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Link">
            <summary>
            The HTML link element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Link.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Link"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Rel">
            <summary>
            Gets or sets the rel.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Href">
            <summary>
            Gets or sets the href.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Type">
            <summary>
            Gets or sets the href.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Media">
            <summary>
            Gets or sets the media.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.InnerText">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.InnerHtml">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Controls">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Link.CreateControlCollection">
            <summary>
            Creates an empty control collection the control collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Ol">
            <summary>
            The HTML ol element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ol.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ol.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ol.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.SimpleHtml.Li})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
            <param name="listItems">The list items.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ol.#ctor(Inedo.Web.Controls.SimpleHtml.Li[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
            <param name="listItems">The list items.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Option">
            <summary>
            The HTML option element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Option.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Option"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Option.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Option"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Option.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Option"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Option.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Option"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="value">The value.</param>
            <param name="selected">Value indicating whether the option is selected.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Option.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Option.OptGroup">
            <summary>
            Gets or sets the name of the containing option group.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Option.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Inedo.Web.Controls.SimpleHtml.Option"/> is selected.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.P">
            <summary>
            The HTML p element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.P.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.P"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.P.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.P"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.P.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.P"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Pre">
            <summary>
            The HTML pre element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Pre.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Pre"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Pre.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Pre"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Pre.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Pre"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Pre.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Select">
            <summary>
            The HTML select element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Select.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Select"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Select.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Select"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Select.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Select"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Select.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <remarks>
            When set, overrides the selected attribute on child <see cref="T:Inedo.Web.Controls.SimpleHtml.Option"/>
            </remarks>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Select.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether multiple selection mode is enabled.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Select.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Select.WriteInnerHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the inner.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Span">
            <summary>
            The HTML span element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Span.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Span"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Span.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Span"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Span.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Span"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Table">
            <summary>
            The HTML table element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Table.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Table"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Table.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Table"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Table.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Table"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Tbody">
            <summary>
            The HTML tbody element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Tbody.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Tbody"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Tbody.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Tbody"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Tbody.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Tbody"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Td">
            <summary>
            The HTML td element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Td.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Td"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Td.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Td"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Td.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Td"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Th">
            <summary>
            The HTML th element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Th.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Th"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Th.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Th"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Th.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Th"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Tr">
            <summary>
            The HTML tr element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Tr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Tr"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Tr.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Tr"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Tr.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Tr"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Ul">
            <summary>
            The HTML ul element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ul.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ul"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ul.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ul"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ul.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ul"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ul.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.SimpleHtml.Li})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ul"/> class.
            </summary>
            <param name="listItems">The list items.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ul.#ctor(Inedo.Web.Controls.SimpleHtml.Li[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ul"/> class.
            </summary>
            <param name="listItems">The list items.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleInput">
            <summary>
            An input element designed to replace <see cref="T:Inedo.Web.Controls.ValidatingTextBox"/>.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleInput"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleInput.#ctor(Inedo.Web.Controls.ElementAttribute[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleInput"/> class.
            </summary>
            <param name="attrs">The attributes.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleInput.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.ElementAttribute})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleInput"/> class.
            </summary>
            <param name="attrs">The attributes.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.AutoCompleteValues">
            <summary>
            Gets or sets auto-complete values for the textbox.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.FieldName">
            <summary>
            Gets or sets the name of the field used in validation messages
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.Required">
            <summary>
            Gets or sets a value indicating whether a value is required.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <remarks>
            This will restrict the input as well.
            </remarks>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.Pattern">
            <summary>
            Gets or sets the regex used to validate.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.ValidatorText">
            <summary>
            Gets or sets a custom validation error message.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.MaxLength">
            <summary>
            Gets or sets the maximum length attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.ServerValidate">
            <summary>
            Gets or sets the server validate.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleInput.ServerValidateIfNullOrEmpty">
            <summary>
            Gets or sets a value indicating whether [server validate if null or empty].
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleInput.Initialize">
            <summary>
            Initializes the control.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleInput.CreateControlCollection">
            <summary>
            Creates the control collection.
            </summary>
            <returns>The control collection.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleInput.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
            <remarks>
            This method is used when rendering in a traditional ASP.NET Page Lifecycle
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleVirtualCompositeControl">
            <summary>
            A collection of simple controls used to render a group without an element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleVirtualCompositeControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleVirtualCompositeControl"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleVirtualCompositeControl.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleVirtualCompositeControl"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleVirtualCompositeControl.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleVirtualCompositeControl"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleVirtualCompositeControl.Controls">
            <summary>
            Gets the control collection.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleVirtualCompositeControl.Visible">
            <summary>
            Gets or sets a value indicating whether to render the controls.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleVirtualCompositeControl.GetClientResources">
            <summary>
            Returns all of the client resources for the child controls.
            </summary>
            <returns>Client resources.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleVirtualCompositeControl.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Renders the controls.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleVirtualCompositeControl.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleVirtualCompositeControl.Initialize">
            <summary>
            Called before the control is rendered.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SlimFormField">
            <summary>
            A display field with a label.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SlimFormField.#ctor(Inedo.Web.Controls.LiteralHtml)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SlimFormField"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SlimFormField.#ctor(Inedo.Web.Controls.LiteralHtml,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SlimFormField"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SlimFormField.#ctor(Inedo.Web.Controls.LiteralHtml,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SlimFormField"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="content">The content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SlimFormField.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SlimFormField.HelpText">
            <summary>
            Gets or sets the field help text.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTable">
            <summary>
            A table element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTable"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTable.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTable"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTable.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTable"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.StyledTable.Rows">
            <summary>
            Gets a wrapper that returns only the rows.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTable.Initialize">
            <summary>
            Initializes the control.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTableCell">
            <summary>
            A td element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableCell"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableCell.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableCell"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableCell.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableCell"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.StyledTableCell.Width">
            <summary>
            Gets or sets the width of the cell.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.StyledTableCell.ColumnSpan">
            <summary>
            Gets or sets the column span.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableCell.Initialize">
            <summary>
            Adds the attributes to render.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTableHeaderCell">
            <summary>
            A th element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderCell"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderCell.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderCell"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderCell.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderCell"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTableRow">
            <summary>
            A tr element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableRow"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableRow.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableRow"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableRow.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableRow"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.StyledTableRow.Cells">
            <summary>
            Gets the cells.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTableHeaderRow">
            <summary>
            A tr element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderRow"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderRow.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderRow"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderRow.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderRow"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.TagTextBox">
            <summary>
            A text box that supports entry of multiple tags.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.TagTextBox.AllowTagCreation">
            <summary>
            Gets or sets a value indicating whether the user can create new tags.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.TagTextBox.Tags">
            <summary>
            Gets or sets the valid tags to display.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.TagTextBox.Width">
            <summary>
            Gets or sets the width of the control.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.TagTextBox.SelectedTags">
            <summary>
            Gets the currently selected tags.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.TagTextBox.GetClientResources">
            <summary>
            Adds the required client resources.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.TagTextBox.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.TagTextBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
            <remarks>
            This method is used when rendering in a traditional ASP.NET Page Lifecycle
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.TagTextBox.SelectedTagCollection">
            <summary>
            Contains selected tags.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.TagTextBox.SelectedTagCollection.Count">
            <summary>
            Gets the number of tags selected.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.TagTextBox.SelectedTagCollection.Add(System.String)">
            <summary>
            Adds the specified tag.
            </summary>
            <param name="tag">The tag to add.</param>
            <returns>True if tag was added; false if it was already in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.TagTextBox.SelectedTagCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified tags.
            </summary>
            <param name="tags">The tags to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tags"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.TagTextBox.SelectedTagCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.TagTextBox.SelectedTagCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether the specified tag is contained in the collection.
            </summary>
            <param name="tag">The tag to find.</param>
            <returns>True if tag is contained in the collection; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.TagTextBox.SelectedTagCollection.Remove(System.String)">
            <summary>
            Removes the specified tag.
            </summary>
            <param name="tag">The tag to remove.</param>
            <returns>True if tag was removed; false if it was not in the collection.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.TimePicker">
            <summary>
            A text box using jquery_timepicker to facilitate time entry.
            </summary>    
        </member>
        <member name="M:Inedo.Web.Controls.TimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.TimePicker"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.TimePicker.TimeFormat">
            <summary>
            Gets or sets the .NET time format string.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.TimePicker.TimeFromMidnight">
            <summary>
            Gets or sets the amount of time that has passed since midnight.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.TimePicker.OnPreRender(System.EventArgs)">
            <summary>
            Registers client script for generating postback events prior to rendering on the client, if <see cref="P:System.Web.UI.WebControls.TextBox.AutoPostBack" /> is true.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Inedo.Web.Controls.TimePicker.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="M:Inedo.Web.Controls.TimePicker.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.ValidatingTextBox">
            <summary>
            A text box control with extra options for validation.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ValidatingTextBox"/> class.
            </summary>
        </member>
        <member name="E:Inedo.Web.Controls.ValidatingTextBox.ServerValidate">
            <summary>
            When set, attaches a <see cref="T:StyledCustomValidator"/> with the event.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.ValidatorText">
            <summary>
            Gets or sets the text of the validators that are created.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.ValidatorDisplay">
            <summary>
            Gets or sets the display of the validators that are created.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.Required">
            <summary>
            Gets or sets whether the textbox is required.
            </summary>
            <remarks>
            If required, a <see cref="T:StyledRequiredFieldValidator"/> will be created.
            </remarks>        
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.ValidationExpression">
            <summary>
            Gets or sets whether the textbox has a validation expression.
            </summary>
            <remarks>
            If required, a <see cref="T:StyledRegularExpressionValidator"/> will be created.
            </remarks>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.Type">
            <summary>
            Gets or sets the textbox's <see cref="T:System.Web.UI.WebControls.ValidationDataType"/>.
            </summary>
            <remarks>
            If other than <see cref="F:System.Web.UI.WebControls.ValidationDataType.String"/>, a <see cref="T:System.Web.UI.WebControls.RangeValidator"/>
            will be created and client script added.
            </remarks>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.AutoCompleteValues">
            <summary>
            Gets or sets auto-complete values for the textbox.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.SetValidatorDefaultProperties``1(System.Action{``0})">
            <summary>
            Sets the default properties.
            </summary>
            <typeparam name="TValidator">The type of the text box.</typeparam>
            <param name="setValidatorPropertiesDelegate">The set properties delegate.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.CreateValidator``1">
            <summary>
            Returns a new validator.
            </summary>
            <typeparam name="TValidator">The type of the validator.</typeparam>
            <returns>New instance of the validator.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.PostRender(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Posts the render.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.ServerValidateIfNullOrEmpty">
            <summary>
            Gets or sets a value indicating whether [server validate if null or empty].
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.Ajax">
            <summary>
            Contains static methods for working with ajax methods.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.Ajax.GetUrl(System.Action{System.Web.HttpContext})">
            <summary>
            Returns the URL for the method specified by the delegate.
            </summary>
            <param name="d">The delegate.</param>
            <returns>URL for the specified method.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="d"/> does not refer to a static method or the method does not have an <see cref="T:Inedo.Web.Handlers.AjaxMethodAttribute"/> attribute applied.</exception>
        </member>
        <member name="M:Inedo.Web.Handlers.Ajax.GetUrl(System.Func{System.Web.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Returns the URL for the method specified by the delegate.
            </summary>
            <param name="d">The delegate.</param>
            <returns>URL for the specified method.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="d"/> does not refer to a static method or the method does not have an <see cref="T:Inedo.Web.Handlers.AjaxMethodAttribute"/> attribute applied.</exception>
        </member>
        <member name="M:Inedo.Web.Handlers.Ajax.GetUrl(System.Delegate)">
            <summary>
            Returns the URL for the method specified by the delegate.
            </summary>
            <param name="d">The delegate.</param>
            <returns>URL for the specified method.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="d"/> does not refer to a static method or the method does not have an <see cref="T:Inedo.Web.Handlers.AjaxMethodAttribute"/> attribute applied.</exception>
        </member>
        <member name="M:Inedo.Web.Handlers.Ajax.GetUrl(System.Reflection.MethodInfo)">
            <summary>
            Returns the URL for the specified static method.
            </summary>
            <param name="method">The static method.</param>
            <returns>URL for the specified method.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not static or does not have an <see cref="T:Inedo.Web.Handlers.AjaxMethodAttribute"/> attribute applied.</exception>
        </member>
        <member name="T:Inedo.Web.Handlers.AjaxMethodAttribute">
            <summary>
            Marks a static method as a handler for simple AJAX queries.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.AjaxMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the AjaxMethodAttribute class.
            </summary>
        </member>
        <member name="T:Inedo.Web.ClientResources.ClientResource">
            <summary>
            A file that may be embedded in an assembly that is intended for web client usage.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResource.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.ClientResource"/> class.
            </summary>
            <param name="embeddedIn">The embedded in.</param>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResource.#ctor(System.Reflection.Assembly,System.String,System.Collections.Generic.IEnumerable{Inedo.Web.ClientResources.ClientResource})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.ClientResource"/> class.
            </summary>
            <param name="embeddedIn">The embedded in.</param>
            <param name="relativePath">The relative path.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="P:Inedo.Web.ClientResources.ClientResource.EmbeddedIn">
            <summary>
            Gets the assembly the resource is embedded in, or null if it's not an embedded resource.
            </summary>
        </member>
        <member name="P:Inedo.Web.ClientResources.ClientResource.ResourcePath">
            <summary>
            Gets the relative path of the resource.
            </summary>
        </member>
        <member name="P:Inedo.Web.ClientResources.ClientResource.Dependencies">
            <summary>
            Gets the dependencies.
            </summary>
        </member>
        <member name="P:Inedo.Web.ClientResources.ClientResource.ResourceVersion">
            <summary>
            Gets the resource version.
            </summary>
            <remarks>
            If embedded, this comes from the assembly; otherwise, <see cref="P:Inedo.InedoLib.ApplicationVersion"/>
            </remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResource.GetResourceInfo(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Gets resource metadata.
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <returns>Resource metadata.</returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResource.WriteResource(System.IO.Stream,Inedo.Web.ClientResources.ClientResourceManager,System.Boolean)">
            <summary>
            Writes the resource.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="resourceManager">The resource manager.</param>
            <param name="writeCompressed">Value indicating whether to write compressed data.</param>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResource.Open(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Opens the resource.
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <returns>The resource stream.</returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResource.Equals(Inedo.Web.ClientResources.ClientResource)">
            <summary>
            Returns a value indicating whether this instance is equivalent to another.s
            </summary>
            <param name="other">The other instance.</param>
            <returns>True if the resources are the same; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResource.ResolveUrl(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Resolves the resource path by appending the base resource path and assembly name if it's a relative url and
            appending a querystring
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResource.WriteHtml(Inedo.Web.SlimHtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Writes the resource as a reference
            </summary>
            <param name="writer">The writer.</param>
            <param name="resourceManager">The manager.</param>
        </member>
        <member name="T:Inedo.Web.ClientResources.ClientResourceHostExtensions">
            <summary>
            Contains extension methods for <see cref="T:Inedo.Web.ClientResources.IClientResourceHost"/>.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResourceHostExtensions.IncludeClientResources(Inedo.Web.ClientResources.IClientResourceHost,System.Collections.Generic.IEnumerable{Inedo.Web.ClientResources.ClientResource})">
            <summary>
            Includes multiple client resources.
            </summary>
            <param name="host">The client resource host.</param>
            <param name="resources">The client resources.</param>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResourceHostExtensions.IncludeClientResources(Inedo.Web.ClientResources.IClientResourceHost,Inedo.Web.ClientResources.ClientResource[])">
            <summary>
            Includes multiple client resources.
            </summary>
            <param name="host">The client resource host.</param>
            <param name="resources">The client resources.</param>
        </member>
        <member name="T:Inedo.Web.ClientResources.IClientResourceInfo">
            <summary>
            Minimally describes a client resource file.
            </summary>
        </member>
        <member name="P:Inedo.Web.ClientResources.IClientResourceInfo.IsCompressed">
            <summary>
            Gets a value indicating whether the file is compressed.
            </summary>
        </member>
        <member name="P:Inedo.Web.ClientResources.IClientResourceInfo.LastModified">
            <summary>
            Gets the modified date of the file in UTC.
            </summary>
        </member>
        <member name="T:Inedo.Web.ClientResources.ClientResourceManager">
            <summary>
            A control that manages client resources for a page.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResourceManager.#ctor(System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.ClientResourceManager" /> class.
            </summary>
            <param name="baseResourceUrl">The base resource URL.</param>
            <param name="diskPathMapper">A delegate to map a disk path.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Inedo.Web.ClientResources.ClientResourceManager.Current">
            <summary>
            Gets the current client resource manager.
            </summary>
        </member>
        <member name="P:Inedo.Web.ClientResources.ClientResourceManager.BaseResourcePath">
            <summary>
            Gets or sets the base resource URL.
            </summary>
            <remarks>
            This will always end with a /.
            </remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResourceManager.IncludeClientResource(Inedo.Web.ClientResources.ClientResource)">
            <summary>
            Includes the script and all of its dependents.
            </summary>
            <param name="resource">The script.</param>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResourceManager.WriteHtml(Inedo.Web.SlimHtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Inedo.Web.ClientResources.IClientResourceHost">
            <summary>
            Describes something that can host client resources.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.IClientResourceHost.IncludeClientResource(Inedo.Web.ClientResources.ClientResource)">
            <summary>
            Includes the script.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="T:Inedo.Web.ClientResources.JavascriptResource">
            <summary>
            Represents a Javascript file.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.JavascriptResource.#ctor(System.String,Inedo.Web.ClientResources.ClientResource[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.JavascriptResource"/> class.
            </summary>
            <param name="relativePath">The relative path.</param>
            <param name="dependencies">The dependencies.</param>
            <remarks>
            This is not an embedded resource
            </remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.JavascriptResource.#ctor(System.Reflection.Assembly,System.String,Inedo.Web.ClientResources.ClientResource[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.JavascriptResource"/> class.
            </summary>
            <param name="embeddedIn">The embedded in.</param>
            <param name="relativePath">The relative path.</param>
            <param name="dependencies">The dependencies.</param>
            <remarks>
            This is an embedded resource
            </remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.JavascriptResource.WriteHtml(Inedo.Web.SlimHtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Writes the resource as a reference
            </summary>
            <param name="writer">The writer.</param>
            <param name="resourceManager">The manager.</param>
        </member>
        <member name="T:Inedo.Web.ClientResources.StylesheetResource">
            <summary>
            Represents a CSS file.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.StylesheetResource.#ctor(System.String,Inedo.Web.ClientResources.ClientResource[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.StylesheetResource"/> class.
            </summary>
            <param name="relativePath">The relative path.</param>
            <param name="dependencies">The dependencies.</param>
            <remarks>
            This is not an embedded resource
            </remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.StylesheetResource.#ctor(System.Reflection.Assembly,System.String,Inedo.Web.ClientResources.ClientResource[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.StylesheetResource"/> class.
            </summary>
            <param name="embeddedIn">The embedded in.</param>
            <param name="relativePath">The relative path.</param>
            <param name="dependencies">The dependencies.</param>
            <remarks>
            This is an embedded resource
            </remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.StylesheetResource.#ctor(System.Reflection.Assembly,System.String,System.Collections.Generic.IEnumerable{Inedo.Web.ClientResources.ClientResource})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.StylesheetResource"/> class.
            </summary>
            <param name="embeddedIn">The embedded in.</param>
            <param name="relativePath">The relative path.</param>
            <param name="dependencies">The dependencies.</param>
            <remarks>
            This is an embedded resource
            </remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.StylesheetResource.WriteHtml(Inedo.Web.SlimHtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Writes the HTML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="resourceManager">The resource manager.</param>
        </member>
        <member name="T:Inedo.Web.DP.DpComputedAttribute">
            <summary>
            Marks a property as computed, and not part of the model otherwise
            </summary>
        </member>
        <member name="M:Inedo.Web.DP.DpComputedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.DP.DpComputedAttribute"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:Inedo.Web.DP.DpComputedAttribute.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:Inedo.Web.DP.DpComputedProperty">
            <summary>
            A simple object that will be serialized as JSON for DP
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpComputedProperty.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpComputedProperty.Computed">
            <summary>
            Gets or sets the computed function body.
            </summary>
        </member>
        <member name="T:Inedo.Web.DP.DpContextInvocation">
            <summary>
            A wrapper to invoke create and initialize a DpContext
            </summary>
            <remarks>
            The DpContext is used to provide binding to Knockout, as well as validators and other elements
            </remarks>
        </member>
        <member name="P:Inedo.Web.DP.DpContextInvocation.RootElementId">
            <summary>
            The Id of the DOM element that will act as the root binding context;
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpContextInvocation.Data">
            <summary>
            The model that will be passed to the binder; this is required
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpContextInvocation.Binder">
            <summary>
            The name of a function to invoke instead of the default DP binder
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpContextInvocation.PostUrl">
            <summary>
            The url to post the data to instead of the current url
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpContextInvocation.Validators">
            <summary>
            The DpValidators to use with the <see cref="P:Inedo.Web.DP.DpContextInvocation.Data"/> model
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpContextInvocation.Computeds">
            <summary>
            Computed properties to use instead of properties in the <see cref="P:Inedo.Web.DP.DpContextInvocation.Data"/>
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpContextInvocation.RefreshInterval">
            <summary>
            The interval, in seconds, that the refresh method should be invoked
            </summary>
        </member>
        <member name="T:Inedo.Web.DP.DpValidateAttribute">
            <summary>
            Validation for properties for a model.
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpValidateAttribute.ServerValidatorType">
            <summary>
            Gets or sets the type of the server validator; this must be a <see cref="T:Inedo.Web.DP.IDpServerValidator"/>.
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpValidateAttribute.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpValidateAttribute.Required">
            <summary>
            Gets or sets a value indicating whether the value is required.
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpValidateAttribute.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpValidateAttribute.Pattern">
            <summary>
            Gets or sets a regular expression pattern.
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpValidateAttribute.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
        </member>
        <member name="M:Inedo.Web.DP.DpValidateAttribute.ApplyToJsonValidator(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Applies the properties of this instance to a JSON-based validator
            </summary>
            <param name="jsonProps">The json props.</param>
        </member>
        <member name="T:Inedo.Web.DP.DpValidatedProperty">
            <summary>
            defines a validator for a property
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpValidatedProperty.Name">
            <summary>
            Name of the property to validate
            </summary>
        </member>
        <member name="P:Inedo.Web.DP.DpValidatedProperty.Validator">
            <summary>
            A dictionary of properties from a <see cref="T:Inedo.Web.DP.DpValidatedProperty"/>
            </summary>
        </member>
        <member name="T:Inedo.Web.DP.IDpServerValidator">
            <summary>
            Represents a server-side validation method requested from a <see cref="T:Inedo.Web.DP.DpValidateAttribute"/>
            </summary>
        </member>
        <member name="M:Inedo.Web.DP.IDpServerValidator.Validate(System.String,System.Object,System.Object)">
            <summary>
            Validates the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.Web.DP.KoBind">
            <summary>
            Common binding expressions for Knockout
            </summary>
        </member>
        <member name="T:Inedo.Web.DP.KoBindAttribute">
            <summary>
            An <see cref="T:Inedo.Web.Controls.ElementAttribute"/> that appends contents to a single "data-bind" attribute
            </summary>
        </member>
        <member name="M:Inedo.Web.DP.KoBindAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.DP.KoBindAttribute"/> class.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Inedo.Web.DP.KoBindAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.DP.KoBindAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Inedo.Web.DP.KoBindAttribute.SetOnAccessor(System.Web.UI.IAttributeAccessor)">
            <summary>
            Sets the on accessor.
            </summary>
            <param name="attributeSource">The attribute source.</param>
        </member>
        <member name="T:Inedo.Web.DP.KoBindingExpression">
            <summary>
            A string or object that evaluates to a binding expression
            </summary>
            <remarks>
            When implicitly converting from a string, the binding expression will be Javascript encoded.
            </remarks>
        </member>
        <member name="M:Inedo.Web.DP.KoBindingExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.DP.KoBindingExpression"/> struct.
            </summary>
            <param name="bindingExpression">The binding expression.</param>
        </member>
        <member name="M:Inedo.Web.DP.KoBindingExpression.op_Implicit(Inedo.Web.DP.KoBindingExpression)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Inedo.Web.DP.KoBindingExpression"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Inedo.Web.DP.KoBindingExpression.op_Implicit(System.String)~Inedo.Web.DP.KoBindingExpression">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Inedo.Web.DP.KoBindingExpression"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Inedo.Web.DP.KoBindingExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.DP.KoBindingExpression.Format(System.Object)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="val">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.Web.DP.KoBindingExpression`1">
            <summary>
            A string or object that evaluates to a binding expression
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            When implicitly converting from a string, the binding expression will be the string value.
            When implicitly converting from a non-string, the binding expression will be converted to Javascript
            </remarks>
        </member>
        <member name="T:Inedo.Web.DP.KoElement">
            <summary>
            A knockout virtual element.
            </summary>
        </member>
        <member name="T:Inedo.Web.ISimpleValidator">
            <summary>
            Represents a simple state validator.
            </summary>
        </member>
        <member name="M:Inedo.Web.ISimpleValidator.Validate">
            <summary>
            Performs validation against the current state.
            </summary>
            <returns>The validation result.</returns>
        </member>
        <member name="T:Inedo.Web.Server.AspWorkerRequest">
            <summary>
            Provides information for an ASP.NET request.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.#ctor(System.Net.HttpListenerContext,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.AspWorkerRequest"/> class.
            </summary>
            <param name="context">The HTTP context of the request.</param>
            <param name="virtualDir">The root virtual directory.</param>
            <param name="physicalDir">The root physical directory.</param>
            <param name="useDefaultPages">Value indicating whether default.aspx is used.</param>
            <param name="allowSetHeaderWwwAuthenticate">if set to <c>true</c> allow set header WWW authenticate.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.EndOfRequest">
            <summary>
            Used by the runtime to notify the <see cref="T:System.Web.HttpWorkerRequest"/> that request processing for the current request is complete.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.FlushResponse(System.Boolean)">
            <summary>
            Sends all pending response data to the client.
            </summary>
            <param name="finalFlush">true if this is the last time response data will be flushed; otherwise, false.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetHttpVerbName">
            <summary>
            Returns the specified member of the request header.
            </summary>
            <returns>
            The HTTP verb returned in the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetHttpVersion">
            <summary>
            Provides access to the HTTP version of the request (for example, "HTTP/1.1").
            </summary>
            <returns>
            The HTTP version returned in the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetLocalAddress">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The server IP address returned in the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetLocalPort">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The server port number returned in the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetQueryString">
            <summary>
            Returns the query string specified in the request URL.
            </summary>
            <returns>
            The request query string.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetRawUrl">
            <summary>
            Returns the URL path contained in the request header with the query string appended.
            </summary>
            <returns>
            The raw URL path of the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetRemoteAddress">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The client's IP address.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetRemotePort">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The client's HTTP port number.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetUriPath">
            <summary>
            Returns the virtual path to the requested URI.
            </summary>
            <returns>
            The path to the requested URI.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendKnownResponseHeader(System.Int32,System.String)">
            <summary>
            Adds a standard HTTP header to the response.
            </summary>
            <param name="index">The header index. For example, <see cref="F:System.Web.HttpWorkerRequest.HeaderContentLength"/>.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendResponseFromFile(System.IntPtr,System.Int64,System.Int64)">
            <summary>
            Adds the contents of the specified file to the response and specifies the starting position in the file and the number of bytes to send.
            </summary>
            <param name="handle">The handle of the file to send.</param>
            <param name="offset">The starting position in the file.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendResponseFromFile(System.String,System.Int64,System.Int64)">
            <summary>
            Adds the contents of the specified file to the response and specifies the starting position in the file and the number of bytes to send.
            </summary>
            <param name="filename">The name of the file to send.</param>
            <param name="offset">The starting position in the file.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendResponseFromMemory(System.Byte[],System.Int32)">
            <summary>
            Adds the specified number of bytes from a byte array to the response.
            </summary>
            <param name="data">The byte array to send.</param>
            <param name="length">The number of bytes to send, starting at the first byte.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendStatus(System.Int32,System.String)">
            <summary>
            Specifies the HTTP status code and status description of the response, such as SendStatus(200, "Ok").
            </summary>
            <param name="statusCode">The status code to send</param>
            <param name="statusDescription">The status description to send.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendUnknownResponseHeader(System.String,System.String)">
            <summary>
            Adds a nonstandard HTTP header to the response.
            </summary>
            <param name="name">The name of the header to send.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.CloseConnection">
            <summary>
            Terminates the connection with the client.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetAppPath">
            <summary>
            Returns the virtual path to the currently executing server application.
            </summary>
            <returns>
            The virtual path of the current application.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetAppPathTranslated">
            <summary>
            Returns the physical path to the currently executing server application.
            </summary>
            <returns>
            The physical path of the current application.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.ReadEntityBody(System.Byte[],System.Int32)">
            <summary>
            Reads request data from the client (when not preloaded).
            </summary>
            <param name="buffer">The byte array to read data into.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <returns>
            The number of bytes read.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetUnknownRequestHeader(System.String)">
            <summary>
            Returns a nonstandard HTTP request header value.
            </summary>
            <param name="name">The header name.</param>
            <returns>
            The header value.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetUnknownRequestHeaders">
            <summary>
            Get all nonstandard HTTP header name-value pairs.
            </summary>
            <returns>
            An array of header name-value pairs.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetKnownRequestHeader(System.Int32)">
            <summary>
            Returns the standard HTTP request header that corresponds to the specified index.
            </summary>
            <param name="index">The index of the header. For example, the <see cref="F:System.Web.HttpWorkerRequest.HeaderAllow"/> field.</param>
            <returns>
            The HTTP request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetServerVariable(System.String)">
            <summary>
            Returns a single server variable from a dictionary of server variables associated with the request.
            </summary>
            <param name="name">The name of the requested server variable.</param>
            <returns>
            The requested server variable.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetFilePath">
            <summary>
            When overridden in a derived class, returns the virtual path to the requested URI.
            </summary>
            <returns>
            The path to the requested URI.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetFilePathTranslated">
            <summary>
            Returns the physical file path to the requested URI (and translates it from virtual path to physical path: for example, "/proj1/page.aspx" to "c:\dir\page.aspx")
            </summary>
            <returns>
            The translated physical file path to the requested URI.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetPathInfo">
            <summary>
            Returns additional path information for a resource with a URL extension. That is, for the path /virdir/page.html/tail, the GetPathInfo value is /tail.
            </summary>
            <returns>
            Additional path information for a resource.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetUserToken">
            <summary>
            When overridden in a derived class, returns the client's impersonation token.
            </summary>
            <returns>
            A value representing the client's impersonation token. The default is 0.
            </returns>
        </member>
        <member name="T:Inedo.Web.Server.HttpApi">
            <summary>
            Contains methods for registering prefixes with http.sys.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.ReserveUrl(Inedo.Web.Server.UrlReservation)">
            <summary>
            Reserves a URL.
            </summary>
            <param name="reservation">URL reservation information.</param>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.DeleteReservation(System.String)">
            <summary>
            Deletes a URL reservation.
            </summary>
            <param name="url">URL reservation.</param>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.GetAllReservations">
            <summary>
            Returns a list of all URL reservations.
            </summary>
            <returns>All URL reservations in the system.</returns>
        </member>
        <member name="T:Inedo.Web.Server.HttpApi.HttpApiInternal">
            <summary>
            Provides access to the HTTP API.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.HttpApiInternal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.HttpApi.HttpApiInternal"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.HttpApiInternal.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Inedo.Web.Server.HttpApi.HttpApiInternal"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.HttpApiInternal.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.HttpApiInternal.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Inedo.Web.Server.HttpListenerHost">
            <summary>
            Hosts an ASP.NET site running via HttpListener.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.HttpListenerHost"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.Start(Inedo.Web.Server.WebServerConfiguration)">
            <summary>
            Starts listening for requests.
            </summary>
            <param name="settings">Web server configuration settings.</param>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.Stop">
            <summary>
            Stops listening for requests.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.GetAppDomain">
            <summary>
            Returns the AppDomain on which the server is running.
            </summary>
            <returns>AppDomain which contains the server.</returns>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> property.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.ProcessRequestAsync(System.IAsyncResult)">
            <summary>
            Handler for the BeginGetContext method.
            </summary>
            <param name="result">Result of the asynchronous operation.</param>
        </member>
        <member name="T:Inedo.Web.Server.IntegratedServer">
            <summary>
            Hosts an ASP.NET web application.
            </summary>
        </member>
        <member name="F:Inedo.Web.Server.IntegratedServer.AutoRestartDelay">
            <summary>
            Number of milliseconds to wait before attempting to restart the web server.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.Web.Server.IntegratedServer"/> class from being created.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.IntegratedServer.Settings">
            <summary>
            Gets the configuration settings used to create this server instance.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.IntegratedServer.IsRunning">
            <summary>
            Gets a value indicating whether the web server is running.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.Create(Inedo.Web.Server.WebServerConfiguration)">
            <summary>
            Returns a new web server instance.
            </summary>
            <param name="settings">Web server configuration settings.</param>
            <returns>New web server instance.</returns>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.IsUsingIntegratedServer(System.Web.HttpRequest)">
            <summary>
            Determines whether the specified request was created by the integrated web server
            </summary>
            <param name="request">The request.</param>
            <returns>
              <c>true</c> if the specified request is using integrated server; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.Start">
            <summary>
            Starts servicing requests.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.Stop">
            <summary>
            Stops servicing requests.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.ProcessRequests">
            <summary>
            Processes server requests.
            </summary>
        </member>
        <member name="T:Inedo.Web.Server.UrlReservation">
            <summary>
            Represents a URL reservation.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservation.#ctor(System.String,System.Security.AccessControl.DiscretionaryAcl)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.UrlReservation"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="dacl">The ACL for the reservation.</param>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservation.#ctor(System.String,Inedo.Web.Server.UrlReservationAccount[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.UrlReservation"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="accounts">The accounts.</param>
        </member>
        <member name="P:Inedo.Web.Server.UrlReservation.Prefix">
            <summary>
            Gets the URL prefix.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.UrlReservation.Accounts">
            <summary>
            Gets the user accounts which hold this reservation.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservation.GetSddl">
            <summary>
            Returns an SDDL constructed from this instance.
            </summary>
            <returns>SDDL constructed from this instance.</returns>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.Web.Server.UrlReservationAccount">
            <summary>
            Represents a user account associated with a URL reservation.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservationAccount.#ctor(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.UrlReservationAccount"/> class.
            </summary>
            <param name="sid">The sid.</param>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservationAccount.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.UrlReservationAccount"/> class.
            </summary>
            <param name="user">The user account name. This may include the domain name.</param>
        </member>
        <member name="P:Inedo.Web.Server.UrlReservationAccount.Sid">
            <summary>
            Gets the sid.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.UrlReservationAccount.TranslatedName">
            <summary>
            Gets the translated name of the user account.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservationAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservationAccount.GetSid(System.String)">
            <summary>
            Returns a SID constructed from a user name and a domain name.
            </summary>
            <param name="user">The user name.</param>
            <returns>SID constructed from the specified parameters.</returns>
        </member>
        <member name="T:Inedo.Web.Server.WebServerConfiguration">
            <summary>
            Contains web server configuration settings.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.VirtualPath">
            <summary>
            Gets or sets the application's root virtual path.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.PhysicalPath">
            <summary>
            Gets or sets the physical root path of the application.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.UseDefaultPages">
            <summary>
            Gets or sets a value indicating whether default.aspx is used.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.Prefixes">
            <summary>
            Gets the collection of prefixes registered to the application.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.AuthenticationSchemeSelectorDelegate">
            <summary>
            Gets or sets the delegate called to determine the protocol used to authenticate clients.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.AllowSetHeaderWwwAuthenticate">
            <summary>
            Gets or sets a value indicating whether allow set header WWW authenticate.
            </summary>
            <remarks>
            This is a fairly ugly hack that uses reflection.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.Clone">
            <summary>
            Returns a copy of the configuration.
            </summary>
            <returns>Copy of the configuration.</returns>
        </member>
        <member name="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix">
            <summary>
            Describes a prefix registered to the web server.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix"/> class.
            </summary>
            <param name="hostName">Name or IP address of the host.</param>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix"/> class.
            </summary>
            <param name="hostName">Name or IP address of the host.</param>
            <param name="port">The port on which the server listens.</param>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.HostName">
            <summary>
            Gets the name or IP address of the host.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.Port">
            <summary>
            Gets the port on which the server listens.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.Parse(System.String)">
            <summary>
            Returns a WebServerPrefix parsed from a string.
            </summary>
            <param name="s">String to parse.</param>
            <returns>WebServerPrefix parsed from the input string.</returns>
            <remarks>
            The string should be in the form: http://hostname:port
            </remarks>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection">
            <summary>
            Contains prefixes recognized by the web server.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection.Add(System.String)">
            <summary>
            Adds a new prefix to the collection.
            </summary>
            <param name="hostName">Name or IP address of the host.</param>
            <returns>Newly-added prefix.</returns>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection.Add(System.String,System.Int32)">
            <summary>
            Adds a new prefix to the collection.
            </summary>
            <param name="hostName">Name or IP address of the host.</param>
            <param name="port">Port of the host.</param>
            <returns>Newly-added prefix.</returns>
        </member>
        <member name="T:Inedo.Web.SlimHtmlTextWriter">
            <summary>
            Slimmed down version of <see cref="T:System.Web.UI.HtmlTextWriter"/>.
            </summary>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.SlimHtmlTextWriter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to wrap.</param>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.SlimHtmlTextWriter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to wrap.</param>
            <param name="initialIndentLevel">The starting indent level.</param>
        </member>
        <member name="P:Inedo.Web.SlimHtmlTextWriter.Encoding">
            <summary>
            Gets the encoding of the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="P:Inedo.Web.SlimHtmlTextWriter.IndentText">
            <summary>
            Gets or sets the string to use for individual indent tabs.
            </summary>
        </member>
        <member name="P:Inedo.Web.SlimHtmlTextWriter.IndentLevel">
            <summary>
            Gets the current indent level.
            </summary>
        </member>
        <member name="P:Inedo.Web.SlimHtmlTextWriter.CurrentTag">
            <summary>
            Gets the current tag.
            </summary>
        </member>
        <member name="P:Inedo.Web.SlimHtmlTextWriter.DisableFormatting">
            <summary>
            Gets or sets a value indicating whether formatting is currently enabled.
            </summary>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.WriteStartTag(System.String)">
            <summary>
            Writes an HTML tag.
            </summary>
            <param name="tagName">The tag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tagName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.WriteEndTag">
            <summary>
            Closes the current HTML tag.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no currently open tag.</exception>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.WriteAttribute(System.String,System.String)">
            <summary>
            Writes an attribute to the current tag.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">There is no current tag or the current tag has been closed.</exception>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.WriteClassAttribute(Inedo.Web.Controls.ClassCollection)">
            <summary>
            Writes the class attribute to the current tag using a class collection.
            </summary>
            <param name="classes">The class collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="classes"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">There is no current tag or the current tag has been closed.</exception>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.WriteAttributes(Inedo.Web.Controls.AttributeCollection)">
            <summary>
            Writes attributes contained in the attribute collection to the current tag.
            </summary>
            <param name="attributes">The class collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="attributes"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">There is no current tag or the current tag has been closed.</exception>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.Write(System.String)">
            <summary>
            Writes raw HTML.
            </summary>
            <param name="html">The HTML string to write.</param>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.WriteEncodedText(System.String)">
            <summary>
            HTML encodes the specified text before writing it.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.Flush">
            <summary>
            Flushes the writer.
            </summary>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the text.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.Write(System.Char[])">
            <summary>
            Writes the text.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.Write(System.Char)">
            <summary>
            Writes the character.
            </summary>
            <param name="value">The character.</param>
        </member>
        <member name="M:Inedo.Web.SlimHtmlTextWriter.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the writer.
            </summary>
            <param name="disposing">Value indicating whether to dispose manage resources.</param>
        </member>
        <member name="T:Inedo.Web.ValidationResults">
            <summary>
            Contains the result of a validation.
            </summary>
        </member>
        <member name="M:Inedo.Web.ValidationResults.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ValidationResults"/> struct.
            </summary>
            <param name="isValid">Value indicating whether the result is valid.</param>
        </member>
        <member name="M:Inedo.Web.ValidationResults.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ValidationResults"/> struct.
            </summary>
            <param name="isValid">Value indicating whether the result is valid.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Inedo.Web.ValidationResults.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
        </member>
        <member name="P:Inedo.Web.ValidationResults.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Inedo.Web.ValidationType">
            <summary>
            Specifies the type of simple validation to perform.
            </summary>
        </member>
        <member name="F:Inedo.Web.ValidationType.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:Inedo.Web.ValidationType.Integer">
            <summary>
            The value must be a valid 32-bit integer.
            </summary>
        </member>
        <member name="F:Inedo.Web.ValidationType.Double">
            <summary>
            The value must be a valid double-precision floating point number.
            </summary>
        </member>
        <member name="F:Inedo.Web.ValidationType.Date">
            <summary>
            The value must be a valid date.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.InedoService">
            <summary>
            Base class for Inedo services.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.InedoService"/> class.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.InedoService.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.InedoService.FriendlyName">
            <summary>
            Gets the display name of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.InedoService.Description">
            <summary>
            Gets the description of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.InedoService.CanPauseAndContinue">
            <summary>
            Gets a value indicating whether the service supports pause and continue commands.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.InedoService.Task">
            <summary>
            Gets a task which completes when the service is stopped.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.InedoService.IsRunning">
            <summary>
            Gets a value indicating whether the service is currently running.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.Start">
            <summary>
            Starts the service.
            </summary>
            <exception cref="T:System.InvalidOperationException">The service is already running.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.Stop">
            <summary>
            Stops the service.
            </summary>
            <exception cref="T:System.InvalidOperationException">The service is already stopped.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.Pause">
            <summary>
            Pauses the service.
            </summary>
            <exception cref="T:System.InvalidOperationException">The service is already stopped or paused.</exception>
            <exception cref="T:System.NotSupportedException">The service does not accept pause commands.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.Continue">
            <summary>
            Continues the service.
            </summary>
            <exception cref="T:System.InvalidOperationException">The service is already stopped or running.</exception>
            <exception cref="T:System.NotSupportedException">The service does not accept continue commands.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.GetWindowsService">
            <summary>
            Returns a <see cref="T:System.ServiceProcess.ServiceBase"/> which wraps this instance.
            </summary>
            <returns>A <see cref="T:System.ServiceProcess.ServiceBase"/> which wraps this instance.</returns>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.GetWindowsService(Inedo.WindowsServices.InedoService[])">
            <summary>
            Returns a <see cref="T:System.ServiceProcess.ServiceBase"/> which wraps the specified services.
            </summary>
            <param name="services">The services to wrap.</param>
            <returns>A <see cref="T:System.ServiceProcess.ServiceBase"/> which wraps the specified services.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="services"/> is empty.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.OnStart">
            <summary>
            Invoked when the service receives a start command.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.OnStop">
            <summary>
            Invoked when the service receives a stop command.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.OnPause">
            <summary>
            Invoked when the service receives a pause command.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.InedoService.OnContinue">
            <summary>
            Invoked when the service receives a continue command.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS">
            <summary>
            Access to the service. Before granting the requested access, the
            system checks the access token of the calling process. 
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_QUERY_CONFIG">
            <summary>
            Required to call the QueryServiceConfig and 
            QueryServiceConfig2 functions to query the service configuration.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_CHANGE_CONFIG">
            <summary>
            Required to call the ChangeServiceConfig or ChangeServiceConfig2 function 
            to change the service configuration. Because this grants the caller 
            the right to change the executable file that the system runs, 
            it should be granted only to administrators.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_QUERY_STATUS">
            <summary>
            Required to call the QueryServiceStatusEx function to ask the service 
            control manager about the status of the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_ENUMERATE_DEPENDENTS">
            <summary>
            Required to call the EnumDependentServices function to enumerate all 
            the services dependent on the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_START">
            <summary>
            Required to call the StartService function to start the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_STOP">
            <summary>
                Required to call the ControlService function to stop the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_PAUSE_CONTINUE">
            <summary>
            Required to call the ControlService function to pause or continue 
            the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_INTERROGATE">
            <summary>
            Required to call the EnumDependentServices function to enumerate all
            the services dependent on the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_USER_DEFINED_CONTROL">
            <summary>
            Required to call the ControlService function to specify a user-defined
            control code.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_ALL_ACCESS">
            <summary>
            Includes STANDARD_RIGHTS_REQUIRED in addition to all access rights in this table.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.ACCESS_SYSTEM_SECURITY">
            <summary>
            Required to call the QueryServiceObjectSecurity or 
            SetServiceObjectSecurity function to access the SACL. The proper
            way to obtain this access is to enable the SE_SECURITY_NAME 
            privilege in the caller's current access token, open the handle 
            for ACCESS_SYSTEM_SECURITY access, and then disable the privilege.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.DELETE">
            <summary>
            Required to call the DeleteService function to delete the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.READ_CONTROL">
            <summary>
            Required to call the QueryServiceObjectSecurity function to query
            the security descriptor of the service object.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.WRITE_DAC">
            <summary>
            Required to call the SetServiceObjectSecurity function to modify
            the Dacl member of the service object's security descriptor.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.WRITE_OWNER">
            <summary>
            Required to call the SetServiceObjectSecurity function to modify 
            the Owner and Group members of the service object's security 
            descriptor.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE">
            <summary>
            Service types.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_KERNEL_DRIVER">
            <summary>
            Driver service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_FILE_SYSTEM_DRIVER">
            <summary>
            File system driver service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_WIN32_OWN_PROCESS">
            <summary>
            Service that runs in its own process.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_WIN32_SHARE_PROCESS">
            <summary>
            Service that shares a process with one or more other services.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_INTERACTIVE_PROCESS">
            <summary>
            The service can interact with the desktop.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceApi.SERVICE_START">
            <summary>
            Service start options
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_BOOT_START">
            <summary>
            A device driver started by the system loader. This value is valid
            only for driver services.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_SYSTEM_START">
            <summary>
            A device driver started by the IoInitSystem function. This value 
            is valid only for driver services.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_AUTO_START">
            <summary>
            A service started automatically by the service control manager 
            during system startup. For more information, see Automatically 
            Starting Services.
            </summary>         
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_DEMAND_START">
            <summary>
            A service started by the service control manager when a process 
            calls the StartService function. For more information, see 
            Starting Services on Demand.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_DISABLED">
            <summary>
            A service that cannot be started. Attempts to start the service
            result in the error code ERROR_SERVICE_DISABLED.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR">
            <summary>
            Severity of the error, and action taken, if this service fails 
            to start.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR.SERVICE_ERROR_IGNORE">
            <summary>
            The startup program ignores the error and continues the startup
            operation.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR.SERVICE_ERROR_NORMAL">
            <summary>
            The startup program logs the error in the event log but continues
            the startup operation.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR.SERVICE_ERROR_SEVERE">
            <summary>
            The startup program logs the error in the event log. If the 
            last-known-good configuration is being started, the startup 
            operation continues. Otherwise, the system is restarted with 
            the last-known-good configuration.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR.SERVICE_ERROR_CRITICAL">
            <summary>
            The startup program logs the error in the event log, if possible.
            If the last-known-good configuration is being started, the startup
            operation fails. Otherwise, the system is restarted with the 
            last-known good configuration.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_CONNECT">
            <summary>
            Required to connect to the service control manager.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_CREATE_SERVICE">
            <summary>
            Required to call the CreateService function to create a service
            object and add it to the database.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_ENUMERATE_SERVICE">
            <summary>
            Required to call the EnumServicesStatusEx function to list the 
            services that are in the database.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_LOCK">
            <summary>
            Required to call the LockServiceDatabase function to acquire a 
            lock on the database.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_QUERY_LOCK_STATUS">
            <summary>
            Required to call the QueryServiceLockStatus function to retrieve 
            the lock status information for the database.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_MODIFY_BOOT_CONFIG">
            <summary>
            Required to call the NotifyBootConfigStatus function.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_ALL_ACCESS">
            <summary>
            Includes STANDARD_RIGHTS_REQUIRED, in addition to all access 
            rights in this table.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceControllerAction">
            <summary>
            Represents an action that the service control manager can perform.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.#ctor(Inedo.WindowsServices.ServiceControllerActionType,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.ServiceControllerAction"/> struct.
            </summary>
            <param name="type">The action to be performed.</param>
            <param name="delay">The time to wait before performing the specified action.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="delay"/> is less than zero or greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <remarks>
            The <paramref name="delay"/> parameter has a resolution of milliseconds.
            </remarks>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.op_Equality(Inedo.WindowsServices.ServiceControllerAction,Inedo.WindowsServices.ServiceControllerAction)">
            <summary>
            ==s the specified action1.
            </summary>
            <param name="action1">The action1.</param>
            <param name="action2">The action2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.op_Inequality(Inedo.WindowsServices.ServiceControllerAction,Inedo.WindowsServices.ServiceControllerAction)">
            <summary>
            !=s the specified action1.
            </summary>
            <param name="action1">The action1.</param>
            <param name="action2">The action2.</param>
            <returns></returns>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceControllerAction.Type">
            <summary>
            Gets the action to be performed.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceControllerAction.Delay">
            <summary>
            Gets the time to wait before performing the specified action.
            </summary>
            <remarks>
            This value has a resolution of milliseconds.
            </remarks>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.Equals(Inedo.WindowsServices.ServiceControllerAction)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceControllerActionType">
            <summary>
            The action to be performed.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceControllerActionType.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceControllerActionType.Restart">
            <summary>
            Restart the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceControllerActionType.Reboot">
            <summary>
            Reboot the computer.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceControllerActionType.RunCommand">
            <summary>
            Run a command.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceFailureActions">
            <summary>
            Represents the action the service controller should take on each failure of a service.
            A service is considered failed when it terminates without reporting a status of SERVICE_STOPPED to the service controller.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceFailureActions.#ctor(System.Nullable{System.Int32},System.String,System.String,Inedo.WindowsServices.ServiceControllerAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.ServiceFailureActions"/> class.
            </summary>
            <param name="resetPeriod">The reset period in seconds. A value of null indicates that this should never be reset.</param>
            <param name="rebootMessage">The message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action.</param>
            <param name="command">The command line of the process for the CreateProcess function to execute in response to the SC_ACTION_RUN_COMMAND service controller action.</param>
            <param name="actions">The actions to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="actions"/> is null.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceFailureActions.#ctor(System.Nullable{System.Int32},System.String,Inedo.WindowsServices.ServiceControllerAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.ServiceFailureActions"/> class.
            </summary>
            <param name="resetPeriod">The reset period in seconds. A value of null indicates that this should never be reset.</param>
            <param name="rebootMessage">The message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action.</param>
            <param name="actions">The actions to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="actions"/> is null.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceFailureActions.#ctor(System.Nullable{System.Int32},Inedo.WindowsServices.ServiceControllerAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.ServiceFailureActions"/> class.
            </summary>
            <param name="resetPeriod">The reset period in seconds. A value of null indicates that this should never be reset.</param>
            <param name="actions">The actions to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="actions"/> is null.</exception>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceFailureActions.ResetPeriod">
            <summary>
            Gets the time after which to reset the failure count to zero if there are no failures in seconds.
            A value of null indicates that this should never be reset.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceFailureActions.RebootMessage">
            <summary>
            Gets the message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceFailureActions.Command">
            <summary>
            Gets the command line of the process for the CreateProcess function to execute in response to the SC_ACTION_RUN_COMMAND service controller action.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceFailureActions.Actions">
            <summary>
            Gets the actions to perform.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceStartMode">
            <summary>
            Specifies the startup mode of a Windows service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceStartMode.Boot">
            <summary>
            A device driver started by the system loader. This value is valid only for driver services.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceStartMode.System">
            <summary>
            A device driver started by the IoInitSystem function. This value is valid only for driver services.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceStartMode.Auto">
            <summary>
            A service started automatically by the service control manager during system startup.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceStartMode.Demand">
            <summary>
            A service started by the service control manager when a process calls the StartService function.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceStartMode.Disabled">
            <summary>
            A service that cannot be started.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.WindowsService">
            <summary>
            Represents a Windows service on the local machine.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Inedo.WindowsServices.WindowsService"/> class.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.DisplayName">
            <summary>
            Gets the display name of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.Description">
            <summary>
            Gets or sets the service's description.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.FailureActions">
            <summary>
            Gets or sets the failure actions to perform if the service crashes.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.DelayedStart">
            <summary>
            Gets or sets a value indicating whether the delayed auto start feature is enabled for this service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.FileName">
            <summary>
            Gets or sets the file name of the service process.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.UserAccountName">
            <summary>
            Gets the user account name of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.StartMode">
            <summary>
            Gets or sets the startup mode of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.Dependencies">
            <summary>
            Gets the service dependencies.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.GetService(System.String)">
            <summary>
            Returns the service on the local machine with the specified name.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <returns>The service with the specified name or null if the service was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceName"/> is null or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The service controller could not be opened.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.CreateService(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a service and adds it to the local service controller database.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="displayName">The display name of the service.</param>
            <param name="fileName">The full path of the service's executable file.</param>
            <param name="userAccount">The user account the service will run as. See Remarks.</param>
            <param name="password">The password for the <paramref name="userAccount"/> parameter.</param>
            <returns>The newly-created service.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceName"/>, <paramref name="displayName"/>, or <paramref name="fileName"/> is null or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The service controller could not be opened or the service could not be created.</exception>
            <remarks>
            <para><paramref name="userAccount"/> is specified in the format: <c>domain\user</c></para>
            <para>Built-in accounts should be prefixed with <c>NT AUTHORITY</c>. For example: <c>NT AUTHORITY\LocalSystem</c>.</para>
            </remarks>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.CreateService(System.String,System.String,System.String)">
            <summary>
            Creates a service running as LocalSystem and adds it to the local service controller database.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="displayName">The display name of the service.</param>
            <param name="fileName">The full path of the service's executable file.</param>
            <returns>The newly-created service.</returns>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.Delete">
            <summary>
            Deletes the service from the service controller.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.SetUserAccount(System.String,System.String)">
            <summary>
            Changes the service's user account name and password.
            </summary>
            <param name="userAccountName">The user account to change the service to.</param>
            <param name="password">The password of the user account.</param>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.SetDependencies(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets the service's dependencies.
            </summary>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.SetDisplayName(System.String)">
            <summary>
            Sets the display name.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
